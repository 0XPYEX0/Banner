Subject: [PATCH] 1.20.2 to 1.20.4
---
Index: src/main/java/org/bukkit/advancement/AdvancementProgress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/advancement/AdvancementProgress.java b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
--- a/src/main/java/org/bukkit/advancement/AdvancementProgress.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/advancement/AdvancementProgress.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.advancement;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Collection;
 import java.util.Date;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * The individual status of an advancement for a player. This class is not
Index: src/main/java/org/bukkit/advancement/Advancement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/advancement/Advancement.java b/src/main/java/org/bukkit/advancement/Advancement.java
--- a/src/main/java/org/bukkit/advancement/Advancement.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/advancement/Advancement.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.advancement;
 
+import java.util.Collection;
 import org.bukkit.Keyed;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-
 /**
  * Represents an advancement that may be awarded to a player. This class is not
  * reference safe as the underlying advancement may be reloaded.
Index: src/main/java/org/bukkit/command/defaults/PluginsCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.command.defaults;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
 public class PluginsCommand extends BukkitCommand {
     public PluginsCommand(@NotNull String name) {
         super(name);
Index: src/main/java/org/bukkit/attribute/AttributeModifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/attribute/AttributeModifier.java b/src/main/java/org/bukkit/attribute/AttributeModifier.java
--- a/src/main/java/org/bukkit/attribute/AttributeModifier.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/attribute/AttributeModifier.java	(date 1703956060000)
@@ -1,17 +1,16 @@
 package org.bukkit.attribute;
 
 import com.google.common.base.Preconditions;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.UUID;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.util.NumberConversions;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-import java.util.UUID;
-
 /**
  * Concrete implementation of an attribute modifier.
  */
Index: src/main/java/org/bukkit/attribute/AttributeInstance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/attribute/AttributeInstance.java b/src/main/java/org/bukkit/attribute/AttributeInstance.java
--- a/src/main/java/org/bukkit/attribute/AttributeInstance.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/attribute/AttributeInstance.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.attribute;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Collection;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a mutable instance of an attribute and its associated modifiers
@@ -47,16 +46,6 @@
      */
     void addModifier(@NotNull AttributeModifier modifier);
 
-    // Paper start - Transient modifier API
-    /**
-     * Add a transient modifier to this instance.
-     * Transient modifiers are not persisted (saved with the NBT data)
-     *
-     * @param modifier to add
-     */
-    void addTransientModifier(@NotNull AttributeModifier modifier);
-    // Paper end
-
     /**
      * Remove a modifier from this instance.
      *
Index: src/main/java/org/bukkit/attribute/Attribute.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
--- a/src/main/java/org/bukkit/attribute/Attribute.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/attribute/Attribute.java	(date 1703956060000)
@@ -56,7 +56,7 @@
     /**
      * Maximum absorption of an Entity.
      */
-    MAX_ABSORPTION("generic.max_absorption"),
+    GENERIC_MAX_ABSORPTION("generic.max_absorption"),
     /**
      * Strength with which a horse will jump.
      */
Index: src/main/java/org/bukkit/command/Command.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
--- a/src/main/java/org/bukkit/command/Command.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/Command.java	(date 1703956060000)
@@ -2,6 +2,10 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.GameRule;
@@ -15,11 +19,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Set;
-
 /**
  * Represents a Command, which executes various tasks upon user input
  */
@@ -34,6 +33,7 @@
     protected String usageMessage;
     private String permission;
     private String permissionMessage;
+
     protected Command(@NotNull String name) {
         this(name, "", "/" + name, new ArrayList<String>());
     }
Index: src/main/java/org/bukkit/command/TabCompleter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/TabCompleter.java b/src/main/java/org/bukkit/command/TabCompleter.java
--- a/src/main/java/org/bukkit/command/TabCompleter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/TabCompleter.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.command;
 
+import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Represents a class which can suggest tab completions for commands.
  */
Index: src/main/java/org/bukkit/command/defaults/ReloadCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.command.defaults;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
 public class ReloadCommand extends BukkitCommand {
     public ReloadCommand(@NotNull String name) {
         super(name);
Index: src/main/java/org/bukkit/command/defaults/BukkitCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
--- a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.command.defaults;
 
+import java.util.List;
 import org.bukkit.command.Command;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 public abstract class BukkitCommand extends Command {
     protected BukkitCommand(@NotNull String name) {
         super(name);
Index: src/main/java/org/bukkit/command/defaults/HelpCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java	(date 1703956060000)
@@ -3,6 +3,13 @@
 import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
@@ -15,14 +22,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-
 public class HelpCommand extends BukkitCommand {
     public HelpCommand() {
         super("help");
Index: src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java b/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java
--- a/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java	(date 1703956060000)
@@ -14,4 +14,4 @@
     @NotNull
     @ApiStatus.Experimental
     public SocketAddress getAddress();
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/command/FormattedCommandAlias.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.command;
 
+import java.util.ArrayList;
 import org.bukkit.Bukkit;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.ArrayList;
-
 public class FormattedCommandAlias extends Command {
     private final String[] formatStrings;
 
Index: src/main/java/org/bukkit/command/SimpleCommandMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java	(date 1703956060000)
@@ -1,32 +1,26 @@
 package org.bukkit.command;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.command.DumpCommand;
-import com.mohistmc.banner.command.GetPluginListCommand;
-import com.mohistmc.banner.command.ModListCommand;
-import com.mohistmc.banner.command.PluginCommand;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 import org.bukkit.Location;
 import org.bukkit.Server;
 import org.bukkit.command.defaults.BukkitCommand;
 import org.bukkit.command.defaults.HelpCommand;
 import org.bukkit.command.defaults.PluginsCommand;
 import org.bukkit.command.defaults.ReloadCommand;
-import org.bukkit.command.defaults.TimingsCommand;
 import org.bukkit.command.defaults.VersionCommand;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
 public class SimpleCommandMap implements CommandMap {
     protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
     private final Server server;
@@ -40,11 +34,6 @@
         register("bukkit", new VersionCommand("version"));
         register("bukkit", new ReloadCommand("reload"));
         register("bukkit", new PluginsCommand("plugins"));
-        register("bukkit", new TimingsCommand("timings"));
-        register("banner", new ModListCommand("fabricmods"));
-        register("banner", new DumpCommand("dump"));
-        register("banner", new PluginCommand("plugin"));
-        register("banner", new GetPluginListCommand("getpluginlist"));
     }
 
     public void setFallbackCommands() {
@@ -156,12 +145,9 @@
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
             target.execute(sender, sentCommandLabel, Arrays.copyOfRange(args, 1, args.length));
         } catch (CommandException ex) {
-            server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
             throw ex;
         } catch (Throwable ex) {
-            String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
-            server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
-            throw new CommandException(msg, ex);
+            throw new CommandException("Unhandled exception executing '" + commandLine + "' in " + target, ex);
         }
 
         // return true as command was handled
@@ -240,9 +226,7 @@
         } catch (CommandException ex) {
             throw ex;
         } catch (Throwable ex) {
-            String msg = "Unhandled exception executing tab-completer for '" + cmdLine + "' in " + target;
-            server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerTabCompleteException(msg, ex, target, sender, args))); // Paper
-            throw new CommandException(msg, ex);
+            throw new CommandException("Unhandled exception executing tab-completer for '" + cmdLine + "' in " + target, ex);
         }
     }
 
@@ -292,10 +276,4 @@
             }
         }
     }
-
-    // Banner start - add methods to support plugin manager
-    public Map<String, Command> getKnownCommands() {
-        return knownCommands;
-    }
-    // Banner - end
 }
Index: src/main/java/org/bukkit/command/PluginCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/PluginCommand.java b/src/main/java/org/bukkit/command/PluginCommand.java
--- a/src/main/java/org/bukkit/command/PluginCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/PluginCommand.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.command;
 
 import com.google.common.base.Preconditions;
+import java.util.List;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Represents a {@link Command} belonging to a plugin
  */
Index: src/main/java/org/bukkit/command/CommandMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/CommandMap.java b/src/main/java/org/bukkit/command/CommandMap.java
--- a/src/main/java/org/bukkit/command/CommandMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/CommandMap.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.command;
 
+import java.util.List;
 import org.bukkit.Location;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 public interface CommandMap {
 
     /**
Index: src/main/java/org/bukkit/command/CommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
--- a/src/main/java/org/bukkit/command/CommandSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/CommandSender.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.command;
 
+import java.util.UUID;
 import org.bukkit.Server;
 import org.bukkit.permissions.Permissible;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.UUID;
-
 public interface CommandSender extends Permissible {
 
     /**
@@ -100,5 +99,4 @@
     @NotNull
     Spigot spigot();
     // Spigot end
-
 }
Index: src/main/java/org/bukkit/command/PluginCommandYamlParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
--- a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.command;
 
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 public class PluginCommandYamlParser {
 
Index: src/main/java/org/bukkit/block/sign/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/sign/package-info.java b/src/main/java/org/bukkit/block/sign/package-info.java
--- a/src/main/java/org/bukkit/block/sign/package-info.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/sign/package-info.java	(date 1703956060000)
@@ -1,4 +1,4 @@
 /**
  * Classes relevant to signs.
  */
-package org.bukkit.block.sign;
\ No newline at end of file
+package org.bukkit.block.sign;
Index: src/main/java/org/bukkit/block/banner/Pattern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/banner/Pattern.java b/src/main/java/org/bukkit/block/banner/Pattern.java
--- a/src/main/java/org/bukkit/block/banner/Pattern.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/banner/Pattern.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.block.banner;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import java.util.NoSuchElementException;
 import org.bukkit.DyeColor;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Map;
-import java.util.NoSuchElementException;
-
 @SerializableAs("Pattern")
 public class Pattern implements ConfigurationSerializable {
 
Index: src/main/java/org/bukkit/block/banner/PatternType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/banner/PatternType.java b/src/main/java/org/bukkit/block/banner/PatternType.java
--- a/src/main/java/org/bukkit/block/banner/PatternType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/banner/PatternType.java	(date 1703956060000)
@@ -1,56 +1,59 @@
 package org.bukkit.block.banner;
 
+import java.util.HashMap;
+import java.util.Map;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.HashMap;
-import java.util.Map;
-
-public enum PatternType {
-    BASE("b"),
-    SQUARE_BOTTOM_LEFT("bl"),
-    SQUARE_BOTTOM_RIGHT("br"),
-    SQUARE_TOP_LEFT("tl"),
-    SQUARE_TOP_RIGHT("tr"),
-    STRIPE_BOTTOM("bs"),
-    STRIPE_TOP("ts"),
-    STRIPE_LEFT("ls"),
-    STRIPE_RIGHT("rs"),
-    STRIPE_CENTER("cs"),
-    STRIPE_MIDDLE("ms"),
-    STRIPE_DOWNRIGHT("drs"),
-    STRIPE_DOWNLEFT("dls"),
-    STRIPE_SMALL("ss"),
-    CROSS("cr"),
-    STRAIGHT_CROSS("sc"),
-    TRIANGLE_BOTTOM("bt"),
-    TRIANGLE_TOP("tt"),
-    TRIANGLES_BOTTOM("bts"),
-    TRIANGLES_TOP("tts"),
-    DIAGONAL_LEFT("ld"),
-    DIAGONAL_RIGHT("rd"),
-    DIAGONAL_LEFT_MIRROR("lud"),
-    DIAGONAL_RIGHT_MIRROR("rud"),
-    CIRCLE_MIDDLE("mc"),
-    RHOMBUS_MIDDLE("mr"),
-    HALF_VERTICAL("vh"),
-    HALF_HORIZONTAL("hh"),
-    HALF_VERTICAL_MIRROR("vhr"),
-    HALF_HORIZONTAL_MIRROR("hhb"),
-    BORDER("bo"),
-    CURLY_BORDER("cbo"),
-    CREEPER("cre"),
-    GRADIENT("gra"),
-    GRADIENT_UP("gru"),
-    BRICKS("bri"),
-    SKULL("sku"),
-    FLOWER("flo"),
-    MOJANG("moj"),
-    GLOBE("glb"),
-    PIGLIN("pig");
+public enum PatternType implements Keyed {
+    BASE("b", "base"),
+    SQUARE_BOTTOM_LEFT("bl", "square_bottom_left"),
+    SQUARE_BOTTOM_RIGHT("br", "square_bottom_right"),
+    SQUARE_TOP_LEFT("tl", "square_top_left"),
+    SQUARE_TOP_RIGHT("tr", "square_top_right"),
+    STRIPE_BOTTOM("bs", "stripe_bottom"),
+    STRIPE_TOP("ts", "stripe_top"),
+    STRIPE_LEFT("ls", "stripe_left"),
+    STRIPE_RIGHT("rs", "stripe_right"),
+    STRIPE_CENTER("cs", "stripe_center"),
+    STRIPE_MIDDLE("ms", "stripe_middle"),
+    STRIPE_DOWNRIGHT("drs", "stripe_downright"),
+    STRIPE_DOWNLEFT("dls", "stripe_downleft"),
+    STRIPE_SMALL("ss", "small_stripes"),
+    CROSS("cr", "cross"),
+    STRAIGHT_CROSS("sc", "straight_cross"),
+    TRIANGLE_BOTTOM("bt", "triangle_bottom"),
+    TRIANGLE_TOP("tt", "triangle_top"),
+    TRIANGLES_BOTTOM("bts", "triangles_bottom"),
+    TRIANGLES_TOP("tts", "triangles_top"),
+    DIAGONAL_LEFT("ld", "diagonal_left"),
+    DIAGONAL_RIGHT("rd", "diagonal_up_right"), //PAIL - Why are these keys swapped?
+    DIAGONAL_LEFT_MIRROR("lud", "diagonal_up_left"),
+    DIAGONAL_RIGHT_MIRROR("rud", "diagonal_right"), //PAIL - Why are these keys swapped?
+    CIRCLE_MIDDLE("mc", "circle"),
+    RHOMBUS_MIDDLE("mr", "rhombus"),
+    HALF_VERTICAL("vh", "half_vertical"),
+    HALF_HORIZONTAL("hh", "half_horizontal"),
+    HALF_VERTICAL_MIRROR("vhr", "half_vertical_right"),
+    HALF_HORIZONTAL_MIRROR("hhb", "half_horizontal_bottom"),
+    BORDER("bo", "border"),
+    CURLY_BORDER("cbo", "curly_border"),
+    CREEPER("cre", "creeper"),
+    GRADIENT("gra", "gradient"),
+    GRADIENT_UP("gru", "gradient_up"),
+    BRICKS("bri", "bricks"),
+    SKULL("sku", "skull"),
+    FLOWER("flo", "flower"),
+    MOJANG("moj", "mojang"),
+    GLOBE("glb", "globe"),
+    PIGLIN("pig", "piglin");
 
     private final String identifier;
+    private final NamespacedKey key;
     private static final Map<String, PatternType> byString = new HashMap<String, PatternType>();
 
     static {
@@ -59,8 +62,15 @@
         }
     }
 
-    private PatternType(/*@NotNull*/ String key) {
-        this.identifier = key;
+    private PatternType(/*@NotNull*/ String identifier, String key) {
+        this.identifier = identifier;
+        this.key = NamespacedKey.minecraft(key);
+    }
+
+    @Override
+    @NotNull
+    public NamespacedKey getKey() {
+        return key;
     }
 
     /**
@@ -68,8 +78,11 @@
      * this pattern type
      *
      * @return the pattern's identifier
+     * @see #getKey
+     * @deprecated magic value
      */
     @NotNull
+    @Deprecated
     public String getIdentifier() {
         return identifier;
     }
@@ -80,9 +93,12 @@
      *
      * @param identifier the identifier
      * @return the matched pattern type or null
+     * @see Registry#BANNER_PATTERN
+     * @deprecated magic value, use {@link Registry#get(NamespacedKey)} instead
      */
     @Contract("null -> null")
     @Nullable
+    @Deprecated
     public static PatternType getByIdentifier(@Nullable String identifier) {
         return byString.get(identifier);
     }
Index: src/main/java/org/bukkit/block/structure/UsageMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/structure/UsageMode.java b/src/main/java/org/bukkit/block/structure/UsageMode.java
--- a/src/main/java/org/bukkit/block/structure/UsageMode.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/structure/UsageMode.java	(date 1703956060000)
@@ -23,7 +23,7 @@
      * Used to run specific custom functions, which can only be used for certain
      * Structures. The structure block is removed after this function completes.
      * The data tags (functions) can be found on the
-     * <a href="http://minecraft.gamepedia.com/Structure_Block#Data">wiki</a>.
+     * <a href="http://minecraft.wiki/w/Structure_Block#Data">wiki</a>.
      */
     DATA;
 }
Index: src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java b/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java
--- a/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.block.data.type;
 
+import java.util.Set;
 import org.bukkit.block.data.Directional;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Interface to the 'slot_0_occupied', 'slow_1_occupied' ... 'slot_5_occupied'
  * flags on a bookshelf which indicate which slots are occupied rendered on the
Index: src/main/java/org/bukkit/block/data/type/PointedDripstone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/type/PointedDripstone.java b/src/main/java/org/bukkit/block/data/type/PointedDripstone.java
--- a/src/main/java/org/bukkit/block/data/type/PointedDripstone.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/type/PointedDripstone.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.block.data.type;
 
+import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.Waterlogged;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * 'thickness' represents the dripstone thickness.
  * <br>
Index: src/main/java/org/bukkit/block/data/type/RedstoneWire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/type/RedstoneWire.java b/src/main/java/org/bukkit/block/data/type/RedstoneWire.java
--- a/src/main/java/org/bukkit/block/data/type/RedstoneWire.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/type/RedstoneWire.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.block.data.type;
 
+import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.AnaloguePowerable;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * 'north', 'east', 'south', 'west' represent the types of connections this
  * redstone wire has to adjacent blocks.
Index: src/main/java/org/bukkit/block/data/type/BrewingStand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/type/BrewingStand.java b/src/main/java/org/bukkit/block/data/type/BrewingStand.java
--- a/src/main/java/org/bukkit/block/data/type/BrewingStand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/type/BrewingStand.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.block.data.type;
 
+import java.util.Set;
 import org.bukkit.block.data.BlockData;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Interface to the 'has_bottle_0', 'has_bottle_1', 'has_bottle_2' flags on a
  * brewing stand which indicate which bottles are rendered on the outside.
Index: src/main/java/org/bukkit/block/data/Orientable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/Orientable.java b/src/main/java/org/bukkit/block/data/Orientable.java
--- a/src/main/java/org/bukkit/block/data/Orientable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/Orientable.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.block.data;
 
+import java.util.Set;
 import org.bukkit.Axis;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * 'axis' represents the axis along whilst this block is oriented.
  * <br>
Index: src/main/java/org/bukkit/block/data/type/Barrel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/type/Barrel.java b/src/main/java/org/bukkit/block/data/type/Barrel.java
--- a/src/main/java/org/bukkit/block/data/type/Barrel.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/type/Barrel.java	(date 1703956060000)
@@ -4,4 +4,4 @@
 import org.bukkit.block.data.Openable;
 
 public interface Barrel extends Directional, Openable {
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/block/data/Rail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/Rail.java b/src/main/java/org/bukkit/block/data/Rail.java
--- a/src/main/java/org/bukkit/block/data/Rail.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/Rail.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.block.data;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Set;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * 'shape' represents the current layout of a minecart rail.
Index: src/main/java/org/bukkit/block/data/MultipleFacing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/MultipleFacing.java b/src/main/java/org/bukkit/block/data/MultipleFacing.java
--- a/src/main/java/org/bukkit/block/data/MultipleFacing.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/MultipleFacing.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.block.data;
 
+import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * This class encompasses the 'north', 'east', 'south', 'west', 'up', 'down'
  * boolean flags which are used to set which faces of the block textures are
Index: src/main/java/org/bukkit/block/data/Directional.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/Directional.java b/src/main/java/org/bukkit/block/data/Directional.java
--- a/src/main/java/org/bukkit/block/data/Directional.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/Directional.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.block.data;
 
+import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * 'facing' represents the face towards which the block is pointing.
  * <br>
Index: src/main/java/org/bukkit/block/data/BlockData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/data/BlockData.java b/src/main/java/org/bukkit/block/data/BlockData.java
--- a/src/main/java/org/bukkit/block/data/BlockData.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/data/BlockData.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.block.data;
 
+import org.bukkit.Color;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Server;
@@ -204,6 +205,14 @@
      */
     boolean isFaceSturdy(@NotNull BlockFace face, @NotNull BlockSupport support);
 
+    /**
+     * Gets the color this block should appear as when rendered on a map.
+     *
+     * @return the color associated with this BlockData
+     */
+    @NotNull
+    Color getMapColor();
+
     /**
      * Gets the material that a player would use to place this block.
      * <p>
Index: src/main/java/org/bukkit/block/CreatureSpawner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/CreatureSpawner.java b/src/main/java/org/bukkit/block/CreatureSpawner.java
--- a/src/main/java/org/bukkit/block/CreatureSpawner.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/CreatureSpawner.java	(date 1703956060000)
@@ -1,6 +1,12 @@
 package org.bukkit.block;
 
+import java.util.Collection;
+import java.util.List;
+import org.bukkit.block.spawner.SpawnRule;
+import org.bukkit.block.spawner.SpawnerEntry;
+import org.bukkit.entity.EntitySnapshot;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -17,7 +23,8 @@
     public EntityType getSpawnedType();
 
     /**
-     * Set the spawner's creature type.
+     * Set the spawner's creature type. <br>
+     * This will override any entities that have been added with {@link #addPotentialSpawn}
      *
      * @param creatureType The creature type or null to clear.
      */
@@ -199,4 +206,75 @@
      * @see #getSpawnRange()
      */
     public void setSpawnRange(int spawnRange);
-}
\ No newline at end of file
+
+    /**
+     * Gets the {@link EntitySnapshot} that will be spawned by this spawner or null
+     * if no entities have been assigned to this spawner. <br>
+     * <p>
+     * All applicable data from the spawner will be copied, such as custom name,
+     * health, and velocity. <br>
+     *
+     * @return the entity snapshot or null if no entities have been assigned to this
+     *         spawner.
+     */
+    @Nullable
+    public EntitySnapshot getSpawnedEntity();
+
+    /**
+     * Sets the entity that will be spawned by this spawner. <br>
+     * This will override any previous entries that have been added with
+     * {@link #addPotentialSpawn}
+     * <p>
+     * All applicable data from the snapshot will be copied, such as custom name,
+     * health, and velocity. <br>
+     *
+     * @param snapshot the entity snapshot
+     */
+    public void setSpawnedEntity(@NotNull EntitySnapshot snapshot);
+
+    /**
+     * Adds a new {@link EntitySnapshot} to the list of entities this spawner can
+     * spawn.
+     * <p>
+     * The weight will determine how often this entry is chosen to spawn, higher
+     * weighted entries will spawn more often than lower weighted ones. <br>
+     * The {@link SpawnRule} will determine under what conditions this entry can
+     * spawn, passing null will use the default conditions for the given entity.
+     *
+     * @param snapshot  the snapshot that will be spawned
+     * @param weight    the weight
+     * @param spawnRule the spawn rule for this entity, or null
+     */
+    public void addPotentialSpawn(@NotNull EntitySnapshot snapshot, int weight, @Nullable SpawnRule spawnRule);
+
+    /**
+     * Adds a new {@link SpawnerEntry} to the list of entities this spawner can
+     * spawn. <br>
+     *
+     * @param spawnerEntry the spawner entry to use
+     * @see #addPotentialSpawn(EntitySnapshot, int, SpawnRule)
+     */
+    public void addPotentialSpawn(@NotNull final SpawnerEntry spawnerEntry);
+
+    /**
+     * Sets the list of {@link SpawnerEntry} this spawner can spawn. <br>
+     * This will override any previous entries added with
+     * {@link #addPotentialSpawn}
+     *
+     * @param entries the list of entries
+     */
+    public void setPotentialSpawns(@NotNull final Collection<SpawnerEntry> entries);
+
+    /**
+     * Gets a list of potential spawns from this spawner or an empty list if no
+     * entities have been assigned to this spawner. <br>
+     * Changes made to the returned list will not be reflected in the spawner unless
+     * applied with {@link #setPotentialSpawns}
+     *
+     * @return a list of potential spawns from this spawner, or an empty list if no
+     *         entities have been assigned to this spawner
+     * @see #getSpawnedType()
+     */
+    @NotNull
+    public List<SpawnerEntry> getPotentialSpawns();
+}
Index: src/main/java/org/bukkit/block/Beacon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Beacon.java b/src/main/java/org/bukkit/block/Beacon.java
--- a/src/main/java/org/bukkit/block/Beacon.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Beacon.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.block;
 
+import java.util.Collection;
 import org.bukkit.Nameable;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.potion.PotionEffect;
@@ -7,8 +8,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-
 /**
  * Represents a captured state of a beacon.
  */
Index: src/main/java/org/bukkit/block/Biome.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
--- a/src/main/java/org/bukkit/block/Biome.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Biome.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.block;
 
+import java.util.Locale;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Locale;
-
 /**
  * Holds all accepted Biomes in the default server
  */
Index: src/main/java/org/bukkit/block/PistonMoveReaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/PistonMoveReaction.java b/src/main/java/org/bukkit/block/PistonMoveReaction.java
--- a/src/main/java/org/bukkit/block/PistonMoveReaction.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/PistonMoveReaction.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit.block;
 
-import org.jetbrains.annotations.Nullable;
-
 import java.util.HashMap;
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents how a block or entity will react when interacting with a piston
Index: src/main/java/org/bukkit/block/BlockState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/BlockState.java b/src/main/java/org/bukkit/block/BlockState.java
--- a/src/main/java/org/bukkit/block/BlockState.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/BlockState.java	(date 1703956060000)
@@ -7,6 +7,7 @@
 import org.bukkit.block.data.BlockData;
 import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.Metadatable;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -47,6 +48,15 @@
     @NotNull
     BlockData getBlockData();
 
+    /**
+     * Returns a copy of this BlockState as an unplaced BlockState.
+     *
+     * @return a copy of the block state
+     */
+    @NotNull
+    @ApiStatus.Experimental
+    BlockState copy();
+
     /**
      * Gets the type of this block state.
      *
Index: src/main/java/org/bukkit/block/EntityBlockStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/EntityBlockStorage.java b/src/main/java/org/bukkit/block/EntityBlockStorage.java
--- a/src/main/java/org/bukkit/block/EntityBlockStorage.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/EntityBlockStorage.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.block;
 
+import java.util.List;
 import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Represents a captured state of a block which stores entities.
  *
Index: src/main/java/org/bukkit/block/Bell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Bell.java b/src/main/java/org/bukkit/block/Bell.java
--- a/src/main/java/org/bukkit/block/Bell.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Bell.java	(date 1703956060000)
@@ -86,4 +86,4 @@
      * resonating
      */
     public int getResonatingTicks();
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/block/SculkCatalyst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/SculkCatalyst.java b/src/main/java/org/bukkit/block/SculkCatalyst.java
--- a/src/main/java/org/bukkit/block/SculkCatalyst.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/SculkCatalyst.java	(date 1703956060000)
@@ -24,4 +24,4 @@
      * @param charges how much charge to spawn.
      */
     void bloom(@NotNull Block block, int charges);
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/block/Structure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Structure.java b/src/main/java/org/bukkit/block/Structure.java
--- a/src/main/java/org/bukkit/block/Structure.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Structure.java	(date 1703956060000)
@@ -223,7 +223,7 @@
     /**
      * Only applicable while in {@link UsageMode#DATA}. Metadata are specific
      * functions that can be applied to the structure location. Consult the
-     * <a href="https://minecraft.gamepedia.com/Structure_Block#Data">Minecraft
+     * <a href="https://minecraft.wiki/w/Structure_Block#Data">Minecraft
      * wiki</a> for more information.
      *
      * @param metadata the function to perform on the selected location
@@ -233,7 +233,7 @@
     /**
      * Get the metadata function this structure block will perform when
      * activated. Consult the
-     * <a href="https://minecraft.gamepedia.com/Structure_Block#Data">Minecraft
+     * <a href="https://minecraft.wiki/w/Structure_Block#Data">Minecraft
      * Wiki</a> for more information.
      *
      * @return the function that will be performed when this block is activated
Index: src/main/java/org/bukkit/block/SuspiciousSand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/SuspiciousSand.java b/src/main/java/org/bukkit/block/SuspiciousSand.java
--- a/src/main/java/org/bukkit/block/SuspiciousSand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/SuspiciousSand.java	(date 1703956060000)
@@ -1,10 +1,28 @@
 package org.bukkit.block;
 
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.loot.Lootable;
+import org.jetbrains.annotations.Nullable;
+
 /**
  * Represents a captured state of suspicious sand.
- *
- * @see BrushableBlock
- */
-@Deprecated
-public interface SuspiciousSand extends BrushableBlock {
+ */
+public interface SuspiciousSand extends Lootable, TileState {
+
+    /**
+     * Get the item which will be revealed when the sand is fully brushed away
+     * and uncovered.
+     *
+     * @return the item
+     */
+    @Nullable
+    public ItemStack getItem();
+
+    /**
+     * Sets the item which will be revealed when the sand is fully brushed away
+     * and uncovered.
+     *
+     * @param item the item
+     */
+    public void setItem(@Nullable ItemStack item);
 }
Index: src/main/java/org/bukkit/block/SculkShrieker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/SculkShrieker.java b/src/main/java/org/bukkit/block/SculkShrieker.java
--- a/src/main/java/org/bukkit/block/SculkShrieker.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/SculkShrieker.java	(date 1703956060000)
@@ -18,7 +18,7 @@
      */
     int getWarningLevel();
 
-     /**
+    /**
      * Sets the most recent warning level of this block.
      *
      * When the warning level reaches 4, the shrieker will attempt to spawn a
@@ -34,4 +34,4 @@
      * @param player the player that "caused" the shriek
      */
     void tryShriek(@Nullable Player player);
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/block/BlockSupport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/BlockSupport.java b/src/main/java/org/bukkit/block/BlockSupport.java
--- a/src/main/java/org/bukkit/block/BlockSupport.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/BlockSupport.java	(date 1703956060000)
@@ -30,4 +30,4 @@
      */
     RIGID;
 
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/block/Block.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
--- a/src/main/java/org/bukkit/block/Block.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Block.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.block;
 
+import java.util.Collection;
 import org.bukkit.Chunk;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
@@ -20,8 +21,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-
 /**
  * Represents a block. This is a live object, and only one Block may exist for
  * any given location in a world. The state of the block may change
@@ -354,6 +353,42 @@
      */
     boolean isLiquid();
 
+    // Paper start
+    /**
+     * Check if this block is solid
+     * <p>
+     * Determined by Minecraft, typically a block a player can use to place a new block to build things.
+     * An example of a non buildable block would be liquids, flowers, or fire
+     *
+     * @return true if block is buildable
+     */
+    boolean isBuildable();
+    /**
+     * Check if this block is burnable
+     * <p>
+     * Determined by Minecraft, typically a block that fire can destroy (Wool, Wood)
+     *
+     * @return true if block is burnable
+     */
+    boolean isBurnable();
+    /**
+     * Check if this block is replaceable
+     * <p>
+     * Determined by Minecraft, representing a block that is not AIR that you can still place a new block at, such as flowers.
+     * @return true if block is replaceable
+     */
+    boolean isReplaceable();
+    /**
+     * Check if this block is solid
+     * <p>
+     * Determined by Minecraft, typically a block a player can stand on and can't be passed through.
+     *
+     * This API is faster than accessing Material#isSolid as it avoids a material lookup and switch statement.
+     * @return true if block is solid
+     */
+    boolean isSolid();
+    // Paper end
+
     /**
      * Gets the temperature of this block.
      * <p>
Index: src/main/java/org/bukkit/block/Banner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Banner.java b/src/main/java/org/bukkit/block/Banner.java
--- a/src/main/java/org/bukkit/block/Banner.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Banner.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.block;
 
+import java.util.List;
 import org.bukkit.DyeColor;
 import org.bukkit.block.banner.Pattern;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Represents a captured state of a banner.
  */
Index: src/main/java/org/bukkit/block/DecoratedPot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/DecoratedPot.java b/src/main/java/org/bukkit/block/DecoratedPot.java
--- a/src/main/java/org/bukkit/block/DecoratedPot.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/DecoratedPot.java	(date 1703956060000)
@@ -1,17 +1,18 @@
 package org.bukkit.block;
 
+import java.util.List;
+import java.util.Map;
 import org.bukkit.Material;
 import org.bukkit.Tag;
+import org.bukkit.inventory.BlockInventoryHolder;
+import org.bukkit.inventory.DecoratedPotInventory;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-import java.util.Map;
-
 /**
  * Represents a captured state of a decorated pot.
  */
-public interface DecoratedPot extends TileState {
+public interface DecoratedPot extends TileState, BlockInventoryHolder {
 
     /**
      * Set the sherd on the provided side.
@@ -54,6 +55,21 @@
     @NotNull
     public List<Material> getShards();
 
+    /**
+     * @return inventory
+     * @see Container#getInventory()
+     */
+    @NotNull
+    @Override
+    public DecoratedPotInventory getInventory();
+
+    /**
+     * @return snapshot inventory
+     * @see Container#getSnapshotInventory()
+     */
+    @NotNull
+    public DecoratedPotInventory getSnapshotInventory();
+
     /**
      * A side on a decorated pot. Sides are relative to the facing state of a
      * {@link org.bukkit.block.data.type.DecoratedPot}.
@@ -64,4 +80,4 @@
         RIGHT,
         FRONT
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/block/Sign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java
--- a/src/main/java/org/bukkit/block/Sign.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Sign.java	(date 1703956060000)
@@ -51,45 +51,37 @@
 
     /**
      * Marks whether this sign can be edited by players.
-     * <br>
-     * This is a special value, which is not persisted. It should only be set if
-     * a placed sign is manipulated during the BlockPlaceEvent. Behaviour
-     * outside of this event is undefined.
      *
      * @return if this sign is currently editable
-     * @deprecated use {@link #isWaxed()}
+     * @deprecated use {@link #isWaxed()} instead
      */
-    @Deprecated // Paper
+    @Deprecated
     public boolean isEditable();
 
     /**
      * Marks whether this sign can be edited by players.
-     * <br>
-     * This is a special value, which is not persisted. It should only be set if
-     * a placed sign is manipulated during the BlockPlaceEvent. Behaviour
-     * outside of this event is undefined.
      *
      * @param editable if this sign is currently editable
-     * @deprecated use {@link #setWaxed(boolean)}
+     * @deprecated use {@link #setWaxed(boolean)} instead
      */
-    @Deprecated // Paper
+    @Deprecated
     public void setEditable(boolean editable);
 
-    // Paper start
     /**
-     * Gets whether the sign has been waxed and therefore prevents editing.
+     * Gets whether or not this sign has been waxed. If a sign has been waxed, it
+     * cannot be edited by a player.
      *
-     * @return true if waxed
+     * @return if this sign is waxed
      */
-    boolean isWaxed();
+    public boolean isWaxed();
 
     /**
-     * Sets whether the sign is waxed.
+     * Sets whether or not this sign has been waxed. If a sign has been waxed, it
+     * cannot be edited by a player.
      *
-     * @param waxed true to wax and therefore prevent editing
+     * @param waxed if this sign is waxed
      */
-    void setWaxed(boolean waxed);
-    // Paper end
+    public void setWaxed(boolean waxed);
 
     /**
      * Gets whether this sign has glowing text. Only affects the {@link Side#FRONT}.
Index: src/main/java/org/bukkit/block/Furnace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/block/Furnace.java b/src/main/java/org/bukkit/block/Furnace.java
--- a/src/main/java/org/bukkit/block/Furnace.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/block/Furnace.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.block;
 
+import java.util.Map;
 import org.bukkit.inventory.CookingRecipe;
 import org.bukkit.inventory.FurnaceInventory;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Map;
-
 /**
  * Represents a captured state of a furnace.
  */
Index: src/main/java/org/bukkit/boss/DragonBattle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/boss/DragonBattle.java b/src/main/java/org/bukkit/boss/DragonBattle.java
--- a/src/main/java/org/bukkit/boss/DragonBattle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/boss/DragonBattle.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.boss;
 
+import java.util.Collection;
 import org.bukkit.Location;
 import org.bukkit.entity.EnderCrystal;
 import org.bukkit.entity.EnderDragon;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-
 /**
  * Represents a dragon battle state for a world with an end environment.
  */
@@ -135,4 +134,4 @@
          */
         NONE;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/boss/BossBar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/boss/BossBar.java b/src/main/java/org/bukkit/boss/BossBar.java
--- a/src/main/java/org/bukkit/boss/BossBar.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/boss/BossBar.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.boss;
 
+import java.util.List;
 import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 public interface BossBar {
 
     /**
Index: src/main/java/org/bukkit/UndefinedNullability.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/UndefinedNullability.java b/src/main/java/org/bukkit/UndefinedNullability.java
--- a/src/main/java/org/bukkit/UndefinedNullability.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/UndefinedNullability.java	(date 1703956060000)
@@ -1,7 +1,5 @@
 package org.bukkit;
 
-import org.jetbrains.annotations.ApiStatus;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
@@ -15,7 +13,6 @@
  * suggests a bad API design.
  */
 @Retention(RetentionPolicy.CLASS)
-@ApiStatus.Internal
 @Deprecated
 public @interface UndefinedNullability {
 
Index: src/main/java/org/bukkit/Warning.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Warning.java b/src/main/java/org/bukkit/Warning.java
--- a/src/main/java/org/bukkit/Warning.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Warning.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import java.util.Map;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * This designates the warning state for a specific item.
Index: src/main/java/org/bukkit/Location.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
--- a/src/main/java/org/bukkit/Location.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Location.java	(date 1703956060000)
@@ -1,18 +1,22 @@
 package org.bukkit;
 
 import com.google.common.base.Preconditions;
+import java.lang.ref.Reference;
+import java.lang.ref.WeakReference;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.Predicate;
 import org.bukkit.block.Block;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.lang.ref.Reference;
-import java.lang.ref.WeakReference;
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Represents a 3-dimensional position in a world.
  * <br>
@@ -21,7 +25,7 @@
  * magnitude than 360 are valid, but may be normalized to any other equivalent
  * representation by the implementation.
  */
-public class Location implements Cloneable, ConfigurationSerializable, io.papermc.paper.math.FinePosition { // Paper
+public class Location implements Cloneable, ConfigurationSerializable {
     private Reference<World> world;
     private double x;
     private double y;
@@ -587,27 +591,10 @@
         return "Location{" + "world=" + world + ",x=" + x + ",y=" + y + ",z=" + z + ",pitch=" + pitch + ",yaw=" + yaw + '}';
     }
 
-    // Paper - add Position
-    @Override
-    public double x() {
-        return this.getX();
-    }
-
-    @Override
-    public double y() {
-        return this.getY();
+    public String asString() {
+        World world = (this.world == null) ? null : this.world.get();
+        return "world=" + world.getName() + ",x=" + x + ",y=" + y + ",z=" + z + ",pitch=" + pitch + ",yaw=" + yaw;
     }
-
-    @Override
-    public double z() {
-        return this.getZ();
-    }
-
-    @Override
-    public @NotNull Location toLocation(@NotNull World world) {
-        return new Location(world, this.x(), this.y(), this.z(), this.getYaw(), this.getPitch());
-    }
-    // Paper end
 
     /**
      * Constructs a new {@link Vector} based on this Location
@@ -729,4 +716,248 @@
         }
         return pitch;
     }
+
+    // Paper start
+    /**
+     * Returns a list of entities within a bounding box centered around a Location.
+     *
+     * Some implementations may impose artificial restrictions on the size of the search bounding box.
+     *
+     * @param x 1/2 the size of the box along x axis
+     * @param y 1/2 the size of the box along y axis
+     * @param z 1/2 the size of the box along z axis
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<Entity> getNearbyEntities(double x, double y, double z) {
+        World world = this.getWorld();
+        if (world == null) {
+            throw new IllegalArgumentException("Location has no world");
+        }
+        return world.getNearbyEntities(this, x, y, z);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param radius X Radius
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<LivingEntity> getNearbyLivingEntities(double radius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, radius, radius, radius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<LivingEntity> getNearbyLivingEntities(double xzRadius, double yRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xzRadius, yRadius, xzRadius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z radius
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<LivingEntity> getNearbyLivingEntities(double xRadius, double yRadius, double zRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xRadius, yRadius, zRadius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param radius Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<LivingEntity> getNearbyLivingEntities(double radius, @Nullable Predicate<LivingEntity> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, radius, radius, radius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<LivingEntity> getNearbyLivingEntities(double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xzRadius, yRadius, xzRadius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<LivingEntity> getNearbyLivingEntities(double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xRadius, yRadius, zRadius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param radius X/Y/Z Radius
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<Player> getNearbyPlayers(double radius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, radius, radius, radius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<Player> getNearbyPlayers(double xzRadius, double yRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xzRadius, yRadius, xzRadius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<Player> getNearbyPlayers(double xRadius, double yRadius, double zRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xRadius, yRadius, zRadius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param radius X/Y/Z Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<Player> getNearbyPlayers(double radius, @Nullable Predicate<Player> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, radius, radius, radius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<Player> getNearbyPlayers(double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xzRadius, yRadius, xzRadius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public Collection<Player> getNearbyPlayers(double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xRadius, yRadius, zRadius, predicate);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param radius X/Y/Z radius to search within
+     * @param <T> the entity type
+     * @return the collection of entities of type clazz near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double radius) {
+        return getNearbyEntitiesByType(clazz, radius, radius, radius, null);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)
+     * @param clazz Type to filter by
+     * @param xzRadius X/Z radius to search within
+     * @param yRadius Y radius to search within
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xzRadius, double yRadius) {
+        return getNearbyEntitiesByType(clazz, xzRadius, yRadius, xzRadius, null);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xRadius, double yRadius, double zRadius) {
+        return getNearbyEntitiesByType(clazz, xRadius, yRadius, zRadius, null);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param radius X/Y/Z radius to search within
+     * @param predicate a predicate used to filter results
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double radius, @Nullable Predicate<T> predicate) {
+        return getNearbyEntitiesByType(clazz, radius, radius, radius, predicate);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)
+     * @param clazz Type to filter by
+     * @param xzRadius X/Z radius to search within
+     * @param yRadius Y radius to search within
+     * @param predicate a predicate used to filter results
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
+        return getNearbyEntitiesByType(clazz, xzRadius, yRadius, xzRadius, predicate);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @param predicate a predicate used to filter results
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
+        World world = this.getWorld();
+        if (world == null) {
+            throw new IllegalArgumentException("Location has no world");
+        }
+        return world.getNearbyEntitiesByType(clazz, this, xRadius, yRadius, zRadius, predicate);
+    }
+    // Paper end
 }
Index: src/main/java/org/bukkit/EntityEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/EntityEffect.java b/src/main/java/org/bukkit/EntityEffect.java
--- a/src/main/java/org/bukkit/EntityEffect.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/EntityEffect.java	(date 1703956060000)
@@ -1,25 +1,37 @@
 package org.bukkit;
 
+import com.google.common.base.Preconditions;
 import org.bukkit.entity.Ageable;
 import org.bukkit.entity.ArmorStand;
 import org.bukkit.entity.Cat;
 import org.bukkit.entity.Dolphin;
+import org.bukkit.entity.Egg;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.EvokerFangs;
 import org.bukkit.entity.Firework;
 import org.bukkit.entity.Fox;
+import org.bukkit.entity.Goat;
 import org.bukkit.entity.Guardian;
+import org.bukkit.entity.Hoglin;
 import org.bukkit.entity.IronGolem;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.Rabbit;
 import org.bukkit.entity.Ravager;
+import org.bukkit.entity.Sheep;
+import org.bukkit.entity.Sniffer;
+import org.bukkit.entity.Snowball;
 import org.bukkit.entity.Squid;
 import org.bukkit.entity.Tameable;
 import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Villager;
+import org.bukkit.entity.Warden;
 import org.bukkit.entity.Witch;
 import org.bukkit.entity.Wolf;
+import org.bukkit.entity.Zoglin;
 import org.bukkit.entity.ZombieVillager;
+import org.bukkit.entity.minecart.ExplosiveMinecart;
+import org.bukkit.entity.minecart.SpawnerMinecart;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -36,6 +48,11 @@
      */
     RABBIT_JUMP(1, Rabbit.class),
     /**
+     * Resets a spawner minecart's delay to 200. Does not effect actual spawning
+     * delay, only the speed at which the entity in the spawner spins
+     */
+    RESET_SPAWNER_MINECART_DELAY(1, SpawnerMinecart.class),
+    /**
      * When mobs get hurt.
      *
      * @deprecated Use {@link LivingEntity#playHurtAnimation(float)}
@@ -47,36 +64,87 @@
      * <p>
      * <b>This will cause client-glitches!</b>
      *
-     * @deprecated although this effect may trigger other events on non-living
-     * entities, it's only supported usage is on living ones.
+     * @deprecated split into individual effects
+     * @see #EGG_BREAK
+     * @see #SNOWBALL_BREAK
+     * @see #ENTITY_DEATH
      */
     @Deprecated
     DEATH(3, Entity.class),
-    // PAIL - SPIGOT-3641 duplicate
-    // GOLEM_ATTACK(4, IronGolem.class),
+    /**
+     * Spawns the egg breaking particles
+     */
+    EGG_BREAK(3, Egg.class),
+    /**
+     * Spawns the snowball breaking particles
+     */
+    SNOWBALL_BREAK(3, Snowball.class),
+    /**
+     * Plays the entity death sound and animation
+     * <p>
+     * <b>This will cause client-glitches!</b>
+     */
+    ENTITY_DEATH(3, LivingEntity.class),
+    /**
+     * Plays the fang attack animation
+     */
+    FANG_ATTACK(4, EvokerFangs.class),
+    /**
+     * Plays the hoglin attack animation
+     */
+    HOGLIN_ATTACK(4, Hoglin.class),
+    /**
+     * Plays the iron golem attack animation
+     */
+    IRON_GOLEN_ATTACK(4, IronGolem.class),
+    /**
+     * Plays the ravager attack animation
+     */
+    RAVAGER_ATTACK(4, Ravager.class),
+    /**
+     * Plays the warden attack animation
+     */
+    WARDEN_ATTACK(4, Warden.class),
+    /**
+     * Plays the zoglin attack animation
+     */
+    ZOGLIN_ATTACK(4, Zoglin.class),
     // 5 - unused
     /**
-     * The smoke when taming a wolf fails.
+     * The smoke when taming an entity fails.
      */
     WOLF_SMOKE(6, Tameable.class),
     /**
-     * The hearts when taming a wolf succeeds.
+     * The hearts when taming an entity succeeds.
      */
-    WOLF_HEARTS(7, Wolf.class),
+    WOLF_HEARTS(7, Tameable.class),
     /**
      * When a wolf shakes (after being wet).
+     *
+     * @see EntityEffect#WOLF_SHAKE_STOP
      */
     WOLF_SHAKE(8, Wolf.class),
     // 9 - unused
     /**
      * When an entity eats a LONG_GRASS block.
      *
-     * @deprecated although this effect may trigger other events on non-living
-     * entities, it's only supported usage is on living ones.
+     * @deprecated split into individual effects
+     * @see #SHEEP_EAT_GRASS
+     * @see #TNT_MINECART_IGNITE
      */
     @Deprecated
     SHEEP_EAT(10, Entity.class),
     /**
+     * Plays the sheep eating grass animation
+     */
+    SHEEP_EAT_GRASS(10, Sheep.class),
+    /**
+     * Causes the TNT minecart to ignite, does not play the ignition sound
+     * <p>
+     * <b>This will cause client-glitches!</b>
+     */
+    TNT_MINECART_IGNITE(10, ExplosiveMinecart.class),
+    /**
      * When an Iron Golem gives a rose.
      */
     IRON_GOLEM_ROSE(11, IronGolem.class),
@@ -213,7 +281,57 @@
     /**
      * Entity breaks item in boot slot
      */
-    BREAK_EQUIPMENT_BOOTS(52, LivingEntity.class);
+    BREAK_EQUIPMENT_BOOTS(52, LivingEntity.class),
+    /**
+     * Spawns honey block slide particles at the entity's feet
+     */
+    HONEY_BLOCK_SLIDE_PARTICLES(53, Entity.class),
+    /**
+     * Spawns honey block fall particles at the entity's feet
+     */
+    HONEY_BLOCK_FALL_PARTICLES(54, LivingEntity.class),
+    /**
+     * Entity swaps the items in their hand and offhand
+     */
+    SWAP_HAND_ITEMS(55, LivingEntity.class),
+    /**
+     * Stops a wolf that is currently shaking
+     *
+     * @see EntityEffect#WOLF_SHAKE
+     */
+    WOLF_SHAKE_STOP(56, Wolf.class),
+    // 57 - unused
+    /**
+     * Goat lowers its head for ramming
+     *
+     * @see #GOAT_RAISE_HEAD
+     */
+    GOAT_LOWER_HEAD(58, Goat.class),
+    /**
+     * Goat raises its head
+     *
+     * @see #GOAT_LOWER_HEAD
+     */
+    GOAT_RAISE_HEAD(59, Goat.class),
+    /**
+     * Spawns death smoke particles
+     */
+    SPAWN_DEATH_SMOKE(60, LivingEntity.class),
+    /**
+     * Warden shakes its tendrils
+     */
+    WARDEN_TENDRIL_SHAKE(61, Warden.class),
+    /**
+     * Warden performs sonic attack animation <br>
+     * Does not play the sound or fire the beam
+     */
+    WARDEN_SONIC_ATTACK(62, Warden.class),
+    /**
+     * Plays sniffer digging sound <br>
+     * Sniffer must have a target and be in {@link Sniffer.State#SEARCHING} or
+     * {@link Sniffer.State#DIGGING}
+     */
+    SNIFFER_DIG(63, Sniffer.class);
 
     private final byte data;
     private final Class<? extends Entity> applicable;
@@ -224,7 +342,7 @@
     }
 
     /**
-     * Gets the data value of this EntityEffect
+     * Gets the data value of this EntityEffect, may not be unique.
      *
      * @return The data value
      * @deprecated Magic value
@@ -243,4 +361,28 @@
     public Class<? extends Entity> getApplicable() {
         return applicable;
     }
+
+    /**
+     * Checks if this effect is applicable to the given entity.
+     *
+     * @param entity the entity to check
+     * @return true if applicable
+     */
+    public boolean isApplicableTo(@NotNull Entity entity) {
+        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+
+        return isApplicableTo(entity.getClass());
+    }
+
+    /**
+     * Checks if this effect is applicable to the given entity class.
+     *
+     * @param clazz the entity class to check
+     * @return true if applicable
+     */
+    public boolean isApplicableTo(@NotNull Class<? extends Entity> clazz) {
+        Preconditions.checkArgument(clazz != null, "Class cannot be null");
+
+        return applicable.isAssignableFrom(clazz);
+    }
 }
Index: src/main/java/org/bukkit/ban/ProfileBanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/ban/ProfileBanList.java b/src/main/java/org/bukkit/ban/ProfileBanList.java
--- a/src/main/java/org/bukkit/ban/ProfileBanList.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/ban/ProfileBanList.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.ban;
 
+import java.util.Date;
 import org.bukkit.BanEntry;
 import org.bukkit.BanList;
 import org.bukkit.profile.PlayerProfile;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Date;
-
 /**
  * A {@link BanList} targeting player profile bans.
  */
@@ -28,4 +27,4 @@
     @Nullable
     public BanEntry<PlayerProfile> addBan(@NotNull PlayerProfile target, @Nullable String reason, @Nullable Date expires, @Nullable String source);
 
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/ban/IpBanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/ban/IpBanList.java b/src/main/java/org/bukkit/ban/IpBanList.java
--- a/src/main/java/org/bukkit/ban/IpBanList.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/ban/IpBanList.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.ban;
 
-import org.bukkit.BanList;
-
 import java.net.InetAddress;
+import org.bukkit.BanList;
 
 /**
  * A {@link BanList} targeting IP bans.
  */
 public interface IpBanList extends BanList<InetAddress> {
 
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/ban/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/ban/package-info.java b/src/main/java/org/bukkit/ban/package-info.java
--- a/src/main/java/org/bukkit/ban/package-info.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/ban/package-info.java	(date 1703956060000)
@@ -1,4 +1,4 @@
 /**
  * Classes relevant to bans.
  */
-package org.bukkit.ban;
\ No newline at end of file
+package org.bukkit.ban;
Index: src/main/java/org/bukkit/Translatable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Translatable.java b/src/main/java/org/bukkit/Translatable.java
--- a/src/main/java/org/bukkit/Translatable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Translatable.java	(date 1703956060000)
@@ -15,4 +15,4 @@
      */
     @NotNull
     String getTranslationKey();
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
--- a/src/main/java/org/bukkit/Server.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Server.java	(date 1703956060000)
@@ -1,6 +1,19 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableList;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.Serializable;
+import java.net.InetAddress;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.function.Consumer;
+import java.util.logging.Logger;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -22,6 +35,7 @@
 import org.bukkit.help.HelpMap;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.ItemCraftResult;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Merchant;
@@ -45,20 +59,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.Serializable;
-import java.net.InetAddress;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Consumer;
-import java.util.logging.Logger;
-
 /**
  * Represents a server implementation.
  */
@@ -239,6 +239,14 @@
     @NotNull
     public DataPackManager getDataPackManager();
 
+    /**
+     * Get the ServerTick Manager.
+     *
+     * @return the manager
+     */
+    @NotNull
+    public ServerTickManager getServerTickManager();
+
     /**
      * Gets the server resource pack uri, or empty string if not specified.
      *
@@ -836,6 +844,72 @@
     @NotNull
     public ItemStack craftItem(@NotNull ItemStack[] craftingMatrix, @NotNull World world, @NotNull Player player);
 
+    /**
+     * Get the crafted item using the list of {@link ItemStack} provided.
+     *
+     * <p>The list is formatted as a crafting matrix where the index follow
+     * the pattern below:</p>
+     *
+     * <pre>
+     * [ 0 1 2 ]
+     * [ 3 4 5 ]
+     * [ 6 7 8 ]
+     * </pre>
+     *
+     * @param craftingMatrix list of items to be crafted from.
+     *                       Must not contain more than 9 items.
+     * @param world The world the crafting takes place in.
+     * @return the {@link ItemStack} resulting from the given crafting matrix, if no recipe is found
+     * an ItemStack of {@link Material#AIR} is returned.
+     */
+    @NotNull
+    public ItemStack craftItem(@NotNull ItemStack[] craftingMatrix, @NotNull World world);
+    /**
+     * Get the crafted item using the list of {@link ItemStack} provided.
+     *
+     * <p>The list is formatted as a crafting matrix where the index follow
+     * the pattern below:</p>
+     *
+     * <pre>
+     * [ 0 1 2 ]
+     * [ 3 4 5 ]
+     * [ 6 7 8 ]
+     * </pre>
+     *
+     * <p>The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting
+     * events.</p>
+     *
+     * <p>Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}
+     * initiating the crafting event.</p>
+     *
+     * @param craftingMatrix list of items to be crafted from.
+     *                       Must not contain more than 9 items.
+     * @param world The world the crafting takes place in.
+     * @param player The player to imitate the crafting event on.
+     * @return resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items.
+     */
+    @NotNull
+    public ItemCraftResult craftItemResult(@NotNull ItemStack[] craftingMatrix, @NotNull World world, @NotNull Player player);
+    /**
+     * Get the crafted item using the list of {@link ItemStack} provided.
+     *
+     * <p>The list is formatted as a crafting matrix where the index follow
+     * the pattern below:</p>
+     *
+     * <pre>
+     * [ 0 1 2 ]
+     * [ 3 4 5 ]
+     * [ 6 7 8 ]
+     * </pre>
+     *
+     * @param craftingMatrix list of items to be crafted from.
+     *                       Must not contain more than 9 items.
+     * @param world The world the crafting takes place in.
+     * @return resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items.
+     */
+    @NotNull
+    public ItemCraftResult craftItemResult(@NotNull ItemStack[] craftingMatrix, @NotNull World world);
+
     /**
      * Get an iterator through the list of crafting recipes.
      *
@@ -1075,7 +1149,7 @@
      * @return a ban list of the specified type
      */
     @NotNull
-    public  <T extends BanList<?>> T getBanList(@NotNull BanList.Type type);
+    public <T extends BanList<?>> T getBanList(@NotNull BanList.Type type);
 
     /**
      * Gets a set containing all player operators.
@@ -1204,6 +1278,22 @@
     @NotNull
     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;
 
+    // Paper start
+    /**
+     * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+     * specified size and title.
+     *
+     * @param owner the holder of the inventory, or null to indicate no holder
+     * @param size a multiple of 9 as the size of inventory to create
+     * @param title the title of the inventory, displayed when inventory is
+     *     viewed
+     * @return a new inventory
+     * @throws IllegalArgumentException if the size is not a multiple of 9
+     */
+    @NotNull
+    Inventory createInventory(@Nullable InventoryHolder owner, int size, net.kyori.adventure.text.@NotNull Component title) throws IllegalArgumentException;
+    // Paper end
+
     /**
      * Creates an empty inventory of type {@link InventoryType#CHEST} with the
      * specified size and title.
@@ -1590,7 +1680,7 @@
      * @return new data instance
      */
     @NotNull
-    public BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer);
+    public BlockData createBlockData(@NotNull Material material, @Nullable Consumer<? super BlockData> consumer);
 
     /**
      * Creates a new {@link BlockData} instance with material and properties
@@ -1728,6 +1818,26 @@
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
+        // Paper start
+        @NotNull
+        public org.bukkit.configuration.file.YamlConfiguration getBukkitConfig()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        @NotNull
+        public org.bukkit.configuration.file.YamlConfiguration getSpigotConfig()
+        {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @NotNull
+        public org.bukkit.configuration.file.YamlConfiguration getPaperConfig()
+        {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+        // Paper end
+
         /**
          * Sends the component to the player
          *
@@ -1757,5 +1867,4 @@
     @NotNull
     Spigot spigot();
     // Spigot end
-
 }
Index: src/main/java/org/bukkit/TreeSpecies.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/TreeSpecies.java b/src/main/java/org/bukkit/TreeSpecies.java
--- a/src/main/java/org/bukkit/TreeSpecies.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/TreeSpecies.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents the different species of trees regardless of size.
Index: src/main/java/org/bukkit/Registry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
--- a/src/main/java/org/bukkit/Registry.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Registry.java	(date 1703956060000)
@@ -3,7 +3,6 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableMap;
-import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Objects;
@@ -13,8 +12,10 @@
 import org.bukkit.advancement.Advancement;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.block.Biome;
+import org.bukkit.block.banner.PatternType;
 import org.bukkit.boss.KeyedBossBar;
 import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.Cat;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Frog;
 import org.bukkit.entity.Villager;
@@ -24,6 +25,8 @@
 import org.bukkit.inventory.meta.trim.TrimMaterial;
 import org.bukkit.inventory.meta.trim.TrimPattern;
 import org.bukkit.loot.LootTables;
+import org.bukkit.potion.PotionEffectType;
+import org.bukkit.potion.PotionType;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -75,6 +78,12 @@
      */
     Registry<Attribute> ATTRIBUTE = new SimpleRegistry<>(Attribute.class);
     /**
+     * Server banner patterns.
+     *
+     * @see PatternType
+     */
+    Registry<PatternType> BANNER_PATTERN = new SimpleRegistry<>(PatternType.class);
+    /**
      * Server biomes.
      *
      * @see Biome
@@ -107,30 +116,17 @@
         }
     };
     /**
+     * Server cat types.
+     *
+     * @see Cat.Type
+     */
+    Registry<Cat.Type> CAT_VARIANT = new SimpleRegistry<>(Cat.Type.class);
+    /**
      * Server enchantments.
      *
-     * @see Enchantment#getByKey(org.bukkit.NamespacedKey)
+     * @see Enchantment
      */
-    Registry<Enchantment> ENCHANTMENT = new Registry<Enchantment>() {
-
-        @Nullable
-        @Override
-        public Enchantment get(@NotNull NamespacedKey key) {
-            return Enchantment.getByKey(key);
-        }
-
-        @NotNull
-        @Override
-        public Stream<Enchantment> stream() {
-            return StreamSupport.stream(spliterator(), false);
-        }
-
-        @NotNull
-        @Override
-        public Iterator<Enchantment> iterator() {
-            return Arrays.asList(Enchantment.values()).iterator();
-        }
-    };
+    Registry<Enchantment> ENCHANTMENT = Objects.requireNonNull(Bukkit.getRegistry(Enchantment.class), "No registry present for Enchantment. This is a bug.");
     /**
      * Server entity types.
      *
@@ -156,6 +152,24 @@
      */
     Registry<Material> MATERIAL = new SimpleRegistry<>(Material.class, (mat) -> !mat.isLegacy());
     /**
+     * Server mob effects.
+     *
+     * @see PotionEffectType
+     */
+    Registry<PotionEffectType> EFFECT = Objects.requireNonNull(Bukkit.getRegistry(PotionEffectType.class), "No registry present for PotionEffectType. This is a bug.");
+    /**
+     * Server particles.
+     *
+     * @see Particle
+     */
+    Registry<Particle> PARTICLE_TYPE = new SimpleRegistry<>(Particle.class, (par) -> par.register);
+    /**
+     * Server potions.
+     *
+     * @see PotionType
+     */
+    Registry<PotionType> POTION = new SimpleRegistry<>(PotionType.class);
+    /**
      * Server statistics.
      *
      * @see Statistic
@@ -285,26 +299,22 @@
 
     static final class SimpleRegistry<T extends Enum<T> & Keyed> implements Registry<T> {
 
-        private Map<NamespacedKey, T> map;// Banner - remove final
-        public Runnable reloader; // Banner
+        private final Map<NamespacedKey, T> map;
 
         protected SimpleRegistry(@NotNull Class<T> type) {
             this(type, Predicates.<T>alwaysTrue());
         }
 
         protected SimpleRegistry(@NotNull Class<T> type, @NotNull Predicate<T> predicate) {
-            reloader = () -> { // Banner
-                ImmutableMap.Builder<NamespacedKey, T> builder = ImmutableMap.builder();
+            ImmutableMap.Builder<NamespacedKey, T> builder = ImmutableMap.builder();
 
-                for (T entry : type.getEnumConstants()) {
-                    if (predicate.test(entry)) {
-                        builder.put(entry.getKey(), entry);
-                    }
-                }
+            for (T entry : type.getEnumConstants()) {
+                if (predicate.test(entry)) {
+                    builder.put(entry.getKey(), entry);
+                }
+            }
 
-                map = builder.build();
-            }; // Banner
-            reloader.run(); // Banner
+            map = builder.build();
         }
 
         @Nullable
@@ -325,4 +335,4 @@
             return map.values().iterator();
         }
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/GrassSpecies.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/GrassSpecies.java b/src/main/java/org/bukkit/GrassSpecies.java
--- a/src/main/java/org/bukkit/GrassSpecies.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/GrassSpecies.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents the different types of grass.
Index: src/main/java/org/bukkit/Particle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Particle.java b/src/main/java/org/bukkit/Particle.java
--- a/src/main/java/org/bukkit/Particle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Particle.java	(date 1703956060000)
@@ -6,151 +6,183 @@
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 
-public enum Particle {
-    EXPLOSION_NORMAL,
-    EXPLOSION_LARGE,
-    EXPLOSION_HUGE,
-    FIREWORKS_SPARK,
-    WATER_BUBBLE,
-    WATER_SPLASH,
-    WATER_WAKE,
-    SUSPENDED,
-    SUSPENDED_DEPTH,
-    CRIT,
-    CRIT_MAGIC,
-    SMOKE_NORMAL,
-    SMOKE_LARGE,
-    SPELL,
-    SPELL_INSTANT,
-    SPELL_MOB,
-    SPELL_MOB_AMBIENT,
-    SPELL_WITCH,
-    DRIP_WATER,
-    DRIP_LAVA,
-    VILLAGER_ANGRY,
-    VILLAGER_HAPPY,
-    TOWN_AURA,
-    NOTE,
-    PORTAL,
-    ENCHANTMENT_TABLE,
-    FLAME,
-    LAVA,
-    CLOUD,
+public enum Particle implements Keyed {
+    EXPLOSION_NORMAL("poof"),
+    EXPLOSION_LARGE("explosion"),
+    EXPLOSION_HUGE("explosion_emitter"),
+    FIREWORKS_SPARK("firework"),
+    WATER_BUBBLE("bubble"),
+    WATER_SPLASH("splash"),
+    WATER_WAKE("fishing"),
+    SUSPENDED("underwater"),
+    SUSPENDED_DEPTH("underwater", false),
+    CRIT("crit"),
+    CRIT_MAGIC("enchanted_hit"),
+    SMOKE_NORMAL("smoke"),
+    SMOKE_LARGE("large_smoke"),
+    SPELL("effect"),
+    SPELL_INSTANT("instant_effect"),
+    SPELL_MOB("entity_effect"),
+    SPELL_MOB_AMBIENT("ambient_entity_effect"),
+    SPELL_WITCH("witch"),
+    DRIP_WATER("dripping_water"),
+    DRIP_LAVA("dripping_lava"),
+    VILLAGER_ANGRY("angry_villager"),
+    VILLAGER_HAPPY("happy_villager"),
+    TOWN_AURA("mycelium"),
+    NOTE("note"),
+    PORTAL("portal"),
+    ENCHANTMENT_TABLE("enchant"),
+    FLAME("flame"),
+    LAVA("lava"),
+    CLOUD("cloud"),
     /**
      * Uses {@link Particle.DustOptions} as DataType
      */
-    REDSTONE(DustOptions.class),
-    SNOWBALL,
-    SNOW_SHOVEL,
-    SLIME,
-    HEART,
+    REDSTONE("dust", DustOptions.class),
+    SNOWBALL("item_snowball"),
+    SNOW_SHOVEL("item_snowball", false),
+    SLIME("item_slime"),
+    HEART("heart"),
     /**
      * Uses {@link ItemStack} as DataType
      */
-    ITEM_CRACK(ItemStack.class),
+    ITEM_CRACK("item", ItemStack.class),
     /**
      * Uses {@link BlockData} as DataType
      */
-    BLOCK_CRACK(BlockData.class),
+    BLOCK_CRACK("block", BlockData.class),
     /**
      * Uses {@link BlockData} as DataType
      */
-    BLOCK_DUST(BlockData.class),
-    WATER_DROP,
-    MOB_APPEARANCE,
-    DRAGON_BREATH,
-    END_ROD,
-    DAMAGE_INDICATOR,
-    SWEEP_ATTACK,
+    BLOCK_DUST("block", BlockData.class, false),
+    WATER_DROP("rain"),
+    MOB_APPEARANCE("elder_guardian"),
+    DRAGON_BREATH("dragon_breath"),
+    END_ROD("end_rod"),
+    DAMAGE_INDICATOR("damage_indicator"),
+    SWEEP_ATTACK("sweep_attack"),
     /**
      * Uses {@link BlockData} as DataType
      */
-    FALLING_DUST(BlockData.class),
-    TOTEM,
-    SPIT,
-    SQUID_INK,
-    BUBBLE_POP,
-    CURRENT_DOWN,
-    BUBBLE_COLUMN_UP,
-    NAUTILUS,
-    DOLPHIN,
-    SNEEZE,
-    CAMPFIRE_COSY_SMOKE,
-    CAMPFIRE_SIGNAL_SMOKE,
-    COMPOSTER,
-    FLASH,
-    FALLING_LAVA,
-    LANDING_LAVA,
-    FALLING_WATER,
-    DRIPPING_HONEY,
-    FALLING_HONEY,
-    LANDING_HONEY,
-    FALLING_NECTAR,
-    SOUL_FIRE_FLAME,
-    ASH,
-    CRIMSON_SPORE,
-    WARPED_SPORE,
-    SOUL,
-    DRIPPING_OBSIDIAN_TEAR,
-    FALLING_OBSIDIAN_TEAR,
-    LANDING_OBSIDIAN_TEAR,
-    REVERSE_PORTAL,
-    WHITE_ASH,
+    FALLING_DUST("falling_dust", BlockData.class),
+    TOTEM("totem_of_undying"),
+    SPIT("spit"),
+    SQUID_INK("squid_ink"),
+    BUBBLE_POP("bubble_pop"),
+    CURRENT_DOWN("current_down"),
+    BUBBLE_COLUMN_UP("bubble_column_up"),
+    NAUTILUS("nautilus"),
+    DOLPHIN("dolphin"),
+    SNEEZE("sneeze"),
+    CAMPFIRE_COSY_SMOKE("campfire_cosy_smoke"),
+    CAMPFIRE_SIGNAL_SMOKE("campfire_signal_smoke"),
+    COMPOSTER("composter"),
+    FLASH("flash"),
+    FALLING_LAVA("falling_lava"),
+    LANDING_LAVA("landing_lava"),
+    FALLING_WATER("falling_water"),
+    DRIPPING_HONEY("dripping_honey"),
+    FALLING_HONEY("falling_honey"),
+    LANDING_HONEY("landing_honey"),
+    FALLING_NECTAR("falling_nectar"),
+    SOUL_FIRE_FLAME("soul_fire_flame"),
+    ASH("ash"),
+    CRIMSON_SPORE("crimson_spore"),
+    WARPED_SPORE("warped_spore"),
+    SOUL("soul"),
+    DRIPPING_OBSIDIAN_TEAR("dripping_obsidian_tear"),
+    FALLING_OBSIDIAN_TEAR("falling_obsidian_tear"),
+    LANDING_OBSIDIAN_TEAR("landing_obsidian_tear"),
+    REVERSE_PORTAL("reverse_portal"),
+    WHITE_ASH("white_ash"),
     /**
      * Uses {@link DustTransition} as DataType
      */
-    DUST_COLOR_TRANSITION(DustTransition.class),
+    DUST_COLOR_TRANSITION("dust_color_transition", DustTransition.class),
     /**
      * Uses {@link Vibration} as DataType
      */
-    VIBRATION(Vibration.class),
-    FALLING_SPORE_BLOSSOM,
-    SPORE_BLOSSOM_AIR,
-    SMALL_FLAME,
-    SNOWFLAKE,
-    DRIPPING_DRIPSTONE_LAVA,
-    FALLING_DRIPSTONE_LAVA,
-    DRIPPING_DRIPSTONE_WATER,
-    FALLING_DRIPSTONE_WATER,
-    GLOW_SQUID_INK,
-    GLOW,
-    WAX_ON,
-    WAX_OFF,
-    ELECTRIC_SPARK,
-    SCRAPE,
-    SONIC_BOOM,
-    SCULK_SOUL,
-    SCULK_CHARGE(Float.class),
-    SCULK_CHARGE_POP,
-    SHRIEK(Integer.class),
-    CHERRY_LEAVES,
-    EGG_CRACK,
+    VIBRATION("vibration", Vibration.class),
+    FALLING_SPORE_BLOSSOM("falling_spore_blossom"),
+    SPORE_BLOSSOM_AIR("spore_blossom_air"),
+    SMALL_FLAME("small_flame"),
+    SNOWFLAKE("snowflake"),
+    DRIPPING_DRIPSTONE_LAVA("dripping_dripstone_lava"),
+    FALLING_DRIPSTONE_LAVA("falling_dripstone_lava"),
+    DRIPPING_DRIPSTONE_WATER("dripping_dripstone_water"),
+    FALLING_DRIPSTONE_WATER("falling_dripstone_water"),
+    GLOW_SQUID_INK("glow_squid_ink"),
+    GLOW("glow"),
+    WAX_ON("wax_on"),
+    WAX_OFF("wax_off"),
+    ELECTRIC_SPARK("electric_spark"),
+    SCRAPE("scrape"),
+    SONIC_BOOM("sonic_boom"),
+    SCULK_SOUL("sculk_soul"),
+    /**
+     * Use {@link Float} as DataType
+     */
+    SCULK_CHARGE("sculk_charge", Float.class),
+    SCULK_CHARGE_POP("sculk_charge_pop"),
+    /**
+     * Use {@link Integer} as DataType
+     */
+    SHRIEK("shriek", Integer.class),
+    CHERRY_LEAVES("cherry_leaves"),
+    EGG_CRACK("egg_crack"),
+    DUST_PLUME("dust_plume"),
+    WHITE_SMOKE("white_smoke"),
+    @MinecraftExperimental
+    GUST("gust"),
+    @MinecraftExperimental
+    GUST_EMITTER("gust_emitter"),
+    @MinecraftExperimental
+    GUST_DUST("gust_dust"),
+    @MinecraftExperimental
+    TRIAL_SPAWNER_DETECTION("trial_spawner_detection"),
     /**
      * Uses {@link BlockData} as DataType
      */
-    BLOCK_MARKER(BlockData.class),
+    BLOCK_MARKER("block_marker", BlockData.class),
     // ----- Legacy Separator -----
     /**
      * Uses {@link MaterialData} as DataType
      */
-    LEGACY_BLOCK_CRACK(MaterialData.class),
+    LEGACY_BLOCK_CRACK(null, MaterialData.class, false),
     /**
      * Uses {@link MaterialData} as DataType
      */
-    LEGACY_BLOCK_DUST(MaterialData.class),
+    LEGACY_BLOCK_DUST(null, MaterialData.class, false),
     /**
      * Uses {@link MaterialData} as DataType
      */
-    LEGACY_FALLING_DUST(MaterialData.class);
+    LEGACY_FALLING_DUST(null, MaterialData.class, false);
 
+    public NamespacedKey key;
     private final Class<?> dataType;
+    final boolean register;
+
+    Particle(String key) {
+        this(key, Void.class);
+    }
 
-    Particle() {
-        dataType = Void.class;
+    Particle(String key, boolean register) {
+        this(key, Void.class, register);
     }
 
-    Particle(/*@NotNull*/ Class<?> data) {
+    Particle(String key, /*@NotNull*/ Class<?> data) {
+        this(key, data, true);
+    }
+
+    Particle(String key, /*@NotNull*/ Class<?> data, boolean register) {
+        if (key != null) {
+            this.key = NamespacedKey.minecraft(key);
+        } else {
+            this.key = null;
+        }
         dataType = data;
+        this.register = register;
     }
 
     /**
@@ -162,6 +194,16 @@
         return dataType;
     }
 
+    @NotNull
+    @Override
+    public NamespacedKey getKey() {
+        if (key == null) {
+            throw new UnsupportedOperationException("Cannot get key from legacy particle");
+        }
+
+        return key;
+    }
+
     /**
      * Options which can be applied to redstone dust particles - a particle
      * color and size.
Index: src/main/java/org/bukkit/ChatColor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
--- a/src/main/java/org/bukkit/ChatColor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/ChatColor.java	(date 1703956060000)
@@ -2,13 +2,12 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
+import java.util.Map;
+import java.util.regex.Pattern;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-import java.util.regex.Pattern;
-
 /**
  * All supported color values for chat
  */
@@ -16,91 +15,223 @@
     /**
      * Represents black
      */
-    BLACK('0', 0x00),
+    BLACK('0', 0x00) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.BLACK;
+        }
+    },
     /**
      * Represents dark blue
      */
-    DARK_BLUE('1', 0x1),
+    DARK_BLUE('1', 0x1) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_BLUE;
+        }
+    },
     /**
      * Represents dark green
      */
-    DARK_GREEN('2', 0x2),
+    DARK_GREEN('2', 0x2) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_GREEN;
+        }
+    },
     /**
      * Represents dark blue (aqua)
      */
-    DARK_AQUA('3', 0x3),
+    DARK_AQUA('3', 0x3) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_AQUA;
+        }
+    },
     /**
      * Represents dark red
      */
-    DARK_RED('4', 0x4),
+    DARK_RED('4', 0x4) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_RED;
+        }
+    },
     /**
      * Represents dark purple
      */
-    DARK_PURPLE('5', 0x5),
+    DARK_PURPLE('5', 0x5) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_PURPLE;
+        }
+    },
     /**
      * Represents gold
      */
-    GOLD('6', 0x6),
+    GOLD('6', 0x6) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.GOLD;
+        }
+    },
     /**
      * Represents gray
      */
-    GRAY('7', 0x7),
+    GRAY('7', 0x7) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.GRAY;
+        }
+    },
     /**
      * Represents dark gray
      */
-    DARK_GRAY('8', 0x8),
+    DARK_GRAY('8', 0x8) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_GRAY;
+        }
+    },
     /**
      * Represents blue
      */
-    BLUE('9', 0x9),
+    BLUE('9', 0x9) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.BLUE;
+        }
+    },
     /**
      * Represents green
      */
-    GREEN('a', 0xA),
+    GREEN('a', 0xA) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.GREEN;
+        }
+    },
     /**
      * Represents aqua
      */
-    AQUA('b', 0xB),
+    AQUA('b', 0xB) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.AQUA;
+        }
+    },
     /**
      * Represents red
      */
-    RED('c', 0xC),
+    RED('c', 0xC) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.RED;
+        }
+    },
     /**
      * Represents light purple
      */
-    LIGHT_PURPLE('d', 0xD),
+    LIGHT_PURPLE('d', 0xD) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.LIGHT_PURPLE;
+        }
+    },
     /**
      * Represents yellow
      */
-    YELLOW('e', 0xE),
+    YELLOW('e', 0xE) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.YELLOW;
+        }
+    },
     /**
      * Represents white
      */
-    WHITE('f', 0xF),
+    WHITE('f', 0xF) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.WHITE;
+        }
+    },
     /**
      * Represents magical characters that change around randomly
      */
-    MAGIC('k', 0x10, true),
+    MAGIC('k', 0x10, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.MAGIC;
+        }
+    },
     /**
      * Makes the text bold.
      */
-    BOLD('l', 0x11, true),
+    BOLD('l', 0x11, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.BOLD;
+        }
+    },
     /**
      * Makes a line appear through the text.
      */
-    STRIKETHROUGH('m', 0x12, true),
+    STRIKETHROUGH('m', 0x12, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.STRIKETHROUGH;
+        }
+    },
     /**
      * Makes the text appear underlined.
      */
-    UNDERLINE('n', 0x13, true),
+    UNDERLINE('n', 0x13, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.UNDERLINE;
+        }
+    },
     /**
      * Makes the text italic.
      */
-    ITALIC('o', 0x14, true),
+    ITALIC('o', 0x14, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.ITALIC;
+        }
+    },
     /**
      * Resets all previous chat colors or formats.
      */
-    RESET('r', 0x15);
+    RESET('r', 0x15) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.RESET;
+        }
+    };
 
     /**
      * The special character which prefixes all chat colour codes. Use this if
@@ -127,6 +258,11 @@
         this.toString = new String(new char[] {COLOR_CHAR, code});
     }
 
+    @NotNull
+    public net.md_5.bungee.api.ChatColor asBungee() {
+        return net.md_5.bungee.api.ChatColor.RESET;
+    };
+
     /**
      * Gets the char value associated with this color
      *
Index: src/main/java/org/bukkit/RegionAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/RegionAccessor.java b/src/main/java/org/bukkit/RegionAccessor.java
--- a/src/main/java/org/bukkit/RegionAccessor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/RegionAccessor.java	(date 1703956060000)
@@ -1,5 +1,10 @@
 package org.bukkit;
 
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
 import org.bukkit.block.Biome;
 import org.bukkit.block.BlockState;
 import org.bukkit.block.data.BlockData;
@@ -9,12 +14,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-import java.util.List;
-import java.util.Random;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-
 /**
  * A RegionAccessor gives access to getting, modifying and spawning {@link Biome}, {@link BlockState} and {@link Entity},
  * as well as generating some basic structures.
@@ -183,7 +182,7 @@
      * @param stateConsumer The consumer which should get called for every block which gets changed
      * @return true if the tree was created successfully, otherwise false
      */
-    boolean generateTree(@NotNull Location location, @NotNull Random random, @NotNull TreeType type, @Nullable Consumer<BlockState> stateConsumer);
+    boolean generateTree(@NotNull Location location, @NotNull Random random, @NotNull TreeType type, @Nullable Consumer<? super BlockState> stateConsumer);
 
     /**
      * Creates a tree at the given {@link Location}
@@ -203,7 +202,7 @@
      * @param statePredicate The predicate which should get used to test if a block should be set or not.
      * @return true if the tree was created successfully, otherwise false
      */
-    boolean generateTree(@NotNull Location location, @NotNull Random random, @NotNull TreeType type, @Nullable Predicate<BlockState> statePredicate);
+    boolean generateTree(@NotNull Location location, @NotNull Random random, @NotNull TreeType type, @Nullable Predicate<? super BlockState> statePredicate);
 
     /**
      * Creates a entity at the given {@link Location}
@@ -280,6 +279,24 @@
     @NotNull
     Collection<Entity> getEntitiesByClasses(@NotNull Class<?>... classes);
 
+    /**
+     * Creates an entity of a specific class at the given {@link Location} but
+     * does not spawn it in the world.
+     * <p>
+     * <b>Note:</b> The created entity keeps a reference to the world it was
+     * created in, care should be taken that the entity does not outlive the
+     * world instance as this will lead to memory leaks.
+     *
+     * @param <T> the class of the {@link Entity} to create
+     * @param location the {@link Location} to create the entity at
+     * @param clazz the class of the {@link Entity} to spawn
+     * @return an instance of the created {@link Entity}
+     * @see #addEntity(Entity)
+     * @see Entity#createSnapshot()
+     */
+    @NotNull
+    <T extends Entity> T createEntity(@NotNull Location location, @NotNull Class<T> clazz);
+
     /**
      * Spawn an entity of a specific class at the given {@link Location}
      *
@@ -310,7 +327,7 @@
      *     {@link Entity} requested cannot be spawned
      */
     @NotNull
-    <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<T> function) throws IllegalArgumentException;
+    <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<? super T> function) throws IllegalArgumentException;
 
     /**
      * Creates a new entity at the given {@link Location} with the supplied
@@ -348,7 +365,7 @@
      * @throws IllegalArgumentException if either the world or clazz parameter are null.
      */
     @NotNull
-    public <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, boolean randomizeData, @Nullable Consumer<T> function) throws IllegalArgumentException;
+    public <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, boolean randomizeData, @Nullable Consumer<? super T> function) throws IllegalArgumentException;
 
     /**
      * Gets the highest non-empty (impassable) coordinate at the given
@@ -394,4 +411,15 @@
      * {@link HeightMap}
      */
     public int getHighestBlockYAt(@NotNull Location location, @NotNull HeightMap heightMap);
+
+    /**
+     * Spawns a previously created entity in the world. <br>
+     * The provided entity must not have already been spawned in a world.
+     *
+     * @param <T> the generic type of the entity that is being added.
+     * @param entity the entity to add
+     * @return the entity now in the world
+     */
+    @NotNull
+    public <T extends Entity> T addEntity(@NotNull T entity);
 }
Index: src/main/java/org/bukkit/DyeColor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java
--- a/src/main/java/org/bukkit/DyeColor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/DyeColor.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * All supported color values for dyes and cloth
  */
Index: src/main/java/org/bukkit/Effect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Effect.java b/src/main/java/org/bukkit/Effect.java
--- a/src/main/java/org/bukkit/Effect.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Effect.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
+import java.util.Map;
 import org.bukkit.block.BlockFace;
 import org.bukkit.potion.Potion;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * A list of effects that the server is able to send to players.
  */
@@ -26,73 +25,43 @@
     BOW_FIRE(1002, Type.SOUND),
     /**
      * Sound of a door opening.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_WOODEN_DOOR_OPEN
      */
-    @Deprecated
     DOOR_TOGGLE(1006, Type.SOUND),
     /**
      * Sound of a door opening.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_IRON_DOOR_OPEN
      */
-    @Deprecated
     IRON_DOOR_TOGGLE(1005, Type.SOUND),
     /**
      * Sound of a trapdoor opening.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_WOODEN_TRAPDOOR_OPEN
      */
-    @Deprecated
     TRAPDOOR_TOGGLE(1007, Type.SOUND),
     /**
      * Sound of a door opening.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_IRON_TRAPDOOR_OPEN
      */
-    @Deprecated
     IRON_TRAPDOOR_TOGGLE(1037, Type.SOUND),
     /**
      * Sound of a door opening.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_FENCE_GATE_OPEN
      */
-    @Deprecated
     FENCE_GATE_TOGGLE(1008, Type.SOUND),
     /**
      * Sound of a door closing.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_WOODEN_DOOR_CLOSE
      */
-    @Deprecated
     DOOR_CLOSE(1012, Type.SOUND),
     /**
      * Sound of a door closing.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_IRON_DOOR_CLOSE
      */
-    @Deprecated
     IRON_DOOR_CLOSE(1011, Type.SOUND),
     /**
      * Sound of a trapdoor closing.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_WOODEN_TRAPDOOR_CLOSE
      */
-    @Deprecated
     TRAPDOOR_CLOSE(1013, Type.SOUND),
     /**
      * Sound of a door closing.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_IRON_TRAPDOOR_CLOSE
      */
-    @Deprecated
     IRON_TRAPDOOR_CLOSE(1036, Type.SOUND),
     /**
      * Sound of a door closing.
-     * @deprecated no longer exists
-     * @see Sound#BLOCK_FENCE_GATE_CLOSE
      */
-    @Deprecated
     FENCE_GATE_CLOSE(1014, Type.SOUND),
     /**
      * Sound of fire being extinguished.
Index: src/main/java/org/bukkit/HeightMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/HeightMap.java b/src/main/java/org/bukkit/HeightMap.java
--- a/src/main/java/org/bukkit/HeightMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/HeightMap.java	(date 1703956060000)
@@ -3,7 +3,7 @@
 /**
  * Further information regarding heightmaps.
  *
- * @see <a href="https://minecraft.gamepedia.com/Chunk_format">Gamepedia Chunk
+ * @see <a href="https://minecraft.wiki/w/Chunk_format">Gamepedia Chunk
  * Format</a>
  */
 public enum HeightMap {
Index: src/main/java/org/bukkit/Sound.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
--- a/src/main/java/org/bukkit/Sound.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Sound.java	(date 1703956060000)
@@ -214,19 +214,55 @@
     BLOCK_CONDUIT_ATTACK_TARGET("block.conduit.attack.target"),
     BLOCK_CONDUIT_DEACTIVATE("block.conduit.deactivate"),
     BLOCK_COPPER_BREAK("block.copper.break"),
+    @MinecraftExperimental
+    BLOCK_COPPER_BULB_BREAK("block.copper_bulb.break"),
+    @MinecraftExperimental
+    BLOCK_COPPER_BULB_FALL("block.copper_bulb.fall"),
+    @MinecraftExperimental
+    BLOCK_COPPER_BULB_HIT("block.copper_bulb.hit"),
+    @MinecraftExperimental
+    BLOCK_COPPER_BULB_PLACE("block.copper_bulb.place"),
+    @MinecraftExperimental
+    BLOCK_COPPER_BULB_STEP("block.copper_bulb.step"),
+    @MinecraftExperimental
+    BLOCK_COPPER_BULB_TURN_OFF("block.copper_bulb.turn_off"),
+    @MinecraftExperimental
+    BLOCK_COPPER_BULB_TURN_ON("block.copper_bulb.turn_on"),
+    @MinecraftExperimental
+    BLOCK_COPPER_DOOR_CLOSE("block.copper_door.close"),
+    @MinecraftExperimental
+    BLOCK_COPPER_DOOR_OPEN("block.copper_door.open"),
     BLOCK_COPPER_FALL("block.copper.fall"),
+    @MinecraftExperimental
+    BLOCK_COPPER_GRATE_BREAK("block.copper_grate.break"),
+    @MinecraftExperimental
+    BLOCK_COPPER_GRATE_FALL("block.copper_grate.fall"),
+    @MinecraftExperimental
+    BLOCK_COPPER_GRATE_HIT("block.copper_grate.hit"),
+    @MinecraftExperimental
+    BLOCK_COPPER_GRATE_PLACE("block.copper_grate.place"),
+    @MinecraftExperimental
+    BLOCK_COPPER_GRATE_STEP("block.copper_grate.step"),
     BLOCK_COPPER_HIT("block.copper.hit"),
     BLOCK_COPPER_PLACE("block.copper.place"),
     BLOCK_COPPER_STEP("block.copper.step"),
+    @MinecraftExperimental
+    BLOCK_COPPER_TRAPDOOR_CLOSE("block.copper_trapdoor.close"),
+    @MinecraftExperimental
+    BLOCK_COPPER_TRAPDOOR_OPEN("block.copper_trapdoor.open"),
     BLOCK_CORAL_BLOCK_BREAK("block.coral_block.break"),
     BLOCK_CORAL_BLOCK_FALL("block.coral_block.fall"),
     BLOCK_CORAL_BLOCK_HIT("block.coral_block.hit"),
     BLOCK_CORAL_BLOCK_PLACE("block.coral_block.place"),
     BLOCK_CORAL_BLOCK_STEP("block.coral_block.step"),
+    BLOCK_CRAFTER_CRAFT("block.crafter.craft"),
+    BLOCK_CRAFTER_FAIL("block.crafter.fail"),
     BLOCK_CROP_BREAK("block.crop.break"),
     BLOCK_DECORATED_POT_BREAK("block.decorated_pot.break"),
     BLOCK_DECORATED_POT_FALL("block.decorated_pot.fall"),
     BLOCK_DECORATED_POT_HIT("block.decorated_pot.hit"),
+    BLOCK_DECORATED_POT_INSERT("block.decorated_pot.insert"),
+    BLOCK_DECORATED_POT_INSERT_FAIL("block.decorated_pot.insert_fail"),
     BLOCK_DECORATED_POT_PLACE("block.decorated_pot.place"),
     BLOCK_DECORATED_POT_SHATTER("block.decorated_pot.shatter"),
     BLOCK_DECORATED_POT_STEP("block.decorated_pot.step"),
@@ -317,6 +353,7 @@
     BLOCK_HANGING_SIGN_HIT("block.hanging_sign.hit"),
     BLOCK_HANGING_SIGN_PLACE("block.hanging_sign.place"),
     BLOCK_HANGING_SIGN_STEP("block.hanging_sign.step"),
+    BLOCK_HANGING_SIGN_WAXED_INTERACT_FAIL("block.hanging_sign.waxed_interact_fail"),
     BLOCK_HONEY_BLOCK_BREAK("block.honey_block.break"),
     BLOCK_HONEY_BLOCK_FALL("block.honey_block.fall"),
     BLOCK_HONEY_BLOCK_HIT("block.honey_block.hit"),
@@ -493,6 +530,16 @@
     BLOCK_POLISHED_DEEPSLATE_HIT("block.polished_deepslate.hit"),
     BLOCK_POLISHED_DEEPSLATE_PLACE("block.polished_deepslate.place"),
     BLOCK_POLISHED_DEEPSLATE_STEP("block.polished_deepslate.step"),
+    @MinecraftExperimental
+    BLOCK_POLISHED_TUFF_BREAK("block.polished_tuff.break"),
+    @MinecraftExperimental
+    BLOCK_POLISHED_TUFF_FALL("block.polished_tuff.fall"),
+    @MinecraftExperimental
+    BLOCK_POLISHED_TUFF_HIT("block.polished_tuff.hit"),
+    @MinecraftExperimental
+    BLOCK_POLISHED_TUFF_PLACE("block.polished_tuff.place"),
+    @MinecraftExperimental
+    BLOCK_POLISHED_TUFF_STEP("block.polished_tuff.step"),
     BLOCK_PORTAL_AMBIENT("block.portal.ambient"),
     BLOCK_PORTAL_TRAVEL("block.portal.travel"),
     BLOCK_PORTAL_TRIGGER("block.portal.trigger"),
@@ -636,11 +683,43 @@
     BLOCK_SWEET_BERRY_BUSH_BREAK("block.sweet_berry_bush.break"),
     BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES("block.sweet_berry_bush.pick_berries"),
     BLOCK_SWEET_BERRY_BUSH_PLACE("block.sweet_berry_bush.place"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_AMBIENT("block.trial_spawner.ambient"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_BREAK("block.trial_spawner.break"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_CLOSE_SHUTTER("block.trial_spawner.close_shutter"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_DETECT_PLAYER("block.trial_spawner.detect_player"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_EJECT_ITEM("block.trial_spawner.eject_item"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_FALL("block.trial_spawner.fall"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_HIT("block.trial_spawner.hit"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_OPEN_SHUTTER("block.trial_spawner.open_shutter"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_PLACE("block.trial_spawner.place"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_SPAWN_MOB("block.trial_spawner.spawn_mob"),
+    @MinecraftExperimental
+    BLOCK_TRIAL_SPAWNER_STEP("block.trial_spawner.step"),
     BLOCK_TRIPWIRE_ATTACH("block.tripwire.attach"),
     BLOCK_TRIPWIRE_CLICK_OFF("block.tripwire.click_off"),
     BLOCK_TRIPWIRE_CLICK_ON("block.tripwire.click_on"),
     BLOCK_TRIPWIRE_DETACH("block.tripwire.detach"),
     BLOCK_TUFF_BREAK("block.tuff.break"),
+    @MinecraftExperimental
+    BLOCK_TUFF_BRICKS_BREAK("block.tuff_bricks.break"),
+    @MinecraftExperimental
+    BLOCK_TUFF_BRICKS_FALL("block.tuff_bricks.fall"),
+    @MinecraftExperimental
+    BLOCK_TUFF_BRICKS_HIT("block.tuff_bricks.hit"),
+    @MinecraftExperimental
+    BLOCK_TUFF_BRICKS_PLACE("block.tuff_bricks.place"),
+    @MinecraftExperimental
+    BLOCK_TUFF_BRICKS_STEP("block.tuff_bricks.step"),
     BLOCK_TUFF_FALL("block.tuff.fall"),
     BLOCK_TUFF_HIT("block.tuff.hit"),
     BLOCK_TUFF_PLACE("block.tuff.place"),
@@ -729,6 +808,24 @@
     ENTITY_BLAZE_SHOOT("entity.blaze.shoot"),
     ENTITY_BOAT_PADDLE_LAND("entity.boat.paddle_land"),
     ENTITY_BOAT_PADDLE_WATER("entity.boat.paddle_water"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_DEATH("entity.breeze.death"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_HURT("entity.breeze.hurt"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_IDLE_AIR("entity.breeze.idle_air"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_IDLE_GROUND("entity.breeze.idle_ground"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_INHALE("entity.breeze.inhale"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_JUMP("entity.breeze.jump"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_LAND("entity.breeze.land"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_SHOOT("entity.breeze.shoot"),
+    @MinecraftExperimental
+    ENTITY_BREEZE_SLIDE("entity.breeze.slide"),
     ENTITY_CAMEL_AMBIENT("entity.camel.ambient"),
     ENTITY_CAMEL_DASH("entity.camel.dash"),
     ENTITY_CAMEL_DASH_READY("entity.camel.dash_ready"),
@@ -873,6 +970,8 @@
     ENTITY_GENERIC_SMALL_FALL("entity.generic.small_fall"),
     ENTITY_GENERIC_SPLASH("entity.generic.splash"),
     ENTITY_GENERIC_SWIM("entity.generic.swim"),
+    @MinecraftExperimental
+    ENTITY_GENERIC_WIND_BURST("entity.generic.wind_burst"),
     ENTITY_GHAST_AMBIENT("entity.ghast.ambient"),
     ENTITY_GHAST_DEATH("entity.ghast.death"),
     ENTITY_GHAST_HURT("entity.ghast.hurt"),
@@ -1024,6 +1123,8 @@
     ENTITY_PARROT_FLY("entity.parrot.fly"),
     ENTITY_PARROT_HURT("entity.parrot.hurt"),
     ENTITY_PARROT_IMITATE_BLAZE("entity.parrot.imitate.blaze"),
+    @MinecraftExperimental
+    ENTITY_PARROT_IMITATE_BREEZE("entity.parrot.imitate.breeze"),
     ENTITY_PARROT_IMITATE_CREEPER("entity.parrot.imitate.creeper"),
     ENTITY_PARROT_IMITATE_DROWNED("entity.parrot.imitate.drowned"),
     ENTITY_PARROT_IMITATE_ELDER_GUARDIAN("entity.parrot.imitate.elder_guardian"),
@@ -1108,6 +1209,7 @@
     ENTITY_PLAYER_SPLASH("entity.player.splash"),
     ENTITY_PLAYER_SPLASH_HIGH_SPEED("entity.player.splash.high_speed"),
     ENTITY_PLAYER_SWIM("entity.player.swim"),
+    ENTITY_PLAYER_TELEPORT("entity.player.teleport"),
     ENTITY_POLAR_BEAR_AMBIENT("entity.polar_bear.ambient"),
     ENTITY_POLAR_BEAR_AMBIENT_BABY("entity.polar_bear.ambient_baby"),
     ENTITY_POLAR_BEAR_DEATH("entity.polar_bear.death"),
@@ -1391,8 +1493,11 @@
     ITEM_BUCKET_FILL_LAVA("item.bucket.fill_lava"),
     ITEM_BUCKET_FILL_POWDER_SNOW("item.bucket.fill_powder_snow"),
     ITEM_BUCKET_FILL_TADPOLE("item.bucket.fill_tadpole"),
+    @MinecraftExperimental
     ITEM_BUNDLE_DROP_CONTENTS("item.bundle.drop_contents"),
+    @MinecraftExperimental
     ITEM_BUNDLE_INSERT("item.bundle.insert"),
+    @MinecraftExperimental
     ITEM_BUNDLE_REMOVE_ONE("item.bundle.remove_one"),
     ITEM_CHORUS_FRUIT_TELEPORT("item.chorus_fruit.teleport"),
     ITEM_CROP_PLANT("item.crop.plant"),
Index: src/main/java/org/bukkit/CoalType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/CoalType.java b/src/main/java/org/bukkit/CoalType.java
--- a/src/main/java/org/bukkit/CoalType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/CoalType.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents the two types of coal
Index: src/main/java/org/bukkit/MusicInstrument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/MusicInstrument.java b/src/main/java/org/bukkit/MusicInstrument.java
--- a/src/main/java/org/bukkit/MusicInstrument.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/MusicInstrument.java	(date 1703956060000)
@@ -2,13 +2,10 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 public abstract class MusicInstrument implements Keyed {
 
@@ -29,7 +26,9 @@
      * @deprecated Use {@link Registry#get(NamespacedKey)} instead.
      */
     @Nullable
+    @Deprecated
     public static MusicInstrument getByKey(@NotNull NamespacedKey namespacedKey) {
+
         return Registry.INSTRUMENT.get(namespacedKey);
     }
 
@@ -40,6 +39,7 @@
      * @deprecated use {@link Registry#iterator()}.
      */
     @NotNull
+    @Deprecated
     public static Collection<MusicInstrument> values() {
         return Collections.unmodifiableCollection(Lists.newArrayList(Registry.INSTRUMENT));
     }
@@ -53,4 +53,4 @@
 
         return instrument;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/MinecraftExperimental.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/MinecraftExperimental.java b/src/main/java/org/bukkit/MinecraftExperimental.java
--- a/src/main/java/org/bukkit/MinecraftExperimental.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/MinecraftExperimental.java	(date 1703956060000)
@@ -1,16 +1,15 @@
 package org.bukkit;
 
-import org.jetbrains.annotations.ApiStatus;
-
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+import org.jetbrains.annotations.ApiStatus;
 
 /**
  * Indicates that the annotated element (class, method, field, etc.) is part of a
- * <a href="https://minecraft.fandom.com/wiki/Experimental_Gameplay">minecraft experimental feature</a>
+ * <a href="https://minecraft.wiki/w/Experimental_Gameplay">minecraft experimental feature</a>
  * and is subject to changes by Mojang.
  * <p>
  * <b>Note:</b> Elements marked with this annotation require the use of a datapack or otherwise
Index: src/main/java/org/bukkit/UnsafeValues.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
--- a/src/main/java/org/bukkit/UnsafeValues.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/UnsafeValues.java	(date 1703956060000)
@@ -12,6 +12,7 @@
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.potion.PotionType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -52,7 +53,7 @@
      * layout.
      * <br>
      * It is currently a JSON object, as described by the Minecraft Wiki:
-     * http://minecraft.gamepedia.com/Advancements
+     * http://minecraft.wiki/w/Advancements
      * <br>
      * Loaded advancements will be stored and persisted across server restarts
      * and reloads.
@@ -92,4 +93,12 @@
 
     @Nullable
     FeatureFlag getFeatureFlag(@NotNull NamespacedKey key);
+
+    /**
+     * Do not use, method will get removed, and the plugin won't run
+     *
+     * @param key of the potion type
+     * @return an internal potion data
+     */
+    PotionType.InternalPotionData getInternalPotionData(NamespacedKey key);
 }
Index: src/main/java/org/bukkit/CropState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/CropState.java b/src/main/java/org/bukkit/CropState.java
--- a/src/main/java/org/bukkit/CropState.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/CropState.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents the different growth states of crops
Index: src/main/java/org/bukkit/Art.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
--- a/src/main/java/org/bukkit/Art.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Art.java	(date 1703956060000)
@@ -2,11 +2,10 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
+import java.util.HashMap;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.HashMap;
-
 /**
  * Represents the art on a painting
  */
Index: src/main/java/org/bukkit/FeatureFlag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/FeatureFlag.java b/src/main/java/org/bukkit/FeatureFlag.java
--- a/src/main/java/org/bukkit/FeatureFlag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/FeatureFlag.java	(date 1703956060000)
@@ -15,7 +15,16 @@
 
     /**
      * <strong>AVAILABLE BETWEEN VERSIONS:</strong> 1.19 - 1.19.4
+     *
+     * @deprecated not available since 1.20
      */
+    @Deprecated
     @MinecraftExperimental
     public static final FeatureFlag UPDATE_1_20 = Bukkit.getUnsafe().getFeatureFlag(NamespacedKey.minecraft("update_1_20"));
-}
\ No newline at end of file
+
+    @MinecraftExperimental
+    public static final FeatureFlag TRADE_REBALANCE = Bukkit.getUnsafe().getFeatureFlag(NamespacedKey.minecraft("trade_rebalance"));
+
+    @MinecraftExperimental
+    public static final FeatureFlag UPDATE_121 = Bukkit.getUnsafe().getFeatureFlag(NamespacedKey.minecraft("update_1_21"));
+}
Index: src/main/java/org/bukkit/SandstoneType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/SandstoneType.java b/src/main/java/org/bukkit/SandstoneType.java
--- a/src/main/java/org/bukkit/SandstoneType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/SandstoneType.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents the three different types of Sandstone
Index: src/main/java/org/bukkit/Fluid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Fluid.java b/src/main/java/org/bukkit/Fluid.java
--- a/src/main/java/org/bukkit/Fluid.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Fluid.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Locale;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a fluid type.
Index: src/main/java/org/bukkit/FireworkEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
--- a/src/main/java/org/bukkit/FireworkEffect.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/FireworkEffect.java	(date 1703956060000)
@@ -3,13 +3,12 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
+import java.util.List;
+import java.util.Map;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-import java.util.Map;
-
 /**
  * Represents a single firework effect.
  */
Index: src/main/java/org/bukkit/GameRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/GameRule.java b/src/main/java/org/bukkit/GameRule.java
--- a/src/main/java/org/bukkit/GameRule.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/GameRule.java	(date 1703956060000)
@@ -1,17 +1,16 @@
 package org.bukkit;
 
 import com.google.common.base.Preconditions;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.HashMap;
 import java.util.Map;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * GameRules dictate certain behavior within Minecraft itself
  * <br>
  * For more information please visit the
- * <a href="https://minecraft.gamepedia.com/Commands/gamerule">Minecraft
+ * <a href="https://minecraft.wiki/w/Commands/gamerule">Minecraft
  * Wiki</a>
  *
  * @param <T> type of rule (Boolean or Integer)
@@ -62,6 +61,11 @@
      */
     public static final GameRule<Boolean> DO_MOB_LOOT = new GameRule<>("doMobLoot", Boolean.class);
 
+    /**
+     * Whether projectiles can break blocks.
+     */
+    public static final GameRule<Boolean> PROJECTILES_CAN_BREAK_BLOCKS = new GameRule<>("projectilesCanBreakBlocks", Boolean.class);
+
     /**
      * Whether mobs should naturally spawn.
      */
@@ -244,6 +248,12 @@
      */
     public static final GameRule<Integer> MAX_COMMAND_CHAIN_LENGTH = new GameRule<>("maxCommandChainLength", Integer.class);
 
+    /**
+     * Determines the number of different commands/functions which execute
+     * commands can fork into.
+     */
+    public static final GameRule<Integer> MAX_COMMAND_FORK_COUNT = new GameRule<>("maxCommandForkCount", Integer.class);
+
     /**
      * Determines the maximum number of blocks which a command can modify.
      */
@@ -256,6 +266,17 @@
     public static final GameRule<Integer> PLAYERS_SLEEPING_PERCENTAGE = new GameRule<>("playersSleepingPercentage", Integer.class);
     public static final GameRule<Integer> SNOW_ACCUMULATION_HEIGHT = new GameRule<>("snowAccumulationHeight", Integer.class);
 
+    /**
+     * The amount of time a player must stand in a nether portal before the
+     * portal activates.
+     */
+    public static final GameRule<Integer> PLAYERS_NETHER_PORTAL_DEFAULT_DELAY = new GameRule<>("playersNetherPortalDefaultDelay", Integer.class);
+    /**
+     * The amount of time a player in creative mode must stand in a nether
+     * portal before the portal activates.
+     */
+    public static final GameRule<Integer> PLAYERS_NETHER_PORTAL_CREATIVE_DELAY = new GameRule<>("playersNetherPortalCreativeDelay", Integer.class);
+
     // All GameRules instantiated above this for organizational purposes
     private final String name;
     private final Class<T> type;
Index: src/main/java/org/bukkit/Chunk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
--- a/src/main/java/org/bukkit/Chunk.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Chunk.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit;
 
+import java.util.Collection;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
@@ -9,8 +10,6 @@
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collection;
-
 /**
  * Represents a chunk of blocks.
  *
@@ -255,7 +254,6 @@
      */
     boolean contains(@NotNull Biome biome);
 
-
     /**
      * Gets the load level of this chunk, which determines what game logic is
      * processed.
Index: src/main/java/org/bukkit/BanEntry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/BanEntry.java b/src/main/java/org/bukkit/BanEntry.java
--- a/src/main/java/org/bukkit/BanEntry.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/BanEntry.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit;
 
+import java.util.Date;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Date;
-
 /**
  * A single entry from a ban list. This may represent either a player ban or
  * an IP ban.
Index: src/main/java/org/bukkit/BanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/BanList.java b/src/main/java/org/bukkit/BanList.java
--- a/src/main/java/org/bukkit/BanList.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/BanList.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Date;
 import java.util.Set;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * A ban list, containing bans of some {@link Type}.
@@ -177,4 +176,4 @@
      */
     @Deprecated
     public void pardon(@NotNull String target);
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/Note.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Note.java b/src/main/java/org/bukkit/Note.java
--- a/src/main/java/org/bukkit/Note.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Note.java	(date 1703956060000)
@@ -2,11 +2,10 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
+import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * A note class to store a specific note.
  */
@@ -119,6 +118,14 @@
         }
     }
 
+    private static final float[] pitchArray = new float[25];
+    static {
+        for (int i = 0; i <= 24; i++) {
+            // See https://minecraft.wiki/w/Note_Block#Notes
+            pitchArray[i] = (float) Math.pow(2, (i - 12) / 12f);
+        }
+    }
+
     private final byte note;
 
     /**
@@ -255,6 +262,16 @@
         return Tone.getById(note).isSharped(note);
     }
 
+    /**
+     * Gets the pitch of this note. This is the value used with
+     * {@link World#playSound} or the /playsound command.
+     *
+     * @return the pitch
+     */
+    public float getPitch() {
+        return pitchArray[this.note];
+    }
+
     @Override
     public int hashCode() {
         final int prime = 31;
Index: src/main/java/org/bukkit/WorldBorder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/WorldBorder.java b/src/main/java/org/bukkit/WorldBorder.java
--- a/src/main/java/org/bukkit/WorldBorder.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/WorldBorder.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit;
 
+import java.util.concurrent.TimeUnit;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.concurrent.TimeUnit;
-
 public interface WorldBorder {
 
     /**
Index: src/main/java/org/bukkit/Difficulty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Difficulty.java b/src/main/java/org/bukkit/Difficulty.java
--- a/src/main/java/org/bukkit/Difficulty.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Difficulty.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents the various difficulty levels that are available.
Index: src/main/java/org/bukkit/Material.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
--- a/src/main/java/org/bukkit/Material.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Material.java	(date 1703956060000)
@@ -4,10 +4,17 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.mohistmc.dynamicenum.MohistDynamEnum;
+import java.lang.reflect.Constructor;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.function.Consumer;
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.block.Block;
+import org.bukkit.block.Crafter;
+import org.bukkit.block.TrialSpawner;
 import org.bukkit.block.data.Ageable;
 import org.bukkit.block.data.AnaloguePowerable;
 import org.bukkit.block.data.Bisected;
@@ -45,6 +52,7 @@
 import org.bukkit.block.data.type.Cocoa;
 import org.bukkit.block.data.type.CommandBlock;
 import org.bukkit.block.data.type.Comparator;
+import org.bukkit.block.data.type.CopperBulb;
 import org.bukkit.block.data.type.CoralWallFan;
 import org.bukkit.block.data.type.DaylightDetector;
 import org.bukkit.block.data.type.DecoratedPot;
@@ -114,12 +122,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.lang.reflect.Constructor;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.function.Consumer;
-
 /**
  * An enum of all material IDs accepted by the official server and client
  */
@@ -141,6 +143,59 @@
     POLISHED_DEEPSLATE(31772),
     CALCITE(20311),
     TUFF(24364),
+    /**
+     * BlockData: {@link Slab}
+     */
+    @MinecraftExperimental
+    TUFF_SLAB(19305, Slab.class),
+    /**
+     * BlockData: {@link Stairs}
+     */
+    @MinecraftExperimental
+    TUFF_STAIRS(11268, Stairs.class),
+    /**
+     * BlockData: {@link Wall}
+     */
+    @MinecraftExperimental
+    TUFF_WALL(24395, Wall.class),
+    @MinecraftExperimental
+    CHISELED_TUFF(15831),
+    @MinecraftExperimental
+    POLISHED_TUFF(17801),
+    /**
+     * BlockData: {@link Slab}
+     */
+    @MinecraftExperimental
+    POLISHED_TUFF_SLAB(31096, Slab.class),
+    /**
+     * BlockData: {@link Stairs}
+     */
+    @MinecraftExperimental
+    POLISHED_TUFF_STAIRS(7964, Stairs.class),
+    /**
+     * BlockData: {@link Wall}
+     */
+    @MinecraftExperimental
+    POLISHED_TUFF_WALL(28886, Wall.class),
+    @MinecraftExperimental
+    TUFF_BRICKS(26276),
+    /**
+     * BlockData: {@link Slab}
+     */
+    @MinecraftExperimental
+    TUFF_BRICK_SLAB(11843, Slab.class),
+    /**
+     * BlockData: {@link Stairs}
+     */
+    @MinecraftExperimental
+    TUFF_BRICK_STAIRS(30753, Stairs.class),
+    /**
+     * BlockData: {@link Wall}
+     */
+    @MinecraftExperimental
+    TUFF_BRICK_WALL(11761, Wall.class),
+    @MinecraftExperimental
+    CHISELED_TUFF_BRICKS(8601),
     DRIPSTONE_BLOCK(26227),
     /**
      * BlockData: {@link Snowable}
@@ -252,6 +307,14 @@
     EXPOSED_COPPER(28488),
     WEATHERED_COPPER(19699),
     OXIDIZED_COPPER(19490),
+    @MinecraftExperimental
+    CHISELED_COPPER(12143),
+    @MinecraftExperimental
+    EXPOSED_CHISELED_COPPER(4570),
+    @MinecraftExperimental
+    WEATHERED_CHISELED_COPPER(30876),
+    @MinecraftExperimental
+    OXIDIZED_CHISELED_COPPER(27719),
     CUT_COPPER(32519),
     EXPOSED_CUT_COPPER(18000),
     WEATHERED_CUT_COPPER(21158),
@@ -292,6 +355,14 @@
     WAXED_EXPOSED_COPPER(27989),
     WAXED_WEATHERED_COPPER(5960),
     WAXED_OXIDIZED_COPPER(25626),
+    @MinecraftExperimental
+    WAXED_CHISELED_COPPER(7500),
+    @MinecraftExperimental
+    WAXED_EXPOSED_CHISELED_COPPER(30658),
+    @MinecraftExperimental
+    WAXED_WEATHERED_CHISELED_COPPER(5970),
+    @MinecraftExperimental
+    WAXED_OXIDIZED_CHISELED_COPPER(7735),
     WAXED_CUT_COPPER(11030),
     WAXED_EXPOSED_CUT_COPPER(30043),
     WAXED_WEATHERED_CUT_COPPER(13823),
@@ -553,7 +624,7 @@
     CHISELED_SANDSTONE(31763),
     CUT_SANDSTONE(6118),
     COBWEB(9469),
-    GRASS(6155),
+    SHORT_GRASS(6155),
     FERN(15794),
     AZALEA(29386),
     FLOWERING_AZALEA(28270),
@@ -772,7 +843,7 @@
     /**
      * BlockData: {@link DecoratedPot}
      */
-    DECORATED_POT(8720, 1, DecoratedPot.class),
+    DECORATED_POT(8720, DecoratedPot.class),
     MOSSY_COBBLESTONE(21900),
     OBSIDIAN(32723),
     TORCH(6063),
@@ -1194,7 +1265,10 @@
     GREEN_TERRACOTTA(4105),
     RED_TERRACOTTA(5086),
     BLACK_TERRACOTTA(26691),
-    BARRIER(26453),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    BARRIER(26453, Waterlogged.class),
     /**
      * BlockData: {@link Light}
      */
@@ -2026,6 +2100,46 @@
      */
     WARPED_DOOR(15062, Door.class),
     /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    COPPER_DOOR(26809, Door.class),
+    /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    EXPOSED_COPPER_DOOR(13236, Door.class),
+    /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    WEATHERED_COPPER_DOOR(10208, Door.class),
+    /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    OXIDIZED_COPPER_DOOR(5348, Door.class),
+    /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    WAXED_COPPER_DOOR(9954, Door.class),
+    /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    WAXED_EXPOSED_COPPER_DOOR(20748, Door.class),
+    /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    WAXED_WEATHERED_COPPER_DOOR(25073, Door.class),
+    /**
+     * BlockData: {@link Door}
+     */
+    @MinecraftExperimental
+    WAXED_OXIDIZED_COPPER_DOOR(23888, Door.class),
+    /**
      * BlockData: {@link TrapDoor}
      */
     IRON_TRAPDOOR(17095, TrapDoor.class),
@@ -2074,6 +2188,46 @@
      */
     WARPED_TRAPDOOR(7708, TrapDoor.class),
     /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    COPPER_TRAPDOOR(12110, TrapDoor.class),
+    /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    EXPOSED_COPPER_TRAPDOOR(19219, TrapDoor.class),
+    /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    WEATHERED_COPPER_TRAPDOOR(28254, TrapDoor.class),
+    /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    OXIDIZED_COPPER_TRAPDOOR(26518, TrapDoor.class),
+    /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    WAXED_COPPER_TRAPDOOR(12626, TrapDoor.class),
+    /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    WAXED_EXPOSED_COPPER_TRAPDOOR(11010, TrapDoor.class),
+    /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    WAXED_WEATHERED_COPPER_TRAPDOOR(30709, TrapDoor.class),
+    /**
+     * BlockData: {@link TrapDoor}
+     */
+    @MinecraftExperimental
+    WAXED_OXIDIZED_COPPER_TRAPDOOR(21450, TrapDoor.class),
+    /**
      * BlockData: {@link Gate}
      */
     OAK_FENCE_GATE(16689, Gate.class),
@@ -2473,6 +2627,11 @@
      */
     BLACK_BED(20490, 1, Bed.class),
     COOKIE(27431),
+    /**
+     * BlockData: {@link Crafter}
+     */
+    @MinecraftExperimental
+    CRAFTER(25243, Crafter.class),
     FILLED_MAP(23504),
     SHEARS(27971, 1, 238),
     MELON_SLICE(5347),
@@ -2510,6 +2669,8 @@
     BAT_SPAWN_EGG(14607),
     BEE_SPAWN_EGG(22924),
     BLAZE_SPAWN_EGG(4759),
+    @MinecraftExperimental
+    BREEZE_SPAWN_EGG(7580),
     CAT_SPAWN_EGG(29583),
     CAMEL_SPAWN_EGG(14760),
     CAVE_SPIDER_SPAWN_EGG(23341),
@@ -3001,6 +3162,93 @@
     SKULL_POTTERY_SHERD(16980),
     SNORT_POTTERY_SHERD(15921),
     /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    COPPER_GRATE(16221, Waterlogged.class),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    EXPOSED_COPPER_GRATE(7783, Waterlogged.class),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    WEATHERED_COPPER_GRATE(24954, Waterlogged.class),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    OXIDIZED_COPPER_GRATE(14122, Waterlogged.class),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    WAXED_COPPER_GRATE(11230, Waterlogged.class),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    WAXED_EXPOSED_COPPER_GRATE(20520, Waterlogged.class),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    WAXED_WEATHERED_COPPER_GRATE(16533, Waterlogged.class),
+    /**
+     * BlockData: {@link Waterlogged}
+     */
+    @MinecraftExperimental
+    WAXED_OXIDIZED_COPPER_GRATE(32010, Waterlogged.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    COPPER_BULB(21370, CopperBulb.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    EXPOSED_COPPER_BULB(11944, CopperBulb.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    WEATHERED_COPPER_BULB(10800, CopperBulb.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    OXIDIZED_COPPER_BULB(22421, CopperBulb.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    WAXED_COPPER_BULB(23756, CopperBulb.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    WAXED_EXPOSED_COPPER_BULB(5530, CopperBulb.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    WAXED_WEATHERED_COPPER_BULB(13239, CopperBulb.class),
+    /**
+     * BlockData: {@link CopperBulb}
+     */
+    @MinecraftExperimental
+    WAXED_OXIDIZED_COPPER_BULB(26892, CopperBulb.class),
+    /**
+     * BlockData: {@link TrialSpawner}
+     */
+    @MinecraftExperimental
+    TRIAL_SPAWNER(19902, TrialSpawner.class),
+    @MinecraftExperimental
+    TRIAL_KEY(12725),
+    /**
      * BlockData: {@link Levelled}
      */
     WATER(24998, Levelled.class),
@@ -4398,20 +4646,20 @@
     public final Class<?> data;
     private final boolean legacy;
     public NamespacedKey key;
-    public boolean isFabricBlock = false;
-    public boolean isFabricItem = false;
+    public boolean isForgeBlock = false;
+    public boolean isForgeItem = false;
 
     private Material(final int id) {
         this(id, 64);
     }
 
-    // Banner start - constructor used to set if the Material is a block or not
-    private Material(final int id, final int stack, boolean isFabricBlock, boolean isFabricItem) {
+    // Mohist start - constructor used to set if the Material is a block or not
+    private Material(final int id, final int stack, boolean isForgeBlock, boolean isForgeItem) {
         this(id, stack);
-        this.isFabricBlock = isFabricBlock;
-        this.isFabricItem = isFabricItem;
+        this.isForgeBlock = isForgeBlock;
+        this.isForgeItem = isForgeItem;
     }
-    // Banner end
+    // Mohist end
 
     private Material(final int id, final int stack) {
         this(id, stack, MaterialData.class);
@@ -4516,7 +4764,7 @@
      * @return new data instance
      */
     @NotNull
-    public BlockData createBlockData(@Nullable Consumer<BlockData> consumer) {
+    public BlockData createBlockData(@Nullable Consumer<? super BlockData> consumer) {
         return Bukkit.createBlockData(this, consumer);
     }
 
@@ -4579,7 +4827,7 @@
      * @return true if this material is a block
      */
     public boolean isBlock() {
-        if (isFabricBlock) {
+        if (isForgeBlock) {
             return true;
         }
         switch (this) {
@@ -4768,6 +5016,7 @@
             case CHEST:
             case CHIPPED_ANVIL:
             case CHISELED_BOOKSHELF:
+            case CHISELED_COPPER:
             case CHISELED_DEEPSLATE:
             case CHISELED_NETHER_BRICKS:
             case CHISELED_POLISHED_BLACKSTONE:
@@ -4775,6 +5024,8 @@
             case CHISELED_RED_SANDSTONE:
             case CHISELED_SANDSTONE:
             case CHISELED_STONE_BRICKS:
+            case CHISELED_TUFF:
+            case CHISELED_TUFF_BRICKS:
             case CHORUS_FLOWER:
             case CHORUS_PLANT:
             case CLAY:
@@ -4796,13 +5047,18 @@
             case COMPOSTER:
             case CONDUIT:
             case COPPER_BLOCK:
+            case COPPER_BULB:
+            case COPPER_DOOR:
+            case COPPER_GRATE:
             case COPPER_ORE:
+            case COPPER_TRAPDOOR:
             case CORNFLOWER:
             case CRACKED_DEEPSLATE_BRICKS:
             case CRACKED_DEEPSLATE_TILES:
             case CRACKED_NETHER_BRICKS:
             case CRACKED_POLISHED_BLACKSTONE_BRICKS:
             case CRACKED_STONE_BRICKS:
+            case CRAFTER:
             case CRAFTING_TABLE:
             case CREEPER_HEAD:
             case CREEPER_WALL_HEAD:
@@ -4937,7 +5193,12 @@
             case END_STONE_BRICK_SLAB:
             case END_STONE_BRICK_STAIRS:
             case END_STONE_BRICK_WALL:
+            case EXPOSED_CHISELED_COPPER:
             case EXPOSED_COPPER:
+            case EXPOSED_COPPER_BULB:
+            case EXPOSED_COPPER_DOOR:
+            case EXPOSED_COPPER_GRATE:
+            case EXPOSED_COPPER_TRAPDOOR:
             case EXPOSED_CUT_COPPER:
             case EXPOSED_CUT_COPPER_SLAB:
             case EXPOSED_CUT_COPPER_STAIRS:
@@ -4966,7 +5227,6 @@
             case GRANITE_SLAB:
             case GRANITE_STAIRS:
             case GRANITE_WALL:
-            case GRASS:
             case GRASS_BLOCK:
             case GRAVEL:
             case GRAY_BANNER:
@@ -5208,7 +5468,12 @@
             case ORANGE_WALL_BANNER:
             case ORANGE_WOOL:
             case OXEYE_DAISY:
+            case OXIDIZED_CHISELED_COPPER:
             case OXIDIZED_COPPER:
+            case OXIDIZED_COPPER_BULB:
+            case OXIDIZED_COPPER_DOOR:
+            case OXIDIZED_COPPER_GRATE:
+            case OXIDIZED_COPPER_TRAPDOOR:
             case OXIDIZED_CUT_COPPER:
             case OXIDIZED_CUT_COPPER_SLAB:
             case OXIDIZED_CUT_COPPER_STAIRS:
@@ -5267,6 +5532,10 @@
             case POLISHED_GRANITE:
             case POLISHED_GRANITE_SLAB:
             case POLISHED_GRANITE_STAIRS:
+            case POLISHED_TUFF:
+            case POLISHED_TUFF_SLAB:
+            case POLISHED_TUFF_STAIRS:
+            case POLISHED_TUFF_WALL:
             case POPPY:
             case POTATOES:
             case POTTED_ACACIA_SAPLING:
@@ -5394,6 +5663,7 @@
             case SEAGRASS:
             case SEA_LANTERN:
             case SEA_PICKLE:
+            case SHORT_GRASS:
             case SHROOMLIGHT:
             case SHULKER_BOX:
             case SKELETON_SKULL:
@@ -5494,6 +5764,7 @@
             case TORCHFLOWER:
             case TORCHFLOWER_CROP:
             case TRAPPED_CHEST:
+            case TRIAL_SPAWNER:
             case TRIPWIRE:
             case TRIPWIRE_HOOK:
             case TUBE_CORAL:
@@ -5501,6 +5772,13 @@
             case TUBE_CORAL_FAN:
             case TUBE_CORAL_WALL_FAN:
             case TUFF:
+            case TUFF_BRICKS:
+            case TUFF_BRICK_SLAB:
+            case TUFF_BRICK_STAIRS:
+            case TUFF_BRICK_WALL:
+            case TUFF_SLAB:
+            case TUFF_STAIRS:
+            case TUFF_WALL:
             case TURTLE_EGG:
             case TWISTING_VINES:
             case TWISTING_VINES_PLANT:
@@ -5529,23 +5807,48 @@
             case WARPED_WART_BLOCK:
             case WATER:
             case WATER_CAULDRON:
+            case WAXED_CHISELED_COPPER:
             case WAXED_COPPER_BLOCK:
+            case WAXED_COPPER_BULB:
+            case WAXED_COPPER_DOOR:
+            case WAXED_COPPER_GRATE:
+            case WAXED_COPPER_TRAPDOOR:
             case WAXED_CUT_COPPER:
             case WAXED_CUT_COPPER_SLAB:
             case WAXED_CUT_COPPER_STAIRS:
+            case WAXED_EXPOSED_CHISELED_COPPER:
             case WAXED_EXPOSED_COPPER:
+            case WAXED_EXPOSED_COPPER_BULB:
+            case WAXED_EXPOSED_COPPER_DOOR:
+            case WAXED_EXPOSED_COPPER_GRATE:
+            case WAXED_EXPOSED_COPPER_TRAPDOOR:
             case WAXED_EXPOSED_CUT_COPPER:
             case WAXED_EXPOSED_CUT_COPPER_SLAB:
             case WAXED_EXPOSED_CUT_COPPER_STAIRS:
+            case WAXED_OXIDIZED_CHISELED_COPPER:
             case WAXED_OXIDIZED_COPPER:
+            case WAXED_OXIDIZED_COPPER_BULB:
+            case WAXED_OXIDIZED_COPPER_DOOR:
+            case WAXED_OXIDIZED_COPPER_GRATE:
+            case WAXED_OXIDIZED_COPPER_TRAPDOOR:
             case WAXED_OXIDIZED_CUT_COPPER:
             case WAXED_OXIDIZED_CUT_COPPER_SLAB:
             case WAXED_OXIDIZED_CUT_COPPER_STAIRS:
+            case WAXED_WEATHERED_CHISELED_COPPER:
             case WAXED_WEATHERED_COPPER:
+            case WAXED_WEATHERED_COPPER_BULB:
+            case WAXED_WEATHERED_COPPER_DOOR:
+            case WAXED_WEATHERED_COPPER_GRATE:
+            case WAXED_WEATHERED_COPPER_TRAPDOOR:
             case WAXED_WEATHERED_CUT_COPPER:
             case WAXED_WEATHERED_CUT_COPPER_SLAB:
             case WAXED_WEATHERED_CUT_COPPER_STAIRS:
+            case WEATHERED_CHISELED_COPPER:
             case WEATHERED_COPPER:
+            case WEATHERED_COPPER_BULB:
+            case WEATHERED_COPPER_DOOR:
+            case WEATHERED_COPPER_GRATE:
+            case WEATHERED_COPPER_TRAPDOOR:
             case WEATHERED_CUT_COPPER:
             case WEATHERED_CUT_COPPER_SLAB:
             case WEATHERED_CUT_COPPER_STAIRS:
@@ -5587,7 +5890,7 @@
             case YELLOW_WOOL:
             case ZOMBIE_HEAD:
             case ZOMBIE_WALL_HEAD:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return 0 <= id && id < 256;
@@ -5642,7 +5945,7 @@
             case SUSPICIOUS_STEW:
             case SWEET_BERRIES:
             case TROPICAL_FISH:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_BREAD:
             case LEGACY_CARROT_ITEM:
             case LEGACY_BAKED_POTATO:
@@ -5673,7 +5976,7 @@
             case LEGACY_BEETROOT:
             case LEGACY_CHORUS_FRUIT:
             case LEGACY_BEETROOT_SOUP:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -5793,7 +6096,7 @@
             case MUSIC_DISC_STRAD:
             case MUSIC_DISC_WAIT:
             case MUSIC_DISC_WARD:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return id >= LEGACY_GOLD_RECORD.id && id <= LEGACY_RECORD_12.id;
@@ -5957,6 +6260,7 @@
             case CHEST:
             case CHIPPED_ANVIL:
             case CHISELED_BOOKSHELF:
+            case CHISELED_COPPER:
             case CHISELED_DEEPSLATE:
             case CHISELED_NETHER_BRICKS:
             case CHISELED_POLISHED_BLACKSTONE:
@@ -5964,6 +6268,8 @@
             case CHISELED_RED_SANDSTONE:
             case CHISELED_SANDSTONE:
             case CHISELED_STONE_BRICKS:
+            case CHISELED_TUFF:
+            case CHISELED_TUFF_BRICKS:
             case CLAY:
             case COAL_BLOCK:
             case COAL_ORE:
@@ -5980,12 +6286,17 @@
             case COMPOSTER:
             case CONDUIT:
             case COPPER_BLOCK:
+            case COPPER_BULB:
+            case COPPER_DOOR:
+            case COPPER_GRATE:
             case COPPER_ORE:
+            case COPPER_TRAPDOOR:
             case CRACKED_DEEPSLATE_BRICKS:
             case CRACKED_DEEPSLATE_TILES:
             case CRACKED_NETHER_BRICKS:
             case CRACKED_POLISHED_BLACKSTONE_BRICKS:
             case CRACKED_STONE_BRICKS:
+            case CRAFTER:
             case CRAFTING_TABLE:
             case CRIMSON_DOOR:
             case CRIMSON_FENCE:
@@ -6103,7 +6414,12 @@
             case END_STONE_BRICK_SLAB:
             case END_STONE_BRICK_STAIRS:
             case END_STONE_BRICK_WALL:
+            case EXPOSED_CHISELED_COPPER:
             case EXPOSED_COPPER:
+            case EXPOSED_COPPER_BULB:
+            case EXPOSED_COPPER_DOOR:
+            case EXPOSED_COPPER_GRATE:
+            case EXPOSED_COPPER_TRAPDOOR:
             case EXPOSED_CUT_COPPER:
             case EXPOSED_CUT_COPPER_SLAB:
             case EXPOSED_CUT_COPPER_STAIRS:
@@ -6323,7 +6639,12 @@
             case ORANGE_TERRACOTTA:
             case ORANGE_WALL_BANNER:
             case ORANGE_WOOL:
+            case OXIDIZED_CHISELED_COPPER:
             case OXIDIZED_COPPER:
+            case OXIDIZED_COPPER_BULB:
+            case OXIDIZED_COPPER_DOOR:
+            case OXIDIZED_COPPER_GRATE:
+            case OXIDIZED_COPPER_TRAPDOOR:
             case OXIDIZED_CUT_COPPER:
             case OXIDIZED_CUT_COPPER_SLAB:
             case OXIDIZED_CUT_COPPER_STAIRS:
@@ -6370,6 +6691,10 @@
             case POLISHED_GRANITE:
             case POLISHED_GRANITE_SLAB:
             case POLISHED_GRANITE_STAIRS:
+            case POLISHED_TUFF:
+            case POLISHED_TUFF_SLAB:
+            case POLISHED_TUFF_STAIRS:
+            case POLISHED_TUFF_WALL:
             case POWDER_SNOW_CAULDRON:
             case PRISMARINE:
             case PRISMARINE_BRICKS:
@@ -6523,8 +6848,16 @@
             case TINTED_GLASS:
             case TNT:
             case TRAPPED_CHEST:
+            case TRIAL_SPAWNER:
             case TUBE_CORAL_BLOCK:
             case TUFF:
+            case TUFF_BRICKS:
+            case TUFF_BRICK_SLAB:
+            case TUFF_BRICK_STAIRS:
+            case TUFF_BRICK_WALL:
+            case TUFF_SLAB:
+            case TUFF_STAIRS:
+            case TUFF_WALL:
             case TURTLE_EGG:
             case VERDANT_FROGLIGHT:
             case WARPED_DOOR:
@@ -6544,23 +6877,48 @@
             case WARPED_WALL_SIGN:
             case WARPED_WART_BLOCK:
             case WATER_CAULDRON:
+            case WAXED_CHISELED_COPPER:
             case WAXED_COPPER_BLOCK:
+            case WAXED_COPPER_BULB:
+            case WAXED_COPPER_DOOR:
+            case WAXED_COPPER_GRATE:
+            case WAXED_COPPER_TRAPDOOR:
             case WAXED_CUT_COPPER:
             case WAXED_CUT_COPPER_SLAB:
             case WAXED_CUT_COPPER_STAIRS:
+            case WAXED_EXPOSED_CHISELED_COPPER:
             case WAXED_EXPOSED_COPPER:
+            case WAXED_EXPOSED_COPPER_BULB:
+            case WAXED_EXPOSED_COPPER_DOOR:
+            case WAXED_EXPOSED_COPPER_GRATE:
+            case WAXED_EXPOSED_COPPER_TRAPDOOR:
             case WAXED_EXPOSED_CUT_COPPER:
             case WAXED_EXPOSED_CUT_COPPER_SLAB:
             case WAXED_EXPOSED_CUT_COPPER_STAIRS:
+            case WAXED_OXIDIZED_CHISELED_COPPER:
             case WAXED_OXIDIZED_COPPER:
+            case WAXED_OXIDIZED_COPPER_BULB:
+            case WAXED_OXIDIZED_COPPER_DOOR:
+            case WAXED_OXIDIZED_COPPER_GRATE:
+            case WAXED_OXIDIZED_COPPER_TRAPDOOR:
             case WAXED_OXIDIZED_CUT_COPPER:
             case WAXED_OXIDIZED_CUT_COPPER_SLAB:
             case WAXED_OXIDIZED_CUT_COPPER_STAIRS:
+            case WAXED_WEATHERED_CHISELED_COPPER:
             case WAXED_WEATHERED_COPPER:
+            case WAXED_WEATHERED_COPPER_BULB:
+            case WAXED_WEATHERED_COPPER_DOOR:
+            case WAXED_WEATHERED_COPPER_GRATE:
+            case WAXED_WEATHERED_COPPER_TRAPDOOR:
             case WAXED_WEATHERED_CUT_COPPER:
             case WAXED_WEATHERED_CUT_COPPER_SLAB:
             case WAXED_WEATHERED_CUT_COPPER_STAIRS:
+            case WEATHERED_CHISELED_COPPER:
             case WEATHERED_COPPER:
+            case WEATHERED_COPPER_BULB:
+            case WEATHERED_COPPER_DOOR:
+            case WEATHERED_COPPER_GRATE:
+            case WEATHERED_COPPER_TRAPDOOR:
             case WEATHERED_CUT_COPPER:
             case WEATHERED_CUT_COPPER_SLAB:
             case WEATHERED_CUT_COPPER_STAIRS:
@@ -6589,7 +6947,7 @@
             case YELLOW_TERRACOTTA:
             case YELLOW_WALL_BANNER:
             case YELLOW_WOOL:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_STONE:
             case LEGACY_GRASS:
             case LEGACY_DIRT:
@@ -6789,7 +7147,7 @@
             case LEGACY_BLACK_GLAZED_TERRACOTTA:
             case LEGACY_CONCRETE:
             case LEGACY_CONCRETE_POWDER:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -6807,7 +7165,7 @@
             case AIR:
             case CAVE_AIR:
             case VOID_AIR:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_AIR:
                 //</editor-fold>
                 return true;
@@ -6869,7 +7227,6 @@
             case FERN:
             case FIRE:
             case FLOWER_POT:
-            case GRASS:
             case GRAY_CARPET:
             case GREEN_CARPET:
             case JUNGLE_BUTTON:
@@ -6933,6 +7290,7 @@
             case RED_TULIP:
             case REPEATER:
             case ROSE_BUSH:
+            case SHORT_GRASS:
             case SKELETON_SKULL:
             case SKELETON_WALL_SKULL:
             case SNOW:
@@ -6957,7 +7315,7 @@
             case YELLOW_CARPET:
             case ZOMBIE_HEAD:
             case ZOMBIE_WALL_HEAD:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_AIR:
             case LEGACY_SAPLING:
             case LEGACY_POWERED_RAIL:
@@ -7008,7 +7366,7 @@
             case LEGACY_BEETROOT_BLOCK:
             case LEGACY_END_GATEWAY:
             case LEGACY_STRUCTURE_VOID:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -7142,7 +7500,6 @@
             case FLETCHING_TABLE:
             case FLOWERING_AZALEA_LEAVES:
             case GLOW_LICHEN:
-            case GRASS:
             case GRAY_BANNER:
             case GRAY_BED:
             case GRAY_CARPET:
@@ -7251,6 +7608,7 @@
             case RED_WALL_BANNER:
             case RED_WOOL:
             case ROSE_BUSH:
+            case SHORT_GRASS:
             case SMITHING_TABLE:
             case SOUL_CAMPFIRE:
             case SPRUCE_DOOR:
@@ -7300,7 +7658,7 @@
             case YELLOW_CARPET:
             case YELLOW_WALL_BANNER:
             case YELLOW_WOOL:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_WOOD:
             case LEGACY_LOG:
             case LEGACY_LEAVES:
@@ -7356,7 +7714,7 @@
             case LEGACY_JUNGLE_DOOR:
             case LEGACY_ACACIA_DOOR:
             case LEGACY_DARK_OAK_DOOR:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -7446,7 +7804,6 @@
             case FLOWERING_AZALEA:
             case FLOWERING_AZALEA_LEAVES:
             case GLOW_LICHEN:
-            case GRASS:
             case GRAY_CARPET:
             case GRAY_WOOL:
             case GREEN_CARPET:
@@ -7508,6 +7865,7 @@
             case RED_WOOL:
             case ROSE_BUSH:
             case SCAFFOLDING:
+            case SHORT_GRASS:
             case SMALL_DRIPLEAF:
             case SPORE_BLOSSOM:
             case SPRUCE_FENCE:
@@ -7548,7 +7906,7 @@
             case WITHER_ROSE:
             case YELLOW_CARPET:
             case YELLOW_WOOL:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_WOOD:
             case LEGACY_LOG:
             case LEGACY_LEAVES:
@@ -7586,7 +7944,7 @@
             case LEGACY_ACACIA_FENCE:
             case LEGACY_ACACIA_STAIRS:
             case LEGACY_DARK_OAK_STAIRS:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -7849,7 +8207,7 @@
             case YELLOW_BANNER:
             case YELLOW_CARPET:
             case YELLOW_WOOL:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_LAVA_BUCKET:
             case LEGACY_COAL_BLOCK:
             case LEGACY_BLAZE_ROD:
@@ -7913,7 +8271,7 @@
             case LEGACY_WOOL:
             case LEGACY_CARPET:
             case LEGACY_BOWL:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -7934,7 +8292,7 @@
      *   <li>Only occluding blocks can be "powered" ({@link Block#isBlockPowered()}).
      * </ul>
      * This list may be inconclusive. For a full list of the side effects of an occluding
-     * block, see the <a href="https://minecraft.fandom.com/wiki/Opacity">Minecraft Wiki</a>.
+     * block, see the <a href="https://minecraft.wiki/w/Opacity">Minecraft Wiki</a>.
      *
      * @return True if this material is a block and occludes light
      */
@@ -7998,6 +8356,7 @@
             case CHERRY_PLANKS:
             case CHERRY_WOOD:
             case CHISELED_BOOKSHELF:
+            case CHISELED_COPPER:
             case CHISELED_DEEPSLATE:
             case CHISELED_NETHER_BRICKS:
             case CHISELED_POLISHED_BLACKSTONE:
@@ -8005,6 +8364,8 @@
             case CHISELED_RED_SANDSTONE:
             case CHISELED_SANDSTONE:
             case CHISELED_STONE_BRICKS:
+            case CHISELED_TUFF:
+            case CHISELED_TUFF_BRICKS:
             case CLAY:
             case COAL_BLOCK:
             case COAL_ORE:
@@ -8019,6 +8380,7 @@
             case CRACKED_NETHER_BRICKS:
             case CRACKED_POLISHED_BLACKSTONE_BRICKS:
             case CRACKED_STONE_BRICKS:
+            case CRAFTER:
             case CRAFTING_TABLE:
             case CRIMSON_HYPHAE:
             case CRIMSON_NYLIUM:
@@ -8066,6 +8428,7 @@
             case EMERALD_ORE:
             case END_STONE:
             case END_STONE_BRICKS:
+            case EXPOSED_CHISELED_COPPER:
             case EXPOSED_COPPER:
             case EXPOSED_CUT_COPPER:
             case FIRE_CORAL_BLOCK:
@@ -8167,6 +8530,7 @@
             case ORANGE_SHULKER_BOX:
             case ORANGE_TERRACOTTA:
             case ORANGE_WOOL:
+            case OXIDIZED_CHISELED_COPPER:
             case OXIDIZED_COPPER:
             case OXIDIZED_CUT_COPPER:
             case PACKED_ICE:
@@ -8186,6 +8550,7 @@
             case POLISHED_DEEPSLATE:
             case POLISHED_DIORITE:
             case POLISHED_GRANITE:
+            case POLISHED_TUFF:
             case PRISMARINE:
             case PRISMARINE_BRICKS:
             case PUMPKIN:
@@ -8269,22 +8634,29 @@
             case SUSPICIOUS_SAND:
             case TARGET:
             case TERRACOTTA:
+            case TRIAL_SPAWNER:
             case TUBE_CORAL_BLOCK:
             case TUFF:
+            case TUFF_BRICKS:
             case VERDANT_FROGLIGHT:
             case WARPED_HYPHAE:
             case WARPED_NYLIUM:
             case WARPED_PLANKS:
             case WARPED_STEM:
             case WARPED_WART_BLOCK:
+            case WAXED_CHISELED_COPPER:
             case WAXED_COPPER_BLOCK:
             case WAXED_CUT_COPPER:
+            case WAXED_EXPOSED_CHISELED_COPPER:
             case WAXED_EXPOSED_COPPER:
             case WAXED_EXPOSED_CUT_COPPER:
+            case WAXED_OXIDIZED_CHISELED_COPPER:
             case WAXED_OXIDIZED_COPPER:
             case WAXED_OXIDIZED_CUT_COPPER:
+            case WAXED_WEATHERED_CHISELED_COPPER:
             case WAXED_WEATHERED_COPPER:
             case WAXED_WEATHERED_CUT_COPPER:
+            case WEATHERED_CHISELED_COPPER:
             case WEATHERED_COPPER:
             case WEATHERED_CUT_COPPER:
             case WET_SPONGE:
@@ -8300,7 +8672,7 @@
             case YELLOW_SHULKER_BOX:
             case YELLOW_TERRACOTTA:
             case YELLOW_WOOL:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_STONE:
             case LEGACY_GRASS:
             case LEGACY_DIRT:
@@ -8399,7 +8771,7 @@
             case LEGACY_BLACK_GLAZED_TERRACOTTA:
             case LEGACY_CONCRETE:
             case LEGACY_CONCRETE_POWDER:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -8438,12 +8810,12 @@
             case SAND:
             case WHITE_CONCRETE_POWDER:
             case YELLOW_CONCRETE_POWDER:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_SAND:
             case LEGACY_GRAVEL:
             case LEGACY_ANVIL:
             case LEGACY_CONCRETE_POWDER:
-                //</editor-fold>
+            //</editor-fold>
                 return true;
             default:
                 return false;
@@ -8456,7 +8828,7 @@
      * @return true if this material is an item
      */
     public boolean isItem() {
-        if (isFabricItem && !isFabricBlock) {
+        if (isForgeItem && !isForgeBlock) {
             return true;
         }
         switch (this) {
@@ -8608,7 +8980,7 @@
             case YELLOW_CANDLE_CAKE:
             case YELLOW_WALL_BANNER:
             case ZOMBIE_WALL_HEAD:
-                // ----- Legacy Separator -----
+            // ----- Legacy Separator -----
             case LEGACY_ACACIA_DOOR:
             case LEGACY_BED_BLOCK:
             case LEGACY_BEETROOT_BLOCK:
@@ -8661,7 +9033,7 @@
             case LEGACY_WATER:
             case LEGACY_WOODEN_DOOR:
             case LEGACY_WOOD_DOUBLE_STEP:
-                //</editor-fold>
+            //</editor-fold>
                 return false;
             default:
                 return true;
@@ -8693,20 +9065,16 @@
             case ACACIA_FENCE_GATE:
             case ACACIA_HANGING_SIGN:
             case ACACIA_SIGN:
-            case ACACIA_STAIRS:
             case ACACIA_TRAPDOOR:
             case ACACIA_WALL_HANGING_SIGN:
             case ACACIA_WALL_SIGN:
-            case ANDESITE_STAIRS:
             case ANVIL:
             case BAMBOO_BUTTON:
             case BAMBOO_DOOR:
             case BAMBOO_FENCE:
             case BAMBOO_FENCE_GATE:
             case BAMBOO_HANGING_SIGN:
-            case BAMBOO_MOSAIC_STAIRS:
             case BAMBOO_SIGN:
-            case BAMBOO_STAIRS:
             case BAMBOO_TRAPDOOR:
             case BAMBOO_WALL_HANGING_SIGN:
             case BAMBOO_WALL_SIGN:
@@ -8721,11 +9089,9 @@
             case BIRCH_FENCE_GATE:
             case BIRCH_HANGING_SIGN:
             case BIRCH_SIGN:
-            case BIRCH_STAIRS:
             case BIRCH_TRAPDOOR:
             case BIRCH_WALL_HANGING_SIGN:
             case BIRCH_WALL_SIGN:
-            case BLACKSTONE_STAIRS:
             case BLACK_BED:
             case BLACK_CANDLE:
             case BLACK_CANDLE_CAKE:
@@ -8736,7 +9102,6 @@
             case BLUE_CANDLE_CAKE:
             case BLUE_SHULKER_BOX:
             case BREWING_STAND:
-            case BRICK_STAIRS:
             case BROWN_BED:
             case BROWN_CANDLE:
             case BROWN_CANDLE_CAKE:
@@ -8756,18 +9121,18 @@
             case CHERRY_FENCE_GATE:
             case CHERRY_HANGING_SIGN:
             case CHERRY_SIGN:
-            case CHERRY_STAIRS:
             case CHERRY_TRAPDOOR:
             case CHERRY_WALL_HANGING_SIGN:
             case CHERRY_WALL_SIGN:
             case CHEST:
             case CHIPPED_ANVIL:
             case CHISELED_BOOKSHELF:
-            case COBBLED_DEEPSLATE_STAIRS:
-            case COBBLESTONE_STAIRS:
             case COMMAND_BLOCK:
             case COMPARATOR:
             case COMPOSTER:
+            case COPPER_DOOR:
+            case COPPER_TRAPDOOR:
+            case CRAFTER:
             case CRAFTING_TABLE:
             case CRIMSON_BUTTON:
             case CRIMSON_DOOR:
@@ -8775,11 +9140,9 @@
             case CRIMSON_FENCE_GATE:
             case CRIMSON_HANGING_SIGN:
             case CRIMSON_SIGN:
-            case CRIMSON_STAIRS:
             case CRIMSON_TRAPDOOR:
             case CRIMSON_WALL_HANGING_SIGN:
             case CRIMSON_WALL_SIGN:
-            case CUT_COPPER_STAIRS:
             case CYAN_BED:
             case CYAN_CANDLE:
             case CYAN_CANDLE_CAKE:
@@ -8791,27 +9154,22 @@
             case DARK_OAK_FENCE_GATE:
             case DARK_OAK_HANGING_SIGN:
             case DARK_OAK_SIGN:
-            case DARK_OAK_STAIRS:
             case DARK_OAK_TRAPDOOR:
             case DARK_OAK_WALL_HANGING_SIGN:
             case DARK_OAK_WALL_SIGN:
-            case DARK_PRISMARINE_STAIRS:
             case DAYLIGHT_DETECTOR:
-            case DEEPSLATE_BRICK_STAIRS:
+            case DECORATED_POT:
             case DEEPSLATE_REDSTONE_ORE:
-            case DEEPSLATE_TILE_STAIRS:
-            case DIORITE_STAIRS:
             case DISPENSER:
             case DRAGON_EGG:
             case DROPPER:
             case ENCHANTING_TABLE:
             case ENDER_CHEST:
-            case END_STONE_BRICK_STAIRS:
-            case EXPOSED_CUT_COPPER_STAIRS:
+            case EXPOSED_COPPER_DOOR:
+            case EXPOSED_COPPER_TRAPDOOR:
             case FLETCHING_TABLE:
             case FLOWER_POT:
             case FURNACE:
-            case GRANITE_STAIRS:
             case GRAY_BED:
             case GRAY_CANDLE:
             case GRAY_CANDLE_CAKE:
@@ -8832,7 +9190,6 @@
             case JUNGLE_FENCE_GATE:
             case JUNGLE_HANGING_SIGN:
             case JUNGLE_SIGN:
-            case JUNGLE_STAIRS:
             case JUNGLE_TRAPDOOR:
             case JUNGLE_WALL_HANGING_SIGN:
             case JUNGLE_WALL_SIGN:
@@ -8863,16 +9220,11 @@
             case MANGROVE_FENCE_GATE:
             case MANGROVE_HANGING_SIGN:
             case MANGROVE_SIGN:
-            case MANGROVE_STAIRS:
             case MANGROVE_TRAPDOOR:
             case MANGROVE_WALL_HANGING_SIGN:
             case MANGROVE_WALL_SIGN:
-            case MOSSY_COBBLESTONE_STAIRS:
-            case MOSSY_STONE_BRICK_STAIRS:
             case MOVING_PISTON:
-            case MUD_BRICK_STAIRS:
             case NETHER_BRICK_FENCE:
-            case NETHER_BRICK_STAIRS:
             case NOTE_BLOCK:
             case OAK_BUTTON:
             case OAK_DOOR:
@@ -8880,7 +9232,6 @@
             case OAK_FENCE_GATE:
             case OAK_HANGING_SIGN:
             case OAK_SIGN:
-            case OAK_STAIRS:
             case OAK_TRAPDOOR:
             case OAK_WALL_HANGING_SIGN:
             case OAK_WALL_SIGN:
@@ -8888,18 +9239,13 @@
             case ORANGE_CANDLE:
             case ORANGE_CANDLE_CAKE:
             case ORANGE_SHULKER_BOX:
-            case OXIDIZED_CUT_COPPER_STAIRS:
+            case OXIDIZED_COPPER_DOOR:
+            case OXIDIZED_COPPER_TRAPDOOR:
             case PINK_BED:
             case PINK_CANDLE:
             case PINK_CANDLE_CAKE:
             case PINK_SHULKER_BOX:
-            case POLISHED_ANDESITE_STAIRS:
-            case POLISHED_BLACKSTONE_BRICK_STAIRS:
             case POLISHED_BLACKSTONE_BUTTON:
-            case POLISHED_BLACKSTONE_STAIRS:
-            case POLISHED_DEEPSLATE_STAIRS:
-            case POLISHED_DIORITE_STAIRS:
-            case POLISHED_GRANITE_STAIRS:
             case POTTED_ACACIA_SAPLING:
             case POTTED_ALLIUM:
             case POTTED_AZALEA_BUSH:
@@ -8935,33 +9281,23 @@
             case POTTED_WHITE_TULIP:
             case POTTED_WITHER_ROSE:
             case POWDER_SNOW_CAULDRON:
-            case PRISMARINE_BRICK_STAIRS:
-            case PRISMARINE_STAIRS:
             case PUMPKIN:
             case PURPLE_BED:
             case PURPLE_CANDLE:
             case PURPLE_CANDLE_CAKE:
             case PURPLE_SHULKER_BOX:
-            case PURPUR_STAIRS:
-            case QUARTZ_STAIRS:
             case REDSTONE_ORE:
             case REDSTONE_WIRE:
             case RED_BED:
             case RED_CANDLE:
             case RED_CANDLE_CAKE:
-            case RED_NETHER_BRICK_STAIRS:
-            case RED_SANDSTONE_STAIRS:
             case RED_SHULKER_BOX:
             case REPEATER:
             case REPEATING_COMMAND_BLOCK:
             case RESPAWN_ANCHOR:
-            case SANDSTONE_STAIRS:
             case SHULKER_BOX:
             case SMITHING_TABLE:
             case SMOKER:
-            case SMOOTH_QUARTZ_STAIRS:
-            case SMOOTH_RED_SANDSTONE_STAIRS:
-            case SMOOTH_SANDSTONE_STAIRS:
             case SOUL_CAMPFIRE:
             case SPRUCE_BUTTON:
             case SPRUCE_DOOR:
@@ -8969,14 +9305,11 @@
             case SPRUCE_FENCE_GATE:
             case SPRUCE_HANGING_SIGN:
             case SPRUCE_SIGN:
-            case SPRUCE_STAIRS:
             case SPRUCE_TRAPDOOR:
             case SPRUCE_WALL_HANGING_SIGN:
             case SPRUCE_WALL_SIGN:
             case STONECUTTER:
-            case STONE_BRICK_STAIRS:
             case STONE_BUTTON:
-            case STONE_STAIRS:
             case STRUCTURE_BLOCK:
             case SWEET_BERRY_BUSH:
             case TNT:
@@ -8987,16 +9320,20 @@
             case WARPED_FENCE_GATE:
             case WARPED_HANGING_SIGN:
             case WARPED_SIGN:
-            case WARPED_STAIRS:
             case WARPED_TRAPDOOR:
             case WARPED_WALL_HANGING_SIGN:
             case WARPED_WALL_SIGN:
             case WATER_CAULDRON:
-            case WAXED_CUT_COPPER_STAIRS:
-            case WAXED_EXPOSED_CUT_COPPER_STAIRS:
-            case WAXED_OXIDIZED_CUT_COPPER_STAIRS:
-            case WAXED_WEATHERED_CUT_COPPER_STAIRS:
-            case WEATHERED_CUT_COPPER_STAIRS:
+            case WAXED_COPPER_DOOR:
+            case WAXED_COPPER_TRAPDOOR:
+            case WAXED_EXPOSED_COPPER_DOOR:
+            case WAXED_EXPOSED_COPPER_TRAPDOOR:
+            case WAXED_OXIDIZED_COPPER_DOOR:
+            case WAXED_OXIDIZED_COPPER_TRAPDOOR:
+            case WAXED_WEATHERED_COPPER_DOOR:
+            case WAXED_WEATHERED_COPPER_TRAPDOOR:
+            case WEATHERED_COPPER_DOOR:
+            case WEATHERED_COPPER_TRAPDOOR:
             case WHITE_BED:
             case WHITE_CANDLE:
             case WHITE_CANDLE_CAKE:
@@ -9470,8 +9807,11 @@
             case CHISELED_BOOKSHELF:
             case CHISELED_POLISHED_BLACKSTONE:
             case CHISELED_STONE_BRICKS:
+            case CHISELED_TUFF:
+            case CHISELED_TUFF_BRICKS:
             case CRACKED_POLISHED_BLACKSTONE_BRICKS:
             case CRACKED_STONE_BRICKS:
+            case CRAFTER:
             case DARK_PRISMARINE:
             case DARK_PRISMARINE_SLAB:
             case DARK_PRISMARINE_STAIRS:
@@ -9518,6 +9858,10 @@
             case POLISHED_GRANITE:
             case POLISHED_GRANITE_SLAB:
             case POLISHED_GRANITE_STAIRS:
+            case POLISHED_TUFF:
+            case POLISHED_TUFF_SLAB:
+            case POLISHED_TUFF_STAIRS:
+            case POLISHED_TUFF_WALL:
             case PRISMARINE:
             case PRISMARINE_BRICKS:
             case PRISMARINE_BRICK_SLAB:
@@ -9538,6 +9882,13 @@
             case STONE_STAIRS:
             case TUBE_CORAL_BLOCK:
             case TUFF:
+            case TUFF_BRICKS:
+            case TUFF_BRICK_SLAB:
+            case TUFF_BRICK_STAIRS:
+            case TUFF_BRICK_WALL:
+            case TUFF_SLAB:
+            case TUFF_STAIRS:
+            case TUFF_WALL:
                 return 1.5F;
             case BLACK_CONCRETE:
             case BLUE_CONCRETE:
@@ -9753,10 +10104,15 @@
             case BIRCH_TRAPDOOR:
             case CHERRY_DOOR:
             case CHERRY_TRAPDOOR:
+            case CHISELED_COPPER:
             case COAL_ORE:
             case CONDUIT:
             case COPPER_BLOCK:
+            case COPPER_BULB:
+            case COPPER_DOOR:
+            case COPPER_GRATE:
             case COPPER_ORE:
+            case COPPER_TRAPDOOR:
             case CRIMSON_DOOR:
             case CRIMSON_TRAPDOOR:
             case CUT_COPPER:
@@ -9773,7 +10129,12 @@
             case END_STONE_BRICK_SLAB:
             case END_STONE_BRICK_STAIRS:
             case END_STONE_BRICK_WALL:
+            case EXPOSED_CHISELED_COPPER:
             case EXPOSED_COPPER:
+            case EXPOSED_COPPER_BULB:
+            case EXPOSED_COPPER_DOOR:
+            case EXPOSED_COPPER_GRATE:
+            case EXPOSED_COPPER_TRAPDOOR:
             case EXPOSED_CUT_COPPER:
             case EXPOSED_CUT_COPPER_SLAB:
             case EXPOSED_CUT_COPPER_STAIRS:
@@ -9793,7 +10154,12 @@
             case OAK_DOOR:
             case OAK_TRAPDOOR:
             case OBSERVER:
+            case OXIDIZED_CHISELED_COPPER:
             case OXIDIZED_COPPER:
+            case OXIDIZED_COPPER_BULB:
+            case OXIDIZED_COPPER_DOOR:
+            case OXIDIZED_COPPER_GRATE:
+            case OXIDIZED_COPPER_TRAPDOOR:
             case OXIDIZED_CUT_COPPER:
             case OXIDIZED_CUT_COPPER_SLAB:
             case OXIDIZED_CUT_COPPER_STAIRS:
@@ -9804,23 +10170,48 @@
             case SPRUCE_TRAPDOOR:
             case WARPED_DOOR:
             case WARPED_TRAPDOOR:
+            case WAXED_CHISELED_COPPER:
             case WAXED_COPPER_BLOCK:
+            case WAXED_COPPER_BULB:
+            case WAXED_COPPER_DOOR:
+            case WAXED_COPPER_GRATE:
+            case WAXED_COPPER_TRAPDOOR:
             case WAXED_CUT_COPPER:
             case WAXED_CUT_COPPER_SLAB:
             case WAXED_CUT_COPPER_STAIRS:
+            case WAXED_EXPOSED_CHISELED_COPPER:
             case WAXED_EXPOSED_COPPER:
+            case WAXED_EXPOSED_COPPER_BULB:
+            case WAXED_EXPOSED_COPPER_DOOR:
+            case WAXED_EXPOSED_COPPER_GRATE:
+            case WAXED_EXPOSED_COPPER_TRAPDOOR:
             case WAXED_EXPOSED_CUT_COPPER:
             case WAXED_EXPOSED_CUT_COPPER_SLAB:
             case WAXED_EXPOSED_CUT_COPPER_STAIRS:
+            case WAXED_OXIDIZED_CHISELED_COPPER:
             case WAXED_OXIDIZED_COPPER:
+            case WAXED_OXIDIZED_COPPER_BULB:
+            case WAXED_OXIDIZED_COPPER_DOOR:
+            case WAXED_OXIDIZED_COPPER_GRATE:
+            case WAXED_OXIDIZED_COPPER_TRAPDOOR:
             case WAXED_OXIDIZED_CUT_COPPER:
             case WAXED_OXIDIZED_CUT_COPPER_SLAB:
             case WAXED_OXIDIZED_CUT_COPPER_STAIRS:
+            case WAXED_WEATHERED_CHISELED_COPPER:
             case WAXED_WEATHERED_COPPER:
+            case WAXED_WEATHERED_COPPER_BULB:
+            case WAXED_WEATHERED_COPPER_DOOR:
+            case WAXED_WEATHERED_COPPER_GRATE:
+            case WAXED_WEATHERED_COPPER_TRAPDOOR:
             case WAXED_WEATHERED_CUT_COPPER:
             case WAXED_WEATHERED_CUT_COPPER_SLAB:
             case WAXED_WEATHERED_CUT_COPPER_STAIRS:
+            case WEATHERED_CHISELED_COPPER:
             case WEATHERED_COPPER:
+            case WEATHERED_COPPER_BULB:
+            case WEATHERED_COPPER_DOOR:
+            case WEATHERED_COPPER_GRATE:
+            case WEATHERED_COPPER_TRAPDOOR:
             case WEATHERED_CUT_COPPER:
             case WEATHERED_CUT_COPPER_SLAB:
             case WEATHERED_CUT_COPPER_STAIRS:
@@ -9892,6 +10283,7 @@
             case NETHERITE_BLOCK:
             case OBSIDIAN:
             case RESPAWN_ANCHOR:
+            case TRIAL_SPAWNER:
                 return 50.0F;
             case REINFORCED_DEEPSLATE:
                 return 55.0F;
@@ -10534,6 +10926,7 @@
             case WARPED_TRAPDOOR:
                 return 3.0F;
             case BLAST_FURNACE:
+            case CRAFTER:
             case DISPENSER:
             case DROPPER:
             case FURNACE:
@@ -10588,10 +10981,13 @@
             case BRICK_WALL:
             case BUBBLE_CORAL_BLOCK:
             case CHAIN:
+            case CHISELED_COPPER:
             case CHISELED_DEEPSLATE:
             case CHISELED_NETHER_BRICKS:
             case CHISELED_POLISHED_BLACKSTONE:
             case CHISELED_STONE_BRICKS:
+            case CHISELED_TUFF:
+            case CHISELED_TUFF_BRICKS:
             case COAL_BLOCK:
             case COBBLED_DEEPSLATE:
             case COBBLED_DEEPSLATE_SLAB:
@@ -10602,6 +10998,10 @@
             case COBBLESTONE_STAIRS:
             case COBBLESTONE_WALL:
             case COPPER_BLOCK:
+            case COPPER_BULB:
+            case COPPER_DOOR:
+            case COPPER_GRATE:
+            case COPPER_TRAPDOOR:
             case CRACKED_DEEPSLATE_BRICKS:
             case CRACKED_DEEPSLATE_TILES:
             case CRACKED_NETHER_BRICKS:
@@ -10635,7 +11035,12 @@
             case DIORITE_STAIRS:
             case DIORITE_WALL:
             case EMERALD_BLOCK:
+            case EXPOSED_CHISELED_COPPER:
             case EXPOSED_COPPER:
+            case EXPOSED_COPPER_BULB:
+            case EXPOSED_COPPER_DOOR:
+            case EXPOSED_COPPER_GRATE:
+            case EXPOSED_COPPER_TRAPDOOR:
             case EXPOSED_CUT_COPPER:
             case EXPOSED_CUT_COPPER_SLAB:
             case EXPOSED_CUT_COPPER_STAIRS:
@@ -10665,7 +11070,12 @@
             case NETHER_BRICK_SLAB:
             case NETHER_BRICK_STAIRS:
             case NETHER_BRICK_WALL:
+            case OXIDIZED_CHISELED_COPPER:
             case OXIDIZED_COPPER:
+            case OXIDIZED_COPPER_BULB:
+            case OXIDIZED_COPPER_DOOR:
+            case OXIDIZED_COPPER_GRATE:
+            case OXIDIZED_COPPER_TRAPDOOR:
             case OXIDIZED_CUT_COPPER:
             case OXIDIZED_CUT_COPPER_SLAB:
             case OXIDIZED_CUT_COPPER_STAIRS:
@@ -10691,6 +11101,10 @@
             case POLISHED_GRANITE:
             case POLISHED_GRANITE_SLAB:
             case POLISHED_GRANITE_STAIRS:
+            case POLISHED_TUFF:
+            case POLISHED_TUFF_SLAB:
+            case POLISHED_TUFF_STAIRS:
+            case POLISHED_TUFF_WALL:
             case PRISMARINE:
             case PRISMARINE_BRICKS:
             case PRISMARINE_BRICK_SLAB:
@@ -10733,23 +11147,55 @@
             case STONE_STAIRS:
             case TUBE_CORAL_BLOCK:
             case TUFF:
+            case TUFF_BRICKS:
+            case TUFF_BRICK_SLAB:
+            case TUFF_BRICK_STAIRS:
+            case TUFF_BRICK_WALL:
+            case TUFF_SLAB:
+            case TUFF_STAIRS:
+            case TUFF_WALL:
+            case WAXED_CHISELED_COPPER:
             case WAXED_COPPER_BLOCK:
+            case WAXED_COPPER_BULB:
+            case WAXED_COPPER_DOOR:
+            case WAXED_COPPER_GRATE:
+            case WAXED_COPPER_TRAPDOOR:
             case WAXED_CUT_COPPER:
             case WAXED_CUT_COPPER_SLAB:
             case WAXED_CUT_COPPER_STAIRS:
+            case WAXED_EXPOSED_CHISELED_COPPER:
             case WAXED_EXPOSED_COPPER:
+            case WAXED_EXPOSED_COPPER_BULB:
+            case WAXED_EXPOSED_COPPER_DOOR:
+            case WAXED_EXPOSED_COPPER_GRATE:
+            case WAXED_EXPOSED_COPPER_TRAPDOOR:
             case WAXED_EXPOSED_CUT_COPPER:
             case WAXED_EXPOSED_CUT_COPPER_SLAB:
             case WAXED_EXPOSED_CUT_COPPER_STAIRS:
+            case WAXED_OXIDIZED_CHISELED_COPPER:
             case WAXED_OXIDIZED_COPPER:
+            case WAXED_OXIDIZED_COPPER_BULB:
+            case WAXED_OXIDIZED_COPPER_DOOR:
+            case WAXED_OXIDIZED_COPPER_GRATE:
+            case WAXED_OXIDIZED_COPPER_TRAPDOOR:
             case WAXED_OXIDIZED_CUT_COPPER:
             case WAXED_OXIDIZED_CUT_COPPER_SLAB:
             case WAXED_OXIDIZED_CUT_COPPER_STAIRS:
+            case WAXED_WEATHERED_CHISELED_COPPER:
             case WAXED_WEATHERED_COPPER:
+            case WAXED_WEATHERED_COPPER_BULB:
+            case WAXED_WEATHERED_COPPER_DOOR:
+            case WAXED_WEATHERED_COPPER_GRATE:
+            case WAXED_WEATHERED_COPPER_TRAPDOOR:
             case WAXED_WEATHERED_CUT_COPPER:
             case WAXED_WEATHERED_CUT_COPPER_SLAB:
             case WAXED_WEATHERED_CUT_COPPER_STAIRS:
+            case WEATHERED_CHISELED_COPPER:
             case WEATHERED_COPPER:
+            case WEATHERED_COPPER_BULB:
+            case WEATHERED_COPPER_DOOR:
+            case WEATHERED_COPPER_GRATE:
+            case WEATHERED_COPPER_TRAPDOOR:
             case WEATHERED_CUT_COPPER:
             case WEATHERED_CUT_COPPER_SLAB:
             case WEATHERED_CUT_COPPER_STAIRS:
@@ -10761,6 +11207,8 @@
             case END_STONE_BRICK_STAIRS:
             case END_STONE_BRICK_WALL:
                 return 9.0F;
+            case TRIAL_SPAWNER:
+                return 50.0F;
             case LAVA:
             case WATER:
                 return 100.0F;
@@ -11000,7 +11448,7 @@
         if (isBlock) {
             Material material = BY_NAME.get(materialName);
             if (material != null){
-                material.isFabricBlock = true;
+                material.isForgeBlock = true;
             }else {
                 material = MohistDynamEnum.addEnum(Material.class, materialName, List.of(Integer.TYPE, Integer.TYPE, Boolean.TYPE, Boolean.TYPE), List.of(id, stack, isBlock, isItem));
             }
@@ -11014,4 +11462,4 @@
             return material;
         }
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/Raid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Raid.java b/src/main/java/org/bukkit/Raid.java
--- a/src/main/java/org/bukkit/Raid.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Raid.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit;
 
-import org.bukkit.entity.Raider;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import org.bukkit.entity.Raider;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a raid event.
Index: src/main/java/org/bukkit/WorldCreator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
--- a/src/main/java/org/bukkit/WorldCreator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/WorldCreator.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit;
 
+import com.google.common.base.Preconditions;
+import java.util.Random;
 import org.bukkit.command.CommandSender;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
@@ -7,8 +9,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Random;
-
 /**
  * Represents various types of options that may be used to create a world.
  */
@@ -22,6 +22,7 @@
     private boolean generateStructures = true;
     private String generatorSettings = "";
     private boolean hardcore = false;
+    private boolean keepSpawnInMemory = true;
 
     /**
      * Creates an empty WorldCreationOptions for the given world name
@@ -45,9 +46,7 @@
      */
     @NotNull
     public WorldCreator copy(@NotNull World world) {
-        if (world == null) {
-            throw new IllegalArgumentException("World cannot be null");
-        }
+        Preconditions.checkArgument(name != null, "World name cannot be null");
 
         seed = world.getSeed();
         environment = world.getEnvironment();
@@ -68,9 +67,7 @@
      */
     @NotNull
     public WorldCreator copy(@NotNull WorldCreator creator) {
-        if (creator == null) {
-            throw new IllegalArgumentException("Creator cannot be null");
-        }
+        Preconditions.checkArgument(name != null, "World name cannot be null");
 
         seed = creator.seed();
         environment = creator.environment();
@@ -80,6 +77,7 @@
         generateStructures = creator.generateStructures();
         generatorSettings = creator.generatorSettings();
         hardcore = creator.hardcore();
+        keepSpawnInMemory = creator.keepSpawnInMemory();
 
         return this;
     }
@@ -322,7 +320,7 @@
      * @param generatorSettings The settings that should be used by the
      * generator
      * @return This object, for chaining
-     * @see <a href="https://minecraft.gamepedia.com/Custom_dimension">Custom
+     * @see <a href="https://minecraft.wiki/w/Custom_dimension">Custom
      * dimension</a> (scroll to "When the generator ID type is
      * <code>minecraft:flat</code>)"
      */
@@ -393,6 +391,33 @@
         return hardcore;
     }
 
+    /**
+     * Sets whether the spawn chunks will be kept loaded. <br>
+     * Setting this to false will also stop the spawn chunks from being generated
+     * when creating a new world.
+     * <p>
+     * Has little performance benefit unless paired with a {@link ChunkGenerator}
+     * that overrides {@link ChunkGenerator#getFixedSpawnLocation(World, Random)}.
+     *
+     * @param keepSpawnInMemory Whether the spawn chunks will be kept loaded
+     * @return This object, for chaining
+     */
+    @NotNull
+    public WorldCreator keepSpawnInMemory(boolean keepSpawnInMemory) {
+        this.keepSpawnInMemory = keepSpawnInMemory;
+
+        return this;
+    }
+
+    /**
+     * Gets whether or not the spawn chunks will be kept loaded.
+     *
+     * @return True if the spawn chunks will be kept loaded
+     */
+    public boolean keepSpawnInMemory() {
+        return keepSpawnInMemory;
+    }
+
     /**
      * Creates a world with the specified options.
      * <p>
@@ -435,12 +460,9 @@
      */
     @Nullable
     public static ChunkGenerator getGeneratorForName(@NotNull String world, @Nullable String name, @Nullable CommandSender output) {
+        Preconditions.checkArgument(world != null, "World name must be specified");
         ChunkGenerator result = null;
 
-        if (world == null) {
-            throw new IllegalArgumentException("World name must be specified");
-        }
-
         if (output == null) {
             output = Bukkit.getConsoleSender();
         }
@@ -480,12 +502,9 @@
      */
     @Nullable
     public static BiomeProvider getBiomeProviderForName(@NotNull String world, @Nullable String name, @Nullable CommandSender output) {
+        Preconditions.checkArgument(world != null, "World name must be specified");
         BiomeProvider result = null;
 
-        if (world == null) {
-            throw new IllegalArgumentException("World name must be specified");
-        }
-
         if (output == null) {
             output = Bukkit.getConsoleSender();
         }
Index: src/main/java/org/bukkit/OfflinePlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
--- a/src/main/java/org/bukkit/OfflinePlayer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/OfflinePlayer.java	(date 1703956060000)
@@ -1,5 +1,9 @@
 package org.bukkit;
 
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Date;
+import java.util.UUID;
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.entity.AnimalTamer;
@@ -10,11 +14,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.time.Duration;
-import java.time.Instant;
-import java.util.Date;
-import java.util.UUID;
-
 /**
  * Represents a reference to a player identity and the data belonging to a
  * player that is stored on the disk and can, thus, be retrieved without the
Index: src/main/java/org/bukkit/Instrument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Instrument.java b/src/main/java/org/bukkit/Instrument.java
--- a/src/main/java/org/bukkit/Instrument.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Instrument.java	(date 1703956060000)
@@ -1,119 +1,131 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 public enum Instrument {
 
     /**
      * Piano is the standard instrument for a note block.
      */
-    PIANO(0x0),
+    PIANO(0x0, Sound.BLOCK_NOTE_BLOCK_HARP),
     /**
      * Bass drum is normally played when a note block is on top of a
      * stone-like block.
      */
-    BASS_DRUM(0x1),
+    BASS_DRUM(0x1, Sound.BLOCK_NOTE_BLOCK_BASEDRUM),
     /**
      * Snare drum is normally played when a note block is on top of a sandy
      * block.
      */
-    SNARE_DRUM(0x2),
+    SNARE_DRUM(0x2, Sound.BLOCK_NOTE_BLOCK_SNARE),
     /**
      * Sticks are normally played when a note block is on top of a glass
      * block.
      */
-    STICKS(0x3),
+    STICKS(0x3, Sound.BLOCK_NOTE_BLOCK_HAT),
     /**
      * Bass guitar is normally played when a note block is on top of a wooden
      * block.
      */
-    BASS_GUITAR(0x4),
+    BASS_GUITAR(0x4, Sound.BLOCK_NOTE_BLOCK_BASS),
     /**
      * Flute is normally played when a note block is on top of a clay block.
      */
-    FLUTE(0x5),
+    FLUTE(0x5, Sound.BLOCK_NOTE_BLOCK_FLUTE),
     /**
      * Bell is normally played when a note block is on top of a gold block.
      */
-    BELL(0x6),
+    BELL(0x6, Sound.BLOCK_NOTE_BLOCK_BELL),
     /**
      * Guitar is normally played when a note block is on top of a woolen block.
      */
-    GUITAR(0x7),
+    GUITAR(0x7, Sound.BLOCK_NOTE_BLOCK_GUITAR),
     /**
      * Chime is normally played when a note block is on top of a packed ice
      * block.
      */
-    CHIME(0x8),
+    CHIME(0x8, Sound.BLOCK_NOTE_BLOCK_CHIME),
     /**
      * Xylophone is normally played when a note block is on top of a bone block.
      */
-    XYLOPHONE(0x9),
+    XYLOPHONE(0x9, Sound.BLOCK_NOTE_BLOCK_XYLOPHONE),
     /**
      * Iron Xylophone is normally played when a note block is on top of a iron block.
      */
-    IRON_XYLOPHONE(0xA),
+    IRON_XYLOPHONE(0xA, Sound.BLOCK_NOTE_BLOCK_IRON_XYLOPHONE),
     /**
      * Cow Bell is normally played when a note block is on top of a soul sand block.
      */
-    COW_BELL(0xB),
+    COW_BELL(0xB, Sound.BLOCK_NOTE_BLOCK_COW_BELL),
     /**
      * Didgeridoo is normally played when a note block is on top of a pumpkin block.
      */
-    DIDGERIDOO(0xC),
+    DIDGERIDOO(0xC, Sound.BLOCK_NOTE_BLOCK_DIDGERIDOO),
     /**
      * Bit is normally played when a note block is on top of a emerald block.
      */
-    BIT(0xD),
+    BIT(0xD, Sound.BLOCK_NOTE_BLOCK_BIT),
     /**
      * Banjo is normally played when a note block is on top of a hay block.
      */
-    BANJO(0xE),
+    BANJO(0xE, Sound.BLOCK_NOTE_BLOCK_BANJO),
     /**
      * Pling is normally played when a note block is on top of a glowstone block.
      */
-    PLING(0xF),
+    PLING(0xF, Sound.BLOCK_NOTE_BLOCK_PLING),
     /**
      * Zombie is normally played when a Zombie Head is on top of the note block.
      */
-    ZOMBIE,
+    ZOMBIE(Sound.BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE),
     /**
      * Skeleton is normally played when a Skeleton Head is on top of the note block.
      */
-    SKELETON,
+    SKELETON(Sound.BLOCK_NOTE_BLOCK_IMITATE_SKELETON),
     /**
      * Creeper is normally played when a Creeper Head is on top of the note block.
      */
-    CREEPER,
+    CREEPER(Sound.BLOCK_NOTE_BLOCK_IMITATE_CREEPER),
     /**
      * Dragon is normally played when a Dragon Head is on top of the note block.
      */
-    DRAGON,
+    DRAGON(Sound.BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON),
     /**
      * Wither Skeleton is normally played when a Wither Skeleton Head is on top of the note block.
      */
-    WITHER_SKELETON,
+    WITHER_SKELETON(Sound.BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON),
     /**
      * Piglin is normally played when a Piglin Head is on top of the note block.
      */
-    PIGLIN,
+    PIGLIN(Sound.BLOCK_NOTE_BLOCK_IMITATE_PIGLIN),
     /**
      * Custom Sound is normally played when a Player Head with the required data is on top of the note block.
      */
-    CUSTOM_HEAD;
+    CUSTOM_HEAD(null);
 
     private final byte type;
+    private final Sound sound;
     private static final Map<Byte, Instrument> BY_DATA = Maps.newHashMap();
 
-    private Instrument() {
-        this(-1);
+    private Instrument(final Sound sound) {
+        this(-1, sound);
     }
 
-    private Instrument(final int type) {
+    private Instrument(final int type, final Sound sound) {
         this.type = (byte) type;
+        this.sound = sound;
+    }
+
+    /**
+     * Gets the sound associated with this instrument. <br>
+     * Will be null for {@link Instrument#CUSTOM_HEAD}
+     *
+     * @return the sound or null
+     */
+    @Nullable
+    public Sound getSound() {
+        return this.sound;
     }
 
     /**
Index: src/main/java/org/bukkit/Statistic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
--- a/src/main/java/org/bukkit/Statistic.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Statistic.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Locale;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a countable statistic, which is tracked by the server.
Index: src/main/java/org/bukkit/GameMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/GameMode.java b/src/main/java/org/bukkit/GameMode.java
--- a/src/main/java/org/bukkit/GameMode.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/GameMode.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
+import java.util.Map;
 import org.bukkit.entity.HumanEntity;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * Represents the various type of game modes that {@link HumanEntity}s may
  * have
Index: src/main/java/org/bukkit/Tag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
--- a/src/main/java/org/bukkit/Tag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Tag.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit;
 
+import java.util.Set;
 import org.bukkit.entity.EntityType;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Represents a tag that may be defined by the server or a resource pack to
  * group like things together.
@@ -963,7 +962,18 @@
      * Vanilla tag representing entities which are not controlled by their mount.
      */
     Tag<EntityType> ENTITY_TYPES_NON_CONTROLLING_RIDER = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("non_controlling_rider"), EntityType.class);
-
+    /**
+     * Vanilla tag representing entities which deflect arrows.
+     */
+    Tag<EntityType> ENTITY_TYPES_DEFLECTS_ARROWS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("deflects_arrows"), EntityType.class);
+    /**
+     * Vanilla tag representing entities which deflect tridents.
+     */
+    Tag<EntityType> ENTITY_TYPES_DEFLECTS_TRIDENTS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("deflects_tridents"), EntityType.class);
+    /**
+     * Vanilla tag representing entities which can turn in boats.
+     */
+    Tag<EntityType> ENTITY_TYPES_CAN_TURN_IN_BOATS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("can_turn_in_boats"), EntityType.class);
     /**
      * Returns whether or not this tag has an entry for the specified item.
      *
Index: src/main/java/org/bukkit/TreeType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/TreeType.java b/src/main/java/org/bukkit/TreeType.java
--- a/src/main/java/org/bukkit/TreeType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/TreeType.java	(date 1703956060000)
@@ -98,7 +98,7 @@
      */
     CHERRY,
     /**
-     * Modded tree
+     * Custom tree
      */
-    MODDED
+    CUSTOM
 }
Index: src/main/java/org/bukkit/StructureType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/StructureType.java b/src/main/java/org/bukkit/StructureType.java
--- a/src/main/java/org/bukkit/StructureType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/StructureType.java	(date 1703956060000)
@@ -3,13 +3,12 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableMap;
-import org.bukkit.map.MapCursor;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
+import org.bukkit.map.MapCursor;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * This class handles the creation and storage of all structure types for
Index: src/main/java/org/bukkit/WorldType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/WorldType.java b/src/main/java/org/bukkit/WorldType.java
--- a/src/main/java/org/bukkit/WorldType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/WorldType.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
+import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * Represents various types of worlds that may exist
  */
Index: src/main/java/org/bukkit/Color.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Color.java b/src/main/java/org/bukkit/Color.java
--- a/src/main/java/org/bukkit/Color.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Color.java	(date 1703956060000)
@@ -2,15 +2,14 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.Arrays;
+import java.util.Map;
+import java.util.Objects;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Arrays;
-import java.util.Map;
-import java.util.Objects;
-
 /**
  * A container for a color palette. This class is immutable; the set methods
  * return a new color. The color names listed as fields are HTML4 standards,
@@ -207,6 +206,7 @@
         Preconditions.checkArgument(blue >= 0 && blue <= BIT_MASK, "Blue[%s] is not between 0-255", blue);
 
         this.alpha = (byte) alpha;
+
         this.red = (byte) red;
         this.green = (byte) green;
         this.blue = (byte) blue;
Index: src/main/java/org/bukkit/Bukkit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
--- a/src/main/java/org/bukkit/Bukkit.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/Bukkit.java	(date 1703956060000)
@@ -1,6 +1,20 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableList;
+import com.mohistmc.mohist.Mohist;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.Serializable;
+import java.net.InetAddress;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.function.Consumer;
+import java.util.logging.Logger;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -22,6 +36,7 @@
 import org.bukkit.help.HelpMap;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.ItemCraftResult;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Merchant;
@@ -44,20 +59,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.Serializable;
-import java.net.InetAddress;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Consumer;
-import java.util.logging.Logger;
-
 /**
  * Represents the Bukkit core, for version and Server singleton handling
  */
@@ -92,7 +93,7 @@
         }
 
         Bukkit.server = server;
-        server.getLogger().info("This server is running " + getName() + " version " + getVersion() + " (Implementing API version " + getBukkitVersion() + ")");
+        server.getLogger().info("This server is running " + getName() + " version " + getVersion() + " (Implementing API version " + getBukkitVersion() + ", Forge version " + Mohist.versionInfo.forge() + ")");
     }
 
     /**
@@ -280,6 +281,16 @@
         return server.getDataPackManager();
     }
 
+    /**
+     * Get the ServerTick Manager.
+     *
+     * @return the manager
+     */
+    @NotNull
+    public static ServerTickManager getServerTickManager() {
+        return server.getServerTickManager();
+    }
+
     /**
      * Gets the server resource pack uri, or empty string if not specified.
      *
@@ -944,6 +955,56 @@
         return server.getCraftingRecipe(craftingMatrix, world);
     }
 
+    /**
+     * Get the crafted item using the list of {@link ItemStack} provided.
+     *
+     * <p>The list is formatted as a crafting matrix where the index follow
+     * the pattern below:</p>
+     *
+     * <pre>
+     * [ 0 1 2 ]
+     * [ 3 4 5 ]
+     * [ 6 7 8 ]
+     * </pre>
+     *
+     * <p>The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting
+     * events.</p>
+     *
+     * <p>Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}
+     * initiating the crafting event.</p>
+     *
+     * @param craftingMatrix list of items to be crafted from.
+     *                       Must not contain more than 9 items.
+     * @param world The world the crafting takes place in.
+     * @param player The player to imitate the crafting event on.
+     * @return resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items.
+     */
+    @NotNull
+    public static ItemCraftResult craftItemResult(@NotNull ItemStack[] craftingMatrix, @NotNull World world, @NotNull Player player) {
+        return server.craftItemResult(craftingMatrix, world, player);
+    }
+    /**
+     * Get the crafted item using the list of {@link ItemStack} provided.
+     *
+     * <p>The list is formatted as a crafting matrix where the index follow
+     * the pattern below:</p>
+     *
+     * <pre>
+     * [ 0 1 2 ]
+     * [ 3 4 5 ]
+     * [ 6 7 8 ]
+     * </pre>
+     *
+     * @param craftingMatrix list of items to be crafted from.
+     *                       Must not contain more than 9 items.
+     * @param world The world the crafting takes place in.
+     * @return resulting {@link ItemCraftResult} containing the resulting item, matrix and any overflow items.
+     */
+    @NotNull
+    public static ItemCraftResult craftItemResult(@NotNull ItemStack[] craftingMatrix, @NotNull World world) {
+        return server.craftItemResult(craftingMatrix, world);
+    }
+
     /**
      * Get the crafted item using the list of {@link ItemStack} provided.
      *
@@ -974,6 +1035,29 @@
         return server.craftItem(craftingMatrix, world, player);
     }
 
+    /**
+     * Get the crafted item using the list of {@link ItemStack} provided.
+     *
+     * <p>The list is formatted as a crafting matrix where the index follow
+     * the pattern below:</p>
+     *
+     * <pre>
+     * [ 0 1 2 ]
+     * [ 3 4 5 ]
+     * [ 6 7 8 ]
+     * </pre>
+     *
+     * @param craftingMatrix list of items to be crafted from.
+     *                       Must not contain more than 9 items.
+     * @param world The world the crafting takes place in.
+     * @return the {@link ItemStack} resulting from the given crafting matrix, if no recipe is found
+     * an ItemStack of {@link Material#AIR} is returned.
+     */
+    @NotNull
+    public static ItemStack craftItem(@NotNull ItemStack[] craftingMatrix, @NotNull World world) {
+        return server.craftItem(craftingMatrix, world);
+    }
+
     /**
      * Get an iterator through the list of crafting recipes.
      *
@@ -1228,7 +1312,6 @@
         server.unbanIP(address);
     }
 
-
     /**
      * Bans the specified address from the server.
      *
@@ -1419,6 +1502,24 @@
         return server.createInventory(owner, size);
     }
 
+    // Paper start
+    /**
+     * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+     * specified size and title.
+     *
+     * @param owner the holder of the inventory, or null to indicate no holder
+     * @param size a multiple of 9 as the size of inventory to create
+     * @param title the title of the inventory, displayed when inventory is
+     *     viewed
+     * @return a new inventory
+     * @throws IllegalArgumentException if the size is not a multiple of 9
+     */
+    @NotNull
+    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, net.kyori.adventure.text.@NotNull Component title) throws IllegalArgumentException {
+        return server.createInventory(owner, size, title);
+    }
+    // Paper end
+
     /**
      * Creates an empty inventory of type {@link InventoryType#CHEST} with the
      * specified size and title.
@@ -1873,7 +1974,7 @@
      * @return new data instance
      */
     @NotNull
-    public static BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer) {
+    public static BlockData createBlockData(@NotNull Material material, @Nullable Consumer<? super BlockData> consumer) {
         return server.createBlockData(material, consumer);
     }
 
Index: src/main/java/org/bukkit/command/defaults/VersionCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java	(date 1703956060000)
@@ -2,6 +2,10 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import com.mohistmc.mohist.Mohist;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
@@ -10,10 +14,6 @@
 import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
 public class VersionCommand extends BukkitCommand {
     public VersionCommand(@NotNull String name) {
         super(name);
@@ -29,7 +29,7 @@
         if (!testPermission(sender)) return true;
 
         if (args.length == 0) {
-            sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
+            sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion()  + ", Forge version " + Mohist.versionInfo.forge() + ")");
         } else {
             StringBuilder name = new StringBuilder();
 
Index: src/main/java/org/bukkit/World.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
--- a/src/main/java/org/bukkit/World.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/World.java	(date 1703956060000)
@@ -1,5 +1,14 @@
 package org.bukkit;
 
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
 import org.bukkit.block.data.BlockData;
@@ -25,6 +34,7 @@
 import org.bukkit.persistence.PersistentDataHolder;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
+import org.bukkit.util.BiomeSearchResult;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.StructureSearchResult;
@@ -33,15 +43,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.io.File;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-
 /**
  * Represents a world, which may contain entities, chunks and blocks
  */
@@ -454,7 +455,7 @@
      * @return ItemDrop entity created as a result of this method
      */
     @NotNull
-    public Item dropItem(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<Item> function);
+    public Item dropItem(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<? super Item> function);
 
     /**
      * Drops an item at the specified {@link Location} with a random offset
@@ -476,7 +477,7 @@
      * @return ItemDrop entity created as a result of this method
      */
     @NotNull
-    public Item dropItemNaturally(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<Item> function);
+    public Item dropItemNaturally(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<? super Item> function);
 
     /**
      * Creates an {@link Arrow} entity at the given {@link Location}
@@ -522,7 +523,7 @@
      * @param delegate A class to call for each block changed as a result of
      *     this method
      * @return true if the tree was created successfully, otherwise false
-     * @see #generateTree(org.bukkit.Location, java.util.Random, org.bukkit.TreeType, org.bukkit.util.Consumer)
+     * @see #generateTree(org.bukkit.Location, java.util.Random, org.bukkit.TreeType, java.util.function.Consumer)
      * @deprecated this method does not handle tile entities (bee nests)
      */
     @Deprecated
@@ -598,6 +599,255 @@
     @NotNull
     public Collection<Entity> getEntitiesByClasses(@NotNull Class<?>... classes);
 
+    // Paper start
+    /**
+     * Gets nearby LivingEntities within the specified radius (bounding box)
+     * @param loc Center location
+     * @param radius Radius
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius);
+    }
+
+    /**
+     * Gets nearby LivingEntities within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius);
+    }
+
+    /**
+     * Gets nearby LivingEntities within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z radius
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius);
+    }
+
+    /**
+     * Gets nearby LivingEntities within the specified radius (bounding box)
+     * @param loc Center location
+     * @param radius X Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of living entities near location. This will always be a non-null collection
+     */
+    @NotNull
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius, @Nullable Predicate<LivingEntity> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius, predicate);
+    }
+
+    /**
+     * Gets nearby LivingEntities within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of living entities near location. This will always be a non-null collection
+     */
+    @NotNull
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius, predicate);
+    }
+
+    /**
+     * Gets nearby LivingEntities within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param loc Center location
+     * @param radius X/Y/Z Radius
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @return the collection of living entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param loc Center location
+     * @param radius X/Y/Z Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius, @Nullable Predicate<Player> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xzRadius X/Z Radius
+     * @param yRadius Y Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius, predicate);
+    }
+
+    /**
+     * Gets nearby players within the specified radius (bounding box)
+     * @param loc Center location
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @param predicate a predicate used to filter results
+     * @return the collection of players near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
+        return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius, predicate);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param loc Center location
+     * @param radius X/Y/Z radius to search within
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius) {
+        return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, null);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)
+     * @param clazz Type to filter by
+     * @param loc Center location
+     * @param xzRadius X/Z radius to search within
+     * @param yRadius Y radius to search within
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius) {
+        return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, null);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param loc Center location
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+        return getNearbyEntitiesByType(clazz, loc, xRadius, yRadius, zRadius, null);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param loc Center location
+     * @param radius X/Y/Z radius to search within
+     * @param predicate a predicate used to filter results
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius, @Nullable Predicate<T> predicate) {
+        return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, predicate);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)
+     * @param clazz Type to filter by
+     * @param loc Center location
+     * @param xzRadius X/Z radius to search within
+     * @param yRadius Y radius to search within
+     * @param predicate a predicate used to filter results
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
+        return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, predicate);
+    }
+
+    /**
+     * Gets all nearby entities of the specified type, within the specified radius (bounding box)
+     * @param clazz Type to filter by
+     * @param loc Center location
+     * @param xRadius X Radius
+     * @param yRadius Y Radius
+     * @param zRadius Z Radius
+     * @param predicate a predicate used to filter results
+     * @param <T> the entity type
+     * @return the collection of entities near location. This will always be a non-null collection.
+     */
+    @NotNull
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
+        if (clazz == null) {
+            clazz = Entity.class;
+        }
+        List<T> nearby = new ArrayList<>();
+        for (Entity bukkitEntity : getNearbyEntities(loc, xRadius, yRadius, zRadius)) {
+            //noinspection unchecked
+            if (clazz.isAssignableFrom(bukkitEntity.getClass()) && (predicate == null || predicate.test((T) bukkitEntity))) {
+                //noinspection unchecked
+                nearby.add((T) bukkitEntity);
+            }
+        }
+        return nearby;
+    }
+
     /**
      * Get a list of all players in this World
      *
@@ -606,6 +856,17 @@
     @NotNull
     public List<Player> getPlayers();
 
+    // Paper start - getEntity by UUID API
+    /**
+     * Gets an entity in this world by its UUID
+     *
+     * @param uuid the UUID of the entity
+     * @return the entity with the given UUID, or null if it isn't found
+     */
+    @Nullable
+    public Entity getEntity(@NotNull java.util.UUID uuid);
+    // Paper end
+
     /**
      * Returns a list of entities within a bounding box centered around a
      * Location.
@@ -642,7 +903,7 @@
      *     non-null collection.
      */
     @NotNull
-    public Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z, @Nullable Predicate<Entity> filter);
+    public Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z, @Nullable Predicate<? super Entity> filter);
 
     /**
      * Returns a list of entities within the given bounding box.
@@ -672,7 +933,7 @@
      *     be a non-null collection
      */
     @NotNull
-    public Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox, @Nullable Predicate<Entity> filter);
+    public Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox, @Nullable Predicate<? super Entity> filter);
 
     /**
      * Performs a ray trace that checks for entity collisions.
@@ -680,6 +941,9 @@
      * This may not consider entities in currently unloaded chunks. Some
      * implementations may impose artificial restrictions on the maximum
      * distance.
+     * <p>
+     * <b>Note:</b> Due to display entities having a zero size hitbox, this method will not detect them.
+     * To detect display entities use {@link #rayTraceEntities(Location, Vector, double, double)} with a positive raySize
      *
      * @param start the start position
      * @param direction the ray direction
@@ -702,7 +966,7 @@
      * @param direction the ray direction
      * @param maxDistance the maximum distance
      * @param raySize entity bounding boxes will be uniformly expanded (or
-     *     shrinked) by this value before doing collision checks
+     *     shrunk) by this value before doing collision checks
      * @return the closest ray trace hit result, or <code>null</code> if there
      *     is no hit
      * @see #rayTraceEntities(Location, Vector, double, double, Predicate)
@@ -716,6 +980,9 @@
      * This may not consider entities in currently unloaded chunks. Some
      * implementations may impose artificial restrictions on the maximum
      * distance.
+     * <p>
+     * <b>Note:</b> Due to display entities having a zero size hitbox, this method will not detect them.
+     * To detect display entities use {@link #rayTraceEntities(Location, Vector, double, double, Predicate)} with a positive raySize
      *
      * @param start the start position
      * @param direction the ray direction
@@ -727,7 +994,7 @@
      * @see #rayTraceEntities(Location, Vector, double, double, Predicate)
      */
     @Nullable
-    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, @Nullable Predicate<Entity> filter);
+    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, @Nullable Predicate<? super Entity> filter);
 
     /**
      * Performs a ray trace that checks for entity collisions.
@@ -740,14 +1007,14 @@
      * @param direction the ray direction
      * @param maxDistance the maximum distance
      * @param raySize entity bounding boxes will be uniformly expanded (or
-     *     shrinked) by this value before doing collision checks
+     *     shrunk) by this value before doing collision checks
      * @param filter only entities that fulfill this predicate are considered,
      *     or <code>null</code> to consider all entities
      * @return the closest ray trace hit result, or <code>null</code> if there
      *     is no hit
      */
     @Nullable
-    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize, @Nullable Predicate<Entity> filter);
+    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize, @Nullable Predicate<? super Entity> filter);
 
     /**
      * Performs a ray trace that checks for block collisions using the blocks'
@@ -836,14 +1103,14 @@
      * @param ignorePassableBlocks whether to ignore passable but collidable
      *     blocks (ex. tall grass, signs, fluids, ..)
      * @param raySize entity bounding boxes will be uniformly expanded (or
-     *     shrinked) by this value before doing collision checks
+     *     shrunk) by this value before doing collision checks
      * @param filter only entities that fulfill this predicate are considered,
      *     or <code>null</code> to consider all entities
      * @return the closest ray trace hit result with either a block or an
      *     entity, or <code>null</code> if there is no hit
      */
     @Nullable
-    public RayTraceResult rayTrace(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, @Nullable Predicate<Entity> filter);
+    public RayTraceResult rayTrace(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, @Nullable Predicate<? super Entity> filter);
 
     /**
      * Gets the default spawn {@link Location} of this world
@@ -1530,6 +1797,20 @@
     @NotNull
     public Difficulty getDifficulty();
 
+    /**
+     * Returns the view distance used for this world.
+     *
+     * @return the view distance used for this world
+     */
+    int getViewDistance();
+
+    /**
+     * Returns the simulation distance used for this world.
+     *
+     * @return the simulation distance used for this world
+     */
+    int getSimulationDistance();
+
     /**
      * Gets the folder of this world on disk.
      *
@@ -2103,6 +2384,18 @@
      */
     void setSpawnLimit(@NotNull SpawnCategory spawnCategory, int limit);
 
+    /**
+     * Play a note at the provided Location in the World. <br>
+     * This <i>will</i> work with cake.
+     * <p>
+     * This method will fail silently when called with {@link Instrument#CUSTOM_HEAD}.
+     *
+     * @param loc The location to play the note
+     * @param instrument The instrument
+     * @param note The note
+     */
+    void playNote(@NotNull Location loc, @NotNull Instrument instrument, @NotNull Note note);
+
     /**
      * Play a Sound at the provided Location in the World.
      * <p>
@@ -2142,6 +2435,37 @@
      */
     void playSound(@NotNull Location location, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch);
 
+    /**
+     * Play a Sound at the provided Location in the World. For sounds with multiple
+     * variations passing the same seed will always play the same variation.
+     * <p>
+     * This function will fail silently if Location or Sound are null.
+     *
+     * @param location The location to play the sound
+     * @param sound The sound to play
+     * @param category the category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    void playSound(@NotNull Location location, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+    /**
+     * Play a Sound at the provided Location in the World. For sounds with multiple
+     * variations passing the same seed will always play the same variation.
+     * <p>
+     * This function will fail silently if Location or Sound are null. No sound will
+     * be heard by the players if their clients do not have the respective sound for
+     * the value passed.
+     *
+     * @param location The location to play the sound
+     * @param sound The internal sound name to play
+     * @param category the category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    void playSound(@NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+
     /**
      * Play a Sound at the provided Location in the World.
      * <p>
@@ -2207,6 +2531,37 @@
      */
     void playSound(@NotNull Entity entity, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
 
+    /**
+     * Play a Sound at the location of the provided entity in the World. For sounds
+     * with multiple variations passing the same seed will always play the same
+     * variation.
+     * <p>
+     * This function will fail silently if Entity or Sound are null.
+     *
+     * @param entity The entity to play the sound
+     * @param sound The sound to play
+     * @param category The category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    void playSound(@NotNull Entity entity, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+    /**
+     * Play a Sound at the location of the provided entity in the World. For sounds
+     * with multiple variations passing the same seed will always play the same
+     * variation.
+     * <p>
+     * This function will fail silently if Entity or Sound are null.
+     *
+     * @param entity The entity to play the sound
+     * @param sound The sound to play
+     * @param category The category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    void playSound(@NotNull Entity entity, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+
     /**
      * Get an array containing the names of all the {@link GameRule}s.
      *
@@ -2639,53 +2994,59 @@
     @Nullable
     StructureSearchResult locateNearestStructure(@NotNull Location origin, @NotNull Structure structure, int radius, boolean findUnexplored);
 
-    // Spigot start
     /**
-     * Returns the view distance used for this world.
+     * Find the closest nearby location with a biome matching the provided
+     * {@link Biome}(s). Finding biomes can, and will, block if the world is looking
+     * in chunks that have not generated yet. This can lead to the world temporarily
+     * freezing while locating a biome.
+     * <p>
+     * <b>Note:</b> This will <i>not</i> reflect changes made to the world after
+     * generation, this method only sees the biome at the time of world generation.
+     * This will <i>not</i> load or generate chunks.
+     * <p>
+     * If multiple biomes are provided {@link BiomeSearchResult#getBiome()} will
+     * indicate which one was located.
+     * <p>
+     * This method will use a horizontal interval of 32 and a vertical interval of
+     * 64, equal to the /locate command.
      *
-     * @return the view distance used for this world
+     * @param origin where to start looking for a biome
+     * @param radius the radius, in blocks, around which to search
+     * @param biomes the biomes to search for
+     * @return a BiomeSearchResult containing the closest {@link Location} and
+     *         {@link Biome}, or null if no biome was found.
+     * @see #locateNearestBiome(Location, int, int, int, Biome...)
      */
-    int getViewDistance();
+    @Nullable
+    BiomeSearchResult locateNearestBiome(@NotNull Location origin, int radius, @NotNull Biome... biomes);
 
     /**
-     * Returns the simulation distance used for this world.
+     * Find the closest nearby location with a biome matching the provided
+     * {@link Biome}(s). Finding biomes can, and will, block if the world is looking
+     * in chunks that have not generated yet. This can lead to the world temporarily
+     * freezing while locating a biome.
+     * <p>
+     * <b>Note:</b> This will <i>not</i> reflect changes made to the world after
+     * generation, this method only sees the biome at the time of world generation.
+     * This will <i>not</i> load or generate chunks.
+     * <p>
+     * If multiple biomes are provided {@link BiomeSearchResult#getBiome()} will
+     * indicate which one was located. Higher values for {@code horizontalInterval}
+     * and {@code verticalInterval} will result in faster searches, but may lead to
+     * small biomes being missed.
      *
-     * @return the simulation distance used for this world
+     * @param origin             where to start looking for a biome
+     * @param radius             the radius, in blocks, around which to search
+     * @param horizontalInterval the horizontal distance between each check
+     * @param verticalInterval   the vertical distance between each check
+     * @param biomes             the biomes to search for
+     * @return a BiomeSearchResult containing the closest {@link Location} and
+     *         {@link Biome}, or null if no biome was found.
+     * @see #locateNearestBiome(Location, int, Biome...)
      */
-    int getSimulationDistance();
-    // Spigot end
-
-    // Spigot start
-    public class Spigot {
+    @Nullable
+    BiomeSearchResult locateNearestBiome(@NotNull Location origin, int radius, int horizontalInterval, int verticalInterval, @NotNull Biome... biomes);
 
-        /**
-         * Strikes lightning at the given {@link Location} and possibly without sound
-         *
-         * @param loc The location to strike lightning
-         * @param isSilent Whether this strike makes no sound
-         * @return The lightning entity.
-         */
-        @NotNull
-        public LightningStrike strikeLightning(@NotNull Location loc, boolean isSilent) {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        /**
-         * Strikes lightning at the given {@link Location} without doing damage and possibly without sound
-         *
-         * @param loc The location to strike lightning
-         * @param isSilent Whether this strike makes no sound
-         * @return The lightning entity.
-         */
-        @NotNull
-        public LightningStrike strikeLightningEffect(@NotNull Location loc, boolean isSilent) {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-    }
-
-    @NotNull
-    Spigot spigot();
-    // Spigot end
 
     /**
      * Finds the nearest raid close to the given location.
@@ -2751,7 +3112,7 @@
         CUSTOM(-999);
 
         private final int id;
-        private static final Map<Integer, Environment> lookup = new HashMap<Integer, Environment>();
+        private static final Map<Integer, Environment> lookup = new HashMap<>();
 
         private Environment(int id) {
             this.id = id;
@@ -2787,4 +3148,60 @@
             }
         }
     }
+
+    // Mohist start
+
+    /**
+     * Returns whether the current world was created by a plugin.
+     *
+     * @return whether the current world was created by a plugin
+     */
+    boolean isBukkit();
+    void setBukkit(boolean b);
+
+    /**
+     * Returns whether the current world was created by a mod.
+     *
+     * @return whether the current world was created by a mod
+     */
+    boolean isMods();
+
+    /**
+     * Returns the mod source for this world.
+     *
+     * @return the mod source for this world
+     */
+    String getModid();
+    // Mohist end
+
+    public class Spigot {
+
+        /**
+         * Strikes lightning at the given {@link Location} and possibly without sound
+         *
+         * @param loc The location to strike lightning
+         * @param isSilent Whether this strike makes no sound
+         * @return The lightning entity.
+         */
+        @NotNull
+        public LightningStrike strikeLightning(@NotNull Location loc, boolean isSilent) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Strikes lightning at the given {@link Location} without doing damage and possibly without sound
+         *
+         * @param loc The location to strike lightning
+         * @param isSilent Whether this strike makes no sound
+         * @return The lightning entity.
+         */
+        @NotNull
+        public LightningStrike strikeLightningEffect(@NotNull Location loc, boolean isSilent) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    Spigot spigot();
+    // Spigot end
 }
Index: src/main/java/org/bukkit/NamespacedKey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java
--- a/src/main/java/org/bukkit/NamespacedKey.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/NamespacedKey.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit;
 
 import com.google.common.base.Preconditions;
+import java.util.Locale;
+import java.util.UUID;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Locale;
-import java.util.UUID;
-
 /**
  * Represents a String based key which consists of two components - a namespace
  * and a key.
@@ -81,8 +80,11 @@
      */
     @Deprecated
     public NamespacedKey(@NotNull String namespace, @NotNull String key) {
+        // Mohsit TODO
+        /*
         Preconditions.checkArgument(namespace != null && isValidNamespace(namespace), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
         Preconditions.checkArgument(key != null && isValidKey(key), "Invalid key. Must be [a-z0-9/._-]: %s", key);
+         */
 
         this.namespace = namespace;
         this.key = key;
Index: src/main/java/org/bukkit/GameEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/GameEvent.java b/src/main/java/org/bukkit/GameEvent.java
--- a/src/main/java/org/bukkit/GameEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/GameEvent.java	(date 1703956060000)
@@ -2,13 +2,10 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents a generic Mojang game event.
@@ -97,6 +94,7 @@
     public static final GameEvent STEP = getEvent("step");
     public static final GameEvent SWIM = getEvent("swim");
     public static final GameEvent TELEPORT = getEvent("teleport");
+    public static final GameEvent UNEQUIP = getEvent("unequip");
     @Deprecated
     public static final GameEvent WOLF_SHAKING = getEvent("entity_action");
     public static final GameEvent RESONATE_1 = getEvent("resonate_1");
@@ -115,7 +113,6 @@
     public static final GameEvent RESONATE_14 = getEvent("resonate_14");
     public static final GameEvent RESONATE_15 = getEvent("resonate_15");
 
-
     /**
      * Returns a {@link GameEvent} by a {@link NamespacedKey}.
      *
@@ -124,6 +121,7 @@
      * @deprecated Use {@link Registry#get(NamespacedKey)} instead.
      */
     @Nullable
+    @Deprecated
     public static GameEvent getByKey(@NotNull NamespacedKey namespacedKey) {
         return Registry.GAME_EVENT.get(namespacedKey);
     }
@@ -135,9 +133,11 @@
      * @deprecated use {@link Registry#iterator()}.
      */
     @NotNull
+    @Deprecated
     public static Collection<GameEvent> values() {
         return Collections.unmodifiableCollection(Lists.newArrayList(Registry.GAME_EVENT));
     }
+
     @NotNull
     private static GameEvent getEvent(@NotNull String key) {
         NamespacedKey namespacedKey = NamespacedKey.minecraft(key);
Index: src/main/java/org/bukkit/material/TexturedMaterial.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/material/TexturedMaterial.java b/src/main/java/org/bukkit/material/TexturedMaterial.java
--- a/src/main/java/org/bukkit/material/TexturedMaterial.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/material/TexturedMaterial.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.material;
 
-import org.bukkit.Material;
-
 import java.util.List;
+import org.bukkit.Material;
 
 /**
  * Represents textured materials like steps and smooth bricks
Index: src/main/java/org/bukkit/material/MonsterEggs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/material/MonsterEggs.java b/src/main/java/org/bukkit/material/MonsterEggs.java
--- a/src/main/java/org/bukkit/material/MonsterEggs.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/material/MonsterEggs.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit.material;
 
-import org.bukkit.Material;
-
 import java.util.ArrayList;
 import java.util.List;
+import org.bukkit.Material;
 
 /**
  * Represents the different types of monster eggs
Index: src/main/java/org/bukkit/material/SmoothBrick.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/material/SmoothBrick.java b/src/main/java/org/bukkit/material/SmoothBrick.java
--- a/src/main/java/org/bukkit/material/SmoothBrick.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/material/SmoothBrick.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit.material;
 
-import org.bukkit.Material;
-
 import java.util.ArrayList;
 import java.util.List;
+import org.bukkit.Material;
 
 /**
  * Represents the different types of smooth bricks.
Index: src/main/java/org/bukkit/material/Vine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/material/Vine.java b/src/main/java/org/bukkit/material/Vine.java
--- a/src/main/java/org/bukkit/material/Vine.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/material/Vine.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.material;
 
-import org.bukkit.Material;
-import org.bukkit.block.BlockFace;
-
 import java.util.Arrays;
 import java.util.EnumSet;
+import org.bukkit.Material;
+import org.bukkit.block.BlockFace;
 
 /**
  * Represents a vine
Index: src/main/java/org/bukkit/persistence/PersistentDataType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataType.java b/src/main/java/org/bukkit/persistence/PersistentDataType.java
--- a/src/main/java/org/bukkit/persistence/PersistentDataType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/persistence/PersistentDataType.java	(date 1703956060000)
@@ -55,7 +55,7 @@
     PersistentDataType<Float, Float> FLOAT = new PrimitivePersistentDataType<>(Float.class);
     PersistentDataType<Double, Double> DOUBLE = new PrimitivePersistentDataType<>(Double.class);
 
-     /*
+    /*
         Boolean.
      */
     /**
Index: src/main/java/org/bukkit/material/Step.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/material/Step.java b/src/main/java/org/bukkit/material/Step.java
--- a/src/main/java/org/bukkit/material/Step.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/material/Step.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit.material;
 
-import org.bukkit.Material;
-
 import java.util.ArrayList;
 import java.util.List;
+import org.bukkit.Material;
 
 /**
  * Represents the different types of steps.
Index: src/main/java/org/bukkit/material/Mushroom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/material/Mushroom.java b/src/main/java/org/bukkit/material/Mushroom.java
--- a/src/main/java/org/bukkit/material/Mushroom.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/material/Mushroom.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.material;
 
 import com.google.common.base.Preconditions;
+import java.util.EnumSet;
+import java.util.Set;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 import org.bukkit.material.types.MushroomBlockTexture;
 
-import java.util.EnumSet;
-import java.util.Set;
-
 /**
  * Represents a huge mushroom block with certain combinations of faces set to
  * cap, pores or stem.
Index: src/main/java/org/bukkit/structure/Palette.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/structure/Palette.java b/src/main/java/org/bukkit/structure/Palette.java
--- a/src/main/java/org/bukkit/structure/Palette.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/structure/Palette.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.structure;
 
+import java.util.List;
 import org.bukkit.block.BlockState;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Represent a variation of a structure.
  *
Index: src/main/java/org/bukkit/structure/Structure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/structure/Structure.java b/src/main/java/org/bukkit/structure/Structure.java
--- a/src/main/java/org/bukkit/structure/Structure.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/structure/Structure.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.structure;
 
+import java.util.List;
+import java.util.Random;
 import org.bukkit.Location;
 import org.bukkit.RegionAccessor;
 import org.bukkit.block.structure.Mirror;
@@ -9,9 +11,6 @@
 import org.bukkit.util.BlockVector;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-import java.util.Random;
-
 /**
  * Represents a structure.
  * <p>
Index: src/main/java/org/bukkit/structure/StructureManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/structure/StructureManager.java b/src/main/java/org/bukkit/structure/StructureManager.java
--- a/src/main/java/org/bukkit/structure/StructureManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/structure/StructureManager.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.structure;
 
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.Map;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 public interface StructureManager {
 
Index: src/main/java/org/bukkit/persistence/PersistentDataContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.persistence;
 
+import java.util.Set;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Set;
-
 /**
  * This interface represents a map like object, capable of storing custom tags
  * in it.
@@ -22,15 +21,15 @@
      *
      * @param key the key this value will be stored under
      * @param type the type this tag uses
-     * @param value the value stored in the tag
+     * @param value the value to store in the tag
      * @param <T> the generic java type of the tag value
      * @param <Z> the generic type of the object to store
      *
-     * @throws NullPointerException if the key is null
-     * @throws NullPointerException if the type is null
-     * @throws NullPointerException if the value is null. Removing a tag should
+     * @throws IllegalArgumentException if the key is null
+     * @throws IllegalArgumentException if the type is null
+     * @throws IllegalArgumentException if the value is null. Removing a tag should
      * be done using {@link #remove(NamespacedKey)}
-     * @throws IllegalArgumentException if no suitable adapter will be found for
+     * @throws IllegalArgumentException if no suitable adapter was found for
      * the {@link PersistentDataType#getPrimitiveType()}
      */
     <T, Z> void set(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type, @NotNull Z value);
@@ -39,7 +38,7 @@
      * Returns if the persistent metadata provider has metadata registered
      * matching the provided parameters.
      * <p>
-     * This method will only return if the found value has the same primitive
+     * This method will only return true if the found value has the same primitive
      * data type as the provided key.
      * <p>
      * Storing a value using a custom {@link PersistentDataType} implementation
@@ -50,22 +49,41 @@
      * bytes long.
      * <p>
      * This method is only usable for custom object keys. Overwriting existing
-     * tags, like the the display name, will not work as the values are stored
+     * tags, like the display name, will not work as the values are stored
      * using your namespace.
      *
      * @param key the key the value is stored under
-     * @param type the type which primitive storage type has to match the value
+     * @param type the type the primative stored value has to match
      * @param <T> the generic type of the stored primitive
      * @param <Z> the generic type of the eventually created complex object
      *
-     * @return if a value
+     * @return if a value with the provided key and type exists
      *
-     * @throws NullPointerException if the key to look up is null
-     * @throws NullPointerException if the type to cast the found object to is
+     * @throws IllegalArgumentException if the key to look up is null
+     * @throws IllegalArgumentException if the type to cast the found object to is
      * null
      */
     <T, Z> boolean has(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type);
 
+    /**
+     * Returns if the persistent metadata provider has metadata registered matching
+     * the provided parameters.
+     * <p>
+     * This method will return true as long as a value with the given key exists,
+     * regardless of its type.
+     * <p>
+     * This method is only usable for custom object keys. Overwriting existing tags,
+     * like the display name, will not work as the values are stored using your
+     * namespace.
+     *
+     * @param key the key the value is stored under
+     *
+     * @return if a value with the provided key exists
+     *
+     * @throws IllegalArgumentException if the key to look up is null
+     */
+    boolean has(@NotNull NamespacedKey key);
+
     /**
      * Returns the metadata value that is stored on the
      * {@link PersistentDataHolder} instance.
@@ -78,12 +96,12 @@
      * @return the value or {@code null} if no value was mapped under the given
      * value
      *
-     * @throws NullPointerException if the key to look up is null
-     * @throws NullPointerException if the type to cast the found object to is
+     * @throws IllegalArgumentException if the key to look up is null
+     * @throws IllegalArgumentException if the type to cast the found object to is
      * null
-     * @throws IllegalArgumentException if the value exists under the given key,
-     * but cannot be access using the given type
-     * @throws IllegalArgumentException if no suitable adapter will be found for
+     * @throws IllegalArgumentException if a value exists under the given key,
+     * but cannot be accessed using the given type
+     * @throws IllegalArgumentException if no suitable adapter was found for
      * the {@link
      * PersistentDataType#getPrimitiveType()}
      */
@@ -103,21 +121,21 @@
      * @param <Z> the generic type of the eventually created complex object
      *
      * @return the value or the default value if no value was mapped under the
-     * given value
+     * given key
      *
-     * @throws NullPointerException if the key to look up is null
-     * @throws NullPointerException if the type to cast the found object to is
+     * @throws IllegalArgumentException if the key to look up is null
+     * @throws IllegalArgumentException if the type to cast the found object to is
      * null
-     * @throws IllegalArgumentException if the value exists under the given key,
-     * but cannot be access using the given type
-     * @throws IllegalArgumentException if no suitable adapter will be found for
+     * @throws IllegalArgumentException if a value exists under the given key,
+     * but cannot be accessed using the given type
+     * @throws IllegalArgumentException if no suitable adapter was found for
      * the {@link PersistentDataType#getPrimitiveType()}
      */
     @NotNull
     <T, Z> Z getOrDefault(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type, @NotNull Z defaultValue);
 
     /**
-     * Get a set of keys present on this {@link PersistentDataContainer}
+     * Get the set of keys present on this {@link PersistentDataContainer}
      * instance.
      *
      * Any changes made to the returned set will not be reflected on the
@@ -131,9 +149,9 @@
     /**
      * Removes a custom key from the {@link PersistentDataHolder} instance.
      *
-     * @param key the key
+     * @param key the key to remove
      *
-     * @throws NullPointerException if the provided key is null
+     * @throws IllegalArgumentException if the provided key is null
      */
     void remove(@NotNull NamespacedKey key);
 
@@ -145,6 +163,20 @@
      */
     boolean isEmpty();
 
+    /**
+     * Copies all values from this {@link PersistentDataContainer} to the provided
+     * container.
+     * <p>
+     * This method only copies custom object keys. Existing tags, like the display
+     * name, will not be copied as the values are stored using your namespace.
+     *
+     * @param other   the container to copy to
+     * @param replace whether to replace any matching values in the target container
+     *
+     * @throws IllegalArgumentException if the other container is null
+     */
+    void copyTo(@NotNull PersistentDataContainer other, boolean replace);
+
     /**
      * Returns the adapter context this tag container uses.
      *
Index: src/main/java/org/bukkit/potion/Potion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
--- a/src/main/java/org/bukkit/potion/Potion.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/potion/Potion.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.potion;
 
 import com.google.common.base.Preconditions;
+import java.util.Collection;
 import org.bukkit.Material;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collection;
-
 /**
  * Potion Adapter for pre-1.9 data values
  * see @PotionMeta for 1.9+
Index: src/main/java/org/bukkit/potion/PotionBrewer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/potion/PotionBrewer.java b/src/main/java/org/bukkit/potion/PotionBrewer.java
--- a/src/main/java/org/bukkit/potion/PotionBrewer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/potion/PotionBrewer.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.potion;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Collection;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a brewer that can create {@link PotionEffect}s.
Index: src/main/java/org/bukkit/potion/PotionData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/potion/PotionData.java b/src/main/java/org/bukkit/potion/PotionData.java
--- a/src/main/java/org/bukkit/potion/PotionData.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/potion/PotionData.java	(date 1703956060000)
@@ -24,6 +24,8 @@
         Preconditions.checkArgument(!upgraded || type.isUpgradeable(), "Potion Type is not upgradable");
         Preconditions.checkArgument(!extended || type.isExtendable(), "Potion Type is not extendable");
         Preconditions.checkArgument(!upgraded || !extended, "Potion cannot be both extended and upgraded");
+        Preconditions.checkArgument(!type.getKey().getKey().startsWith("strong_"), "Strong potion type cannot be used directly, got %s", type.getKey());
+        Preconditions.checkArgument(!type.getKey().getKey().startsWith("long_"), "Extended potion type cannot be used directly, got %s", type.getKey());
         this.type = type;
         this.extended = extended;
         this.upgraded = upgraded;
Index: src/main/java/org/bukkit/potion/PotionEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
--- a/src/main/java/org/bukkit/potion/PotionEffect.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java	(date 1703956060000)
@@ -2,6 +2,8 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import java.util.NoSuchElementException;
 import org.bukkit.Color;
 import org.bukkit.NamespacedKey;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -11,9 +13,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-import java.util.NoSuchElementException;
-
 /**
  * Represents a potion effect, that can be added to a {@link LivingEntity}. A
  * potion effect has a duration that it will last for, an amplifier that will
@@ -26,7 +25,6 @@
      * A constant denoting infinite potion duration.
      */
     public static final int INFINITE_DURATION = -1;
-
     private static final String AMPLIFIER = "amplifier";
     private static final String DURATION = "duration";
     private static final String TYPE = "effect";
Index: src/main/java/org/bukkit/potion/PotionEffectType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java	(date 1703956060000)
@@ -1,199 +1,202 @@
 package org.bukkit.potion;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.world.effect.MobEffect;
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import com.google.common.collect.Lists;
 import org.bukkit.Color;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Represents a type of potion and its effect on an entity.
  */
 public abstract class PotionEffectType implements Keyed {
+    private static final BiMap<Integer, PotionEffectType> ID_MAP = HashBiMap.create();
+
     /**
      * Increases movement speed.
      */
-    public static final PotionEffectType SPEED = new PotionEffectTypeWrapper(1, "speed");
+    public static final PotionEffectType SPEED = getPotionEffectType(1, "speed");
 
     /**
      * Decreases movement speed.
      */
-    public static final PotionEffectType SLOW = new PotionEffectTypeWrapper(2, "slowness");
+    public static final PotionEffectType SLOW = getPotionEffectType(2, "slowness");
 
     /**
      * Increases dig speed.
      */
-    public static final PotionEffectType FAST_DIGGING = new PotionEffectTypeWrapper(3, "haste");
+    public static final PotionEffectType FAST_DIGGING = getPotionEffectType(3, "haste");
 
     /**
      * Decreases dig speed.
      */
-    public static final PotionEffectType SLOW_DIGGING = new PotionEffectTypeWrapper(4, "mining_fatigue");
+    public static final PotionEffectType SLOW_DIGGING = getPotionEffectType(4, "mining_fatigue");
 
     /**
      * Increases damage dealt.
      */
-    public static final PotionEffectType INCREASE_DAMAGE = new PotionEffectTypeWrapper(5, "strength");
+    public static final PotionEffectType INCREASE_DAMAGE = getPotionEffectType(5, "strength");
 
     /**
      * Heals an entity.
      */
-    public static final PotionEffectType HEAL = new PotionEffectTypeWrapper(6, "instant_health");
+    public static final PotionEffectType HEAL = getPotionEffectType(6, "instant_health");
 
     /**
      * Hurts an entity.
      */
-    public static final PotionEffectType HARM = new PotionEffectTypeWrapper(7, "instant_damage");
+    public static final PotionEffectType HARM = getPotionEffectType(7, "instant_damage");
 
     /**
      * Increases jump height.
      */
-    public static final PotionEffectType JUMP = new PotionEffectTypeWrapper(8, "jump_boost");
+    public static final PotionEffectType JUMP = getPotionEffectType(8, "jump_boost");
 
     /**
      * Warps vision on the client.
      */
-    public static final PotionEffectType CONFUSION = new PotionEffectTypeWrapper(9, "nausea");
+    public static final PotionEffectType CONFUSION = getPotionEffectType(9, "nausea");
 
     /**
      * Regenerates health.
      */
-    public static final PotionEffectType REGENERATION = new PotionEffectTypeWrapper(10, "regeneration");
+    public static final PotionEffectType REGENERATION = getPotionEffectType(10, "regeneration");
 
     /**
      * Decreases damage dealt to an entity.
      */
-    public static final PotionEffectType DAMAGE_RESISTANCE = new PotionEffectTypeWrapper(11, "resistance");
+    public static final PotionEffectType DAMAGE_RESISTANCE = getPotionEffectType(11, "resistance");
 
     /**
      * Stops fire damage.
      */
-    public static final PotionEffectType FIRE_RESISTANCE = new PotionEffectTypeWrapper(12, "fire_resistance");
+    public static final PotionEffectType FIRE_RESISTANCE = getPotionEffectType(12, "fire_resistance");
 
     /**
      * Allows breathing underwater.
      */
-    public static final PotionEffectType WATER_BREATHING = new PotionEffectTypeWrapper(13, "water_breathing");
+    public static final PotionEffectType WATER_BREATHING = getPotionEffectType(13, "water_breathing");
 
     /**
      * Grants invisibility.
      */
-    public static final PotionEffectType INVISIBILITY = new PotionEffectTypeWrapper(14, "invisibility");
+    public static final PotionEffectType INVISIBILITY = getPotionEffectType(14, "invisibility");
 
     /**
      * Blinds an entity.
      */
-    public static final PotionEffectType BLINDNESS = new PotionEffectTypeWrapper(15, "blindness");
+    public static final PotionEffectType BLINDNESS = getPotionEffectType(15, "blindness");
 
     /**
      * Allows an entity to see in the dark.
      */
-    public static final PotionEffectType NIGHT_VISION = new PotionEffectTypeWrapper(16, "night_vision");
+    public static final PotionEffectType NIGHT_VISION = getPotionEffectType(16, "night_vision");
 
     /**
      * Increases hunger.
      */
-    public static final PotionEffectType HUNGER = new PotionEffectTypeWrapper(17, "hunger");
+    public static final PotionEffectType HUNGER = getPotionEffectType(17, "hunger");
 
     /**
      * Decreases damage dealt by an entity.
      */
-    public static final PotionEffectType WEAKNESS = new PotionEffectTypeWrapper(18, "weakness");
+    public static final PotionEffectType WEAKNESS = getPotionEffectType(18, "weakness");
 
     /**
      * Deals damage to an entity over time.
      */
-    public static final PotionEffectType POISON = new PotionEffectTypeWrapper(19, "poison");
+    public static final PotionEffectType POISON = getPotionEffectType(19, "poison");
 
     /**
      * Deals damage to an entity over time and gives the health to the
      * shooter.
      */
-    public static final PotionEffectType WITHER = new PotionEffectTypeWrapper(20, "wither");
+    public static final PotionEffectType WITHER = getPotionEffectType(20, "wither");
 
     /**
      * Increases the maximum health of an entity.
      */
-    public static final PotionEffectType HEALTH_BOOST = new PotionEffectTypeWrapper(21, "health_boost");
+    public static final PotionEffectType HEALTH_BOOST = getPotionEffectType(21, "health_boost");
 
     /**
      * Increases the maximum health of an entity with health that cannot be
      * regenerated, but is refilled every 30 seconds.
      */
-    public static final PotionEffectType ABSORPTION = new PotionEffectTypeWrapper(22, "absorption");
+    public static final PotionEffectType ABSORPTION = getPotionEffectType(22, "absorption");
 
     /**
      * Increases the food level of an entity each tick.
      */
-    public static final PotionEffectType SATURATION = new PotionEffectTypeWrapper(23, "saturation");
+    public static final PotionEffectType SATURATION = getPotionEffectType(23, "saturation");
 
     /**
      * Outlines the entity so that it can be seen from afar.
      */
-    public static final PotionEffectType GLOWING = new PotionEffectTypeWrapper(24, "glowing");
+    public static final PotionEffectType GLOWING = getPotionEffectType(24, "glowing");
 
     /**
      * Causes the entity to float into the air.
      */
-    public static final PotionEffectType LEVITATION = new PotionEffectTypeWrapper(25, "levitation");
+    public static final PotionEffectType LEVITATION = getPotionEffectType(25, "levitation");
 
     /**
      * Loot table luck.
      */
-    public static final PotionEffectType LUCK = new PotionEffectTypeWrapper(26, "luck");
+    public static final PotionEffectType LUCK = getPotionEffectType(26, "luck");
 
     /**
      * Loot table unluck.
      */
-    public static final PotionEffectType UNLUCK = new PotionEffectTypeWrapper(27, "unluck");
+    public static final PotionEffectType UNLUCK = getPotionEffectType(27, "unluck");
 
     /**
      * Slows entity fall rate.
      */
-    public static final PotionEffectType SLOW_FALLING = new PotionEffectTypeWrapper(28, "slow_falling");
+    public static final PotionEffectType SLOW_FALLING = getPotionEffectType(28, "slow_falling");
 
     /**
      * Effects granted by a nearby conduit. Includes enhanced underwater abilities.
      */
-    public static final PotionEffectType CONDUIT_POWER = new PotionEffectTypeWrapper(29, "conduit_power");
+    public static final PotionEffectType CONDUIT_POWER = getPotionEffectType(29, "conduit_power");
 
     /**
      * Increses underwater movement speed.<br>
      * Squee'ek uh'k kk'kkkk squeek eee'eek.
      */
-    public static final PotionEffectType DOLPHINS_GRACE = new PotionEffectTypeWrapper(30, "dolphins_grace");
+    public static final PotionEffectType DOLPHINS_GRACE = getPotionEffectType(30, "dolphins_grace");
 
     /**
      * Triggers a raid when the player enters a village.<br>
      * oof.
      */
-    public static final PotionEffectType BAD_OMEN = new PotionEffectTypeWrapper(31, "bad_omen");
+    public static final PotionEffectType BAD_OMEN = getPotionEffectType(31, "bad_omen");
 
     /**
      * Reduces the cost of villager trades.<br>
      * \o/.
      */
-    public static final PotionEffectType HERO_OF_THE_VILLAGE = new PotionEffectTypeWrapper(32, "hero_of_the_village");
+    public static final PotionEffectType HERO_OF_THE_VILLAGE = getPotionEffectType(32, "hero_of_the_village");
 
     /**
      * Causes the player's vision to dim occasionally.
      */
-    public static final PotionEffectType DARKNESS = new PotionEffectTypeWrapper(33, "darkness");
+    public static final PotionEffectType DARKNESS = getPotionEffectType(33, "darkness");
 
-    private final int id;
-    private final NamespacedKey key;
-
-    protected PotionEffectType(int id, @NotNull NamespacedKey key) {
-        this.id = id;
-        this.key = key;
+    @NotNull
+    private static PotionEffectType getPotionEffectType(int typeId, @NotNull String key) {
+        NamespacedKey namespacedKey = NamespacedKey.minecraft(key);
+        PotionEffectType potionEffectType = Registry.EFFECT.get(namespacedKey);
+        Preconditions.checkNotNull(potionEffectType, "No PotionEffectType found for %s. This is a bug.", namespacedKey);
+        if (typeId > 0) {
+            ID_MAP.put(typeId, potionEffectType);
+        }
+        return potionEffectType;
     }
 
     /**
@@ -206,9 +209,22 @@
      * @see PotionBrewer#createEffect(PotionEffectType, int, int)
      */
     @NotNull
-    public PotionEffect createEffect(int duration, int amplifier) {
-        return new PotionEffect(this, isInstant() ? 1 : (int) (duration * getDurationModifier()), amplifier);
-    }
+    public abstract PotionEffect createEffect(int duration, int amplifier);
+
+    /**
+     * Returns whether the effect of this type happens once, immediately.
+     *
+     * @return whether this type is normally instant
+     */
+    public abstract boolean isInstant();
+
+    /**
+     * Returns the color of this effect type.
+     *
+     * @return the color
+     */
+    @NotNull
+    public abstract Color getColor();
 
     /**
      * Returns the duration modifier applied to effects of this type.
@@ -226,80 +242,34 @@
      * @deprecated Magic value
      */
     @Deprecated
-    public int getId() {
-        return id;
-    }
-
-    @NotNull
-    @Override
-    public NamespacedKey getKey() {
-        return key;
-    }
+    public abstract int getId();
 
     /**
      * Returns the name of this effect type.
      *
      * @return The name of this effect type
+     * @deprecated only for backwards compatibility, use {@link #getKey()} instead.
      */
     @NotNull
+    @Deprecated
     public abstract String getName();
 
-    /**
-     * Returns whether the effect of this type happens once, immediately.
-     *
-     * @return whether this type is normally instant
-     */
-    public abstract boolean isInstant();
-
-    /**
-     * Returns the color of this effect type.
-     *
-     * @return the color
-     */
-    @NotNull
-    public abstract Color getColor();
-
-    @Override
-    public boolean equals(Object obj) {
-        if (obj == null) {
-            return false;
-        }
-        if (!(obj instanceof PotionEffectType)) {
-            return false;
-        }
-        final PotionEffectType other = (PotionEffectType) obj;
-        if (this.id != other.id) {
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return id;
-    }
-
-    @Override
-    public String toString() {
-        return "PotionEffectType[" + id + ", " + getName() + "]";
-    }
-
-    private static final PotionEffectType[] byId = new PotionEffectType[BuiltInRegistries.MOB_EFFECT.stream().mapToInt(MobEffect::getColor).max().orElse(0) + 1];// Banner TODO fix by Id
-    private static final Map<String, PotionEffectType> byName = new HashMap<String, PotionEffectType>();
-    private static final Map<NamespacedKey, PotionEffectType> byKey = new HashMap<NamespacedKey, PotionEffectType>();
-    // will break on updates.
-    private static boolean acceptingNew = true;
-
     /**
      * Gets the PotionEffectType at the specified key
      *
      * @param key key to fetch
      * @return Resulting PotionEffectType, or null if not found
+     * @deprecated only for backwards compatibility, use {@link Registry#get(NamespacedKey)} instead.
      */
     @Contract("null -> null")
     @Nullable
+    @Deprecated
     public static PotionEffectType getByKey(@Nullable NamespacedKey key) {
-        return byKey.get(key);
+        if (key == null) {
+            return null;
+        }
+
+        return Registry.EFFECT.get(key);
     }
 
     /**
@@ -312,9 +282,20 @@
     @Deprecated
     @Nullable
     public static PotionEffectType getById(int id) {
-        if (id >= byId.length || id < 0)
-            return null;
-        return byId[id];
+        PotionEffectType type = ID_MAP.get(id);
+
+        if (type != null) {
+            return type;
+        }
+
+        for (PotionEffectType other : Registry.EFFECT) {
+            if (other.getId() == id) {
+                ID_MAP.put(id, other);
+                return other;
+            }
+        }
+
+        return null;
     }
 
     /**
@@ -322,50 +303,52 @@
      *
      * @param name Name of PotionEffectType to fetch
      * @return Resulting PotionEffectType, or null if not found.
+     * @deprecated only for backwards compatibility, use {@link Registry#get(NamespacedKey)} instead.
      */
     @Nullable
+    @Deprecated
     public static PotionEffectType getByName(@NotNull String name) {
         Preconditions.checkArgument(name != null, "name cannot be null");
-        return byName.get(name.toLowerCase(java.util.Locale.ENGLISH));
-    }
-
-    /**
-     * Registers an effect type with the given object.
-     * <p>
-     * Generally not to be used from within a plugin.
-     *
-     * @param type PotionType to register
-     */
-    public static void registerPotionEffectType(@NotNull PotionEffectType type) {
-        if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase(java.util.Locale.ENGLISH)) || byKey.containsKey(type.key)) {
-            throw new IllegalArgumentException("Cannot set already-set type");
-        } else if (!acceptingNew) {
-            throw new IllegalStateException(
-                    "No longer accepting new potion effect types (can only be done by the server implementation)");
-        }
-
-        byId[type.id] = type;
-        byName.put(type.getName().toLowerCase(java.util.Locale.ENGLISH), type);
-        byKey.put(type.key, type);
-    }
-
-    /**
-     * Stops accepting any effect type registrations.
-     */
-    public static void stopAcceptingRegistrations() {
-        acceptingNew = false;
+        name = convertLegacy(name);
+        return Registry.EFFECT.get(NamespacedKey.fromString(name.toLowerCase(java.util.Locale.ENGLISH)));
     }
 
     /**
-     * Returns an array of all the registered {@link PotionEffectType}s.
-     * This array is not necessarily in any particular order.
-     *
-     * @return Array of types.
+     * @return an array of all known PotionEffectTypes.
+     * @deprecated use {@link Registry#iterator()}.
      */
     @NotNull
+    @Deprecated
     public static PotionEffectType[] values() {
-        int from = byId[0] == null ? 1 : 0;
-        int to = byId[byId.length - 1] == null ? byId.length - 1 : byId.length;
-        return Arrays.copyOfRange(byId, from, to);
+        return Lists.newArrayList(Registry.EFFECT).toArray(new PotionEffectType[0]);
     }
-}
\ No newline at end of file
+
+    private static String convertLegacy(String from) {
+        if (from == null) {
+            return null;
+        }
+
+        switch (from.toLowerCase()) {
+            case "slow":
+                return "slowness";
+            case "fast_digging":
+                return "haste";
+            case "slow_digging":
+                return "mining_fatigue";
+            case "increase_damage":
+                return "strength";
+            case "heal":
+                return "instant_health";
+            case "harm":
+                return "instant_damage";
+            case "jump":
+                return "jump_boost";
+            case "confusion":
+                return "nausea";
+            case "damage_resistance":
+                return "resistance";
+        }
+
+        return from;
+    }
+}
Index: src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
--- a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java	(date 1703956060000)
@@ -1,23 +1,13 @@
 package org.bukkit.potion;
 
-import org.bukkit.Color;
-import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
-public class PotionEffectTypeWrapper extends PotionEffectType {
-    protected PotionEffectTypeWrapper(int id, @NotNull String name) {
-        super(id, NamespacedKey.minecraft(name));
-    }
-
-    @Override
-    public double getDurationModifier() {
-        return getType().getDurationModifier();
-    }
-
-    @NotNull
-    @Override
-    public String getName() {
-        return getType().getName();
+/**
+ * @deprecated only for backwards compatibility, PotionEffectTypeWrapper is no longer used.
+ */
+@Deprecated
+public abstract class PotionEffectTypeWrapper extends PotionEffectType {
+    protected PotionEffectTypeWrapper() {
     }
 
     /**
@@ -27,17 +17,6 @@
      */
     @NotNull
     public PotionEffectType getType() {
-        return PotionEffectType.getByKey(getKey());
-    }
-
-    @Override
-    public boolean isInstant() {
-        return getType().isInstant();
-    }
-
-    @NotNull
-    @Override
-    public Color getColor() {
-        return getType().getColor();
+        return this;
     }
 }
Index: src/main/java/org/bukkit/potion/PotionType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/potion/PotionType.java b/src/main/java/org/bukkit/potion/PotionType.java
--- a/src/main/java/org/bukkit/potion/PotionType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/potion/PotionType.java	(date 1703956060000)
@@ -1,52 +1,99 @@
 package org.bukkit.potion;
 
+import com.google.common.base.Suppliers;
+import java.util.List;
+import java.util.function.Supplier;
+import org.bukkit.Bukkit;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
  * This enum reflects and matches each potion state that can be obtained from
  * the Creative mode inventory
  */
-public enum PotionType {
-    UNCRAFTABLE(null, false, false),
-    WATER(null, false, false),
-    MUNDANE(null, false, false),
-    THICK(null, false, false),
-    AWKWARD(null, false, false),
-    NIGHT_VISION(PotionEffectType.NIGHT_VISION, false, true),
-    INVISIBILITY(PotionEffectType.INVISIBILITY, false, true),
-    JUMP(PotionEffectType.JUMP, true, true),
-    FIRE_RESISTANCE(PotionEffectType.FIRE_RESISTANCE, false, true),
-    SPEED(PotionEffectType.SPEED, true, true),
-    SLOWNESS(PotionEffectType.SLOW, true, true),
-    WATER_BREATHING(PotionEffectType.WATER_BREATHING, false, true),
-    INSTANT_HEAL(PotionEffectType.HEAL, true, false),
-    INSTANT_DAMAGE(PotionEffectType.HARM, true, false),
-    POISON(PotionEffectType.POISON, true, true),
-    REGEN(PotionEffectType.REGENERATION, true, true),
-    STRENGTH(PotionEffectType.INCREASE_DAMAGE, true, true),
-    WEAKNESS(PotionEffectType.WEAKNESS, false, true),
-    LUCK(PotionEffectType.LUCK, false, false),
-    TURTLE_MASTER(PotionEffectType.SLOW, true, true), // TODO: multiple effects
-    SLOW_FALLING(PotionEffectType.SLOW_FALLING, false, true),
+public enum PotionType implements Keyed {
+    UNCRAFTABLE("empty"),
+    WATER("water"),
+    MUNDANE("mundane"),
+    THICK("thick"),
+    AWKWARD("awkward"),
+    NIGHT_VISION("night_vision"),
+    LONG_NIGHT_VISION("long_night_vision"),
+    INVISIBILITY("invisibility"),
+    LONG_INVISIBILITY("long_invisibility"),
+    JUMP("leaping"),
+    LONG_LEAPING("long_leaping"),
+    STRONG_LEAPING("strong_leaping"),
+    FIRE_RESISTANCE("fire_resistance"),
+    LONG_FIRE_RESISTANCE("long_fire_resistance"),
+    SPEED("swiftness"),
+    LONG_SWIFTNESS("long_swiftness"),
+    STRONG_SWIFTNESS("strong_swiftness"),
+    SLOWNESS("slowness"),
+    LONG_SLOWNESS("long_slowness"),
+    STRONG_SLOWNESS("strong_slowness"),
+    WATER_BREATHING("water_breathing"),
+    LONG_WATER_BREATHING("long_water_breathing"),
+    INSTANT_HEAL("healing"),
+    STRONG_HEALING("strong_healing"),
+    INSTANT_DAMAGE("harming"),
+    STRONG_HARMING("strong_harming"),
+    POISON("poison"),
+    LONG_POISON("long_poison"),
+    STRONG_POISON("strong_poison"),
+    REGEN("regeneration"),
+    LONG_REGENERATION("long_regeneration"),
+    STRONG_REGENERATION("strong_regeneration"),
+    STRENGTH("strength"),
+    LONG_STRENGTH("long_strength"),
+    STRONG_STRENGTH("strong_strength"),
+    WEAKNESS("weakness"),
+    LONG_WEAKNESS("long_weakness"),
+    LUCK("luck"),
+    TURTLE_MASTER("turtle_master"),
+    LONG_TURTLE_MASTER("long_turtle_master"),
+    STRONG_TURTLE_MASTER("strong_turtle_master"),
+    SLOW_FALLING("slow_falling"),
+    LONG_SLOW_FALLING("long_slow_falling"),
     ;
 
-    private final PotionEffectType effect;
-    private final boolean upgradeable;
-    private final boolean extendable;
+    private final NamespacedKey key;
+    private final Supplier<InternalPotionData> internalPotionDataSupplier;
 
-    PotionType(/*@Nullable*/ PotionEffectType effect, boolean upgradeable, boolean extendable) {
-        this.effect = effect;
-        this.upgradeable = upgradeable;
-        this.extendable = extendable;
+    PotionType(String key) {
+        this.key = NamespacedKey.minecraft(key);
+        this.internalPotionDataSupplier = Suppliers.memoize(() -> Bukkit.getUnsafe().getInternalPotionData(this.key));
     }
 
+    /**
+     * @return the potion effect type of this potion type
+     * @deprecated Potions can have multiple effects use {@link #getPotionEffects()}
+     */
     @Nullable
+    @Deprecated
     public PotionEffectType getEffectType() {
-        return effect;
+        return internalPotionDataSupplier.get().getEffectType();
+    }
+
+    /**
+     * @return a list of all effects this potion type has
+     */
+    @NotNull
+    public List<PotionEffect> getPotionEffects() {
+        return internalPotionDataSupplier.get().getPotionEffects();
     }
 
+    /**
+     * @return if this potion type is instant
+     * @deprecated PotionType can have multiple effects, some of which can be instant and others not.
+     * Use {@link PotionEffectType#isInstant()} in combination with {@link #getPotionEffects()} and {@link PotionEffect#getType()}
+     */
+    @Deprecated
     public boolean isInstant() {
-        return effect != null && effect.isInstant();
+        return internalPotionDataSupplier.get().isInstant();
     }
 
     /**
@@ -57,7 +104,7 @@
      * @return true if the potion type can be upgraded;
      */
     public boolean isUpgradeable() {
-        return upgradeable;
+        return internalPotionDataSupplier.get().isUpgradeable();
     }
 
     /**
@@ -67,11 +114,11 @@
      * @return true if the potion type can be extended
      */
     public boolean isExtendable() {
-        return extendable;
+        return internalPotionDataSupplier.get().isExtendable();
     }
 
     public int getMaxLevel() {
-        return upgradeable ? 2 : 1;
+        return internalPotionDataSupplier.get().getMaxLevel();
     }
 
     /**
@@ -85,9 +132,35 @@
         if (effectType == null)
             return WATER;
         for (PotionType type : PotionType.values()) {
-            if (effectType.equals(type.effect))
+            if (effectType.equals(type.getEffectType()))
                 return type;
         }
         return null;
     }
+
+    @NotNull
+    @Override
+    public NamespacedKey getKey() {
+        return key;
+    }
+
+    /**
+     * @deprecated Do not use, interface will get removed, and the plugin won't run
+     */
+    @Deprecated
+    @ApiStatus.Internal
+    public interface InternalPotionData {
+
+        PotionEffectType getEffectType();
+
+        List<PotionEffect> getPotionEffects();
+
+        boolean isInstant();
+
+        boolean isUpgradeable();
+
+        boolean isExtendable();
+
+        int getMaxLevel();
+    }
 }
Index: src/main/java/org/bukkit/profile/PlayerProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/profile/PlayerProfile.java b/src/main/java/org/bukkit/profile/PlayerProfile.java
--- a/src/main/java/org/bukkit/profile/PlayerProfile.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/profile/PlayerProfile.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.profile;
 
+import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
 import org.bukkit.Server;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.UUID;
-import java.util.concurrent.CompletableFuture;
-
 /**
  * A player profile.
  * <p>
Index: src/main/java/org/bukkit/profile/PlayerTextures.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/profile/PlayerTextures.java b/src/main/java/org/bukkit/profile/PlayerTextures.java
--- a/src/main/java/org/bukkit/profile/PlayerTextures.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/profile/PlayerTextures.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.profile;
 
+import java.net.URL;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.net.URL;
-
 /**
  * Provides access to the textures stored inside a {@link PlayerProfile}.
  * <p>
Index: src/main/java/org/bukkit/packs/DataPack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/packs/DataPack.java b/src/main/java/org/bukkit/packs/DataPack.java
--- a/src/main/java/org/bukkit/packs/DataPack.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/packs/DataPack.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.packs;
 
+import java.util.Set;
 import org.bukkit.FeatureFlag;
 import org.bukkit.Keyed;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Represents a data pack.
  */
@@ -30,16 +29,42 @@
     public String getDescription();
 
     /**
-     * Gets the pack version.
+     * Gets the pack format.
      * <br>
-     * This is related to the server version to work.
+     * Pack formats are non-standard and unrelated to the version of Minecraft. For
+     * a list of known pack versions, see the
+     * <a href="https://minecraft.wiki/w/Data_pack#Pack_format">Minecraft Wiki</a>.
      *
      * @return the pack version
-     * @deprecated packs can support multiple versions
+     * @see #getMinSupportedPackFormat()
+     * @see #getMaxSupportedPackFormat()
      */
-    @Deprecated
     public int getPackFormat();
 
+    /**
+     * Gets the minimum supported pack format. If the data pack does not specify a
+     * minimum supported format, {@link #getPackFormat()} is returned.
+     * <br>
+     * Pack formats are non-standard and unrelated to the version of Minecraft. For
+     * a list of known pack versions, see the
+     * <a href="https://minecraft.wiki/w/Data_pack#Pack_format">Minecraft Wiki</a>.
+     *
+     * @return the min pack version supported
+     */
+    public int getMinSupportedPackFormat();
+
+    /**
+     * Gets the maximum supported pack format. If the data pack does not specify a
+     * maximum supported format, {@link #getPackFormat()} is returned.
+     * <br>
+     * Pack formats are non-standard and unrelated to the version of Minecraft. For
+     * a list of known pack versions, see the
+     * <a href="https://minecraft.wiki/w/Data_pack#Pack_format">Minecraft Wiki</a>.
+     *
+     * @return the max pack version supported
+     */
+    public int getMaxSupportedPackFormat();
+
     /**
      * Gets if the data pack is enabled on the server.
      *
@@ -107,4 +132,4 @@
         WORLD,
         SERVER;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/packs/DataPackManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/packs/DataPackManager.java b/src/main/java/org/bukkit/packs/DataPackManager.java
--- a/src/main/java/org/bukkit/packs/DataPackManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/packs/DataPackManager.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.packs;
 
+import java.util.Collection;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.World;
@@ -8,8 +9,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-
 /**
  * Manager of data packs.
  */
@@ -68,4 +67,4 @@
      * @return {@code True} if the type of entity is enabled
      */
     public boolean isEnabledByFeature(@NotNull EntityType entityType, @NotNull World world);
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/packs/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/packs/package-info.java b/src/main/java/org/bukkit/packs/package-info.java
--- a/src/main/java/org/bukkit/packs/package-info.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/packs/package-info.java	(date 1703956060000)
@@ -2,4 +2,4 @@
  * Classes dedicated to handling data pack information.
  */
 @org.jetbrains.annotations.ApiStatus.Experimental
-package org.bukkit.packs;
\ No newline at end of file
+package org.bukkit.packs;
Index: src/main/java/org/bukkit/scoreboard/Objective.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java
--- a/src/main/java/org/bukkit/scoreboard/Objective.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/scoreboard/Objective.java	(date 1703956060000)
@@ -18,7 +18,7 @@
      * @throws IllegalStateException if this objective has been unregistered
      */
     @NotNull
-    String getName();
+    String getName() throws IllegalStateException;
 
     /**
      * Gets the name displayed to players for this objective
@@ -27,15 +27,18 @@
      * @throws IllegalStateException if this objective has been unregistered
      */
     @NotNull
-    String getDisplayName();
+    String getDisplayName() throws IllegalStateException;
 
     /**
      * Sets the name displayed to players for this objective.
      *
      * @param displayName Display name to set
      * @throws IllegalStateException if this objective has been unregistered
+     * @throws IllegalArgumentException if displayName is null
+     * @throws IllegalArgumentException if displayName is longer than 128
+     *     characters.
      */
-    void setDisplayName(@NotNull String displayName);
+    void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * Gets the criteria this objective tracks.
@@ -46,7 +49,7 @@
      */
     @Deprecated
     @NotNull
-    String getCriteria();
+    String getCriteria() throws IllegalStateException;
 
     /**
      * Gets the criteria this objective tracks.
@@ -55,7 +58,7 @@
      * @throws IllegalStateException if this objective has been unregistered
      */
     @NotNull
-    Criteria getTrackedCriteria();
+    Criteria getTrackedCriteria() throws IllegalStateException;
 
     /**
      * Gets if the objective's scores can be modified directly by a plugin.
@@ -64,7 +67,7 @@
      * @throws IllegalStateException if this objective has been unregistered
      * @see Criterias#HEALTH
      */
-    boolean isModifiable();
+    boolean isModifiable() throws IllegalStateException;
 
     /**
      * Gets the scoreboard to which this objective is attached.
@@ -80,7 +83,7 @@
      *
      * @throws IllegalStateException if this objective has been unregistered
      */
-    void unregister();
+    void unregister() throws IllegalStateException;
 
     /**
      * Sets this objective to display on the specified slot for the
@@ -89,7 +92,7 @@
      * @param slot display slot to change, or null to not display
      * @throws IllegalStateException if this objective has been unregistered
      */
-    void setDisplaySlot(@Nullable DisplaySlot slot);
+    void setDisplaySlot(@Nullable DisplaySlot slot) throws IllegalStateException;
 
     /**
      * Gets the display slot this objective is displayed at.
@@ -98,7 +101,7 @@
      * @throws IllegalStateException if this objective has been unregistered
      */
     @Nullable
-    DisplaySlot getDisplaySlot();
+    DisplaySlot getDisplaySlot() throws IllegalStateException;
 
     /**
      * Sets manner in which this objective will be rendered.
@@ -106,7 +109,7 @@
      * @param renderType new render type
      * @throws IllegalStateException if this objective has been unregistered
      */
-    void setRenderType(@NotNull RenderType renderType);
+    void setRenderType(@NotNull RenderType renderType) throws IllegalStateException;
 
     /**
      * Sets manner in which this objective will be rendered.
@@ -115,29 +118,31 @@
      * @throws IllegalStateException if this objective has been unregistered
      */
     @NotNull
-    RenderType getRenderType();
+    RenderType getRenderType() throws IllegalStateException;
 
     /**
      * Gets a player's Score for an Objective on this Scoreboard
      *
      * @param player Player for the Score
      * @return Score tracking the Objective and player specified
+     * @throws IllegalArgumentException if player is null
      * @throws IllegalStateException if this objective has been unregistered
      * @see #getScore(String)
      * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     @NotNull
-    Score getScore(@NotNull OfflinePlayer player);
+    Score getScore(@NotNull OfflinePlayer player) throws IllegalArgumentException, IllegalStateException;
 
     /**
      * Gets an entry's Score for an Objective on this Scoreboard.
      *
      * @param entry Entry for the Score
      * @return Score tracking the Objective and entry specified
+     * @throws IllegalArgumentException if entry is null
      * @throws IllegalStateException if this objective has been unregistered
      * @throws IllegalArgumentException if entry is longer than 32767 characters.
      */
     @NotNull
-    Score getScore(@NotNull String entry);
-}
\ No newline at end of file
+    Score getScore(@NotNull String entry) throws IllegalArgumentException, IllegalStateException;
+}
Index: src/main/java/org/bukkit/scoreboard/Score.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/scoreboard/Score.java b/src/main/java/org/bukkit/scoreboard/Score.java
--- a/src/main/java/org/bukkit/scoreboard/Score.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/scoreboard/Score.java	(date 1703956060000)
@@ -45,7 +45,7 @@
      * @throws IllegalStateException if the associated objective has been
      *     unregistered
      */
-    int getScore();
+    int getScore() throws IllegalStateException;
 
     /**
      * Sets the current score.
@@ -54,7 +54,7 @@
      * @throws IllegalStateException if the associated objective has been
      *     unregistered
      */
-    void setScore(int score);
+    void setScore(int score) throws IllegalStateException;
 
     /**
      * Shows if this score has been set at any point in time.
@@ -63,7 +63,7 @@
      * @throws IllegalStateException if the associated objective has been
      *     unregistered
      */
-    boolean isScoreSet();
+    boolean isScoreSet() throws IllegalStateException;
 
     /**
      * Gets the scoreboard for the associated objective.
@@ -73,4 +73,4 @@
      */
     @Nullable
     Scoreboard getScoreboard();
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/scoreboard/Scoreboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.scoreboard;
 
+import java.util.Set;
 import org.bukkit.OfflinePlayer;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Set;
-
 /**
  * A scoreboard
  */
@@ -17,15 +16,17 @@
      * @param name Name of the Objective
      * @param criteria Criteria for the Objective
      * @return The registered Objective
+     * @throws IllegalArgumentException if name is null
      * @throws IllegalArgumentException if name is longer than 32767
      *     characters.
+     * @throws IllegalArgumentException if criteria is null
      * @throws IllegalArgumentException if an objective by that name already
      *     exists
      * @deprecated a displayName should be explicitly specified
      */
     @Deprecated
     @NotNull
-    Objective registerNewObjective(@NotNull String name, @NotNull String criteria);
+    Objective registerNewObjective(@NotNull String name, @NotNull String criteria) throws IllegalArgumentException;
 
     /**
      * Registers an Objective on this Scoreboard
@@ -34,14 +35,19 @@
      * @param criteria Criteria for the Objective
      * @param displayName Name displayed to players for the Objective.
      * @return The registered Objective
+     * @throws IllegalArgumentException if name is null
      * @throws IllegalArgumentException if name is longer than 32767
      *     characters.
+     * @throws IllegalArgumentException if criteria is null
+     * @throws IllegalArgumentException if displayName is null
+     * @throws IllegalArgumentException if displayName is longer than 128
+     *     characters.
      * @throws IllegalArgumentException if an objective by that name already
      *     exists
      * @deprecated use {@link #registerNewObjective(String, Criteria, String)}
      */
     @NotNull
-    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName);
+    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException;
 
     /**
      * Registers an Objective on this Scoreboard
@@ -51,14 +57,20 @@
      * @param displayName Name displayed to players for the Objective.
      * @param renderType Manner of rendering the Objective
      * @return The registered Objective
+     * @throws IllegalArgumentException if name is null
      * @throws IllegalArgumentException if name is longer than 32767
      *     characters.
+     * @throws IllegalArgumentException if criteria is null
+     * @throws IllegalArgumentException if displayName is null
+     * @throws IllegalArgumentException if displayName is longer than 128
+     *     characters.
+     * @throws IllegalArgumentException if renderType is null
      * @throws IllegalArgumentException if an objective by that name already
      *     exists
      * @deprecated use {@link #registerNewObjective(String, Criteria, String, RenderType)}
      */
     @NotNull
-    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType);
+    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;
 
     /**
      * Registers an Objective on this Scoreboard
@@ -67,13 +79,18 @@
      * @param criteria Criteria for the Objective
      * @param displayName Name displayed to players for the Objective.
      * @return The registered Objective
+     * @throws IllegalArgumentException if name is null
      * @throws IllegalArgumentException if name is longer than 32767
+     *     characters.
+     * @throws IllegalArgumentException if criteria is null
+     * @throws IllegalArgumentException if displayName is null
+     * @throws IllegalArgumentException if displayName is longer than 128
      *     characters.
      * @throws IllegalArgumentException if an objective by that name already
      *     exists
      */
     @NotNull
-    Objective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull String displayName);
+    Objective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull String displayName) throws IllegalArgumentException;
 
     /**
      * Registers an Objective on this Scoreboard
@@ -83,42 +100,51 @@
      * @param displayName Name displayed to players for the Objective.
      * @param renderType Manner of rendering the Objective
      * @return The registered Objective
+     * @throws IllegalArgumentException if name is null
      * @throws IllegalArgumentException if name is longer than 32767
      *     characters.
+     * @throws IllegalArgumentException if criteria is null
+     * @throws IllegalArgumentException if displayName is null
+     * @throws IllegalArgumentException if displayName is longer than 128
+     *     characters.
+     * @throws IllegalArgumentException if renderType is null
      * @throws IllegalArgumentException if an objective by that name already
      *     exists
      */
     @NotNull
-    Objective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull String displayName, @NotNull RenderType renderType);
+    Objective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;
 
     /**
      * Gets an Objective on this Scoreboard by name
      *
      * @param name Name of the Objective
      * @return the Objective or null if it does not exist
+     * @throws IllegalArgumentException if name is null
+     * @deprecated use {@link #getObjectivesByCriteria(Criteria)}
      */
+    @Deprecated
     @Nullable
-    Objective getObjective(@NotNull String name);
+    Objective getObjective(@NotNull String name) throws IllegalArgumentException;
 
     /**
      * Gets all Objectives of a Criteria on the Scoreboard
      *
      * @param criteria Criteria to search by
      * @return an immutable set of Objectives using the specified Criteria
-     * @deprecated use {@link #getObjectivesByCriteria(Criteria)}
+     * @throws IllegalArgumentException if criteria is null
      */
-    @Deprecated
     @NotNull
-    Set<Objective> getObjectivesByCriteria(@NotNull String criteria);
+    Set<Objective> getObjectivesByCriteria(@NotNull Criteria criteria) throws IllegalArgumentException;
 
     /**
      * Gets all Objectives of a Criteria on the Scoreboard
      *
      * @param criteria Criteria to search by
      * @return an immutable set of Objectives using the specified Criteria
+     * @throws IllegalArgumentException if criteria is null
      */
     @NotNull
-    Set<Objective> getObjectivesByCriteria(@NotNull Criteria criteria);
+    Set<Objective> getObjectivesByCriteria(@NotNull String criteria) throws IllegalArgumentException;
 
     /**
      * Gets all Objectives on this Scoreboard
@@ -135,77 +161,85 @@
      * @param slot The DisplaySlot
      * @return the Objective currently displayed or null if nothing is
      *     displayed in that DisplaySlot
+     * @throws IllegalArgumentException if slot is null
      */
     @Nullable
-    Objective getObjective(@NotNull DisplaySlot slot);
+    Objective getObjective(@NotNull DisplaySlot slot) throws IllegalArgumentException;
 
     /**
      * Gets all scores for a player on this Scoreboard
      *
      * @param player the player whose scores are being retrieved
      * @return immutable set of all scores tracked for the player
+     * @throws IllegalArgumentException if player is null
      * @see #getScores(String)
      * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     @NotNull
-    Set<Score> getScores(@NotNull OfflinePlayer player);
+    Set<Score> getScores(@NotNull OfflinePlayer player) throws IllegalArgumentException;
 
     /**
      * Gets all scores for an entry on this Scoreboard
      *
      * @param entry the entry whose scores are being retrieved
      * @return immutable set of all scores tracked for the entry
+     * @throws IllegalArgumentException if entry is null
      */
     @NotNull
-    Set<Score> getScores(@NotNull String entry);
+    Set<Score> getScores(@NotNull String entry) throws IllegalArgumentException;
 
     /**
      * Removes all scores for a player on this Scoreboard
      *
      * @param player the player to drop all current scores for
+     * @throws IllegalArgumentException if player is null
      * @see #resetScores(String)
      * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
-    void resetScores(@NotNull OfflinePlayer player);
+    void resetScores(@NotNull OfflinePlayer player) throws IllegalArgumentException;
 
     /**
      * Removes all scores for an entry on this Scoreboard
      *
      * @param entry the entry to drop all current scores for
+     * @throws IllegalArgumentException if entry is null
      */
-    void resetScores(@NotNull String entry);
+    void resetScores(@NotNull String entry) throws IllegalArgumentException;
 
     /**
      * Gets a player's Team on this Scoreboard
      *
      * @param player the player to search for
      * @return the player's Team or null if the player is not on a team
+     * @throws IllegalArgumentException if player is null
      * @see #getEntryTeam(String)
      * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     @Nullable
-    Team getPlayerTeam(@NotNull OfflinePlayer player);
+    Team getPlayerTeam(@NotNull OfflinePlayer player) throws IllegalArgumentException;
 
     /**
      * Gets a entries Team on this Scoreboard
      *
      * @param entry the entry to search for
      * @return the entries Team or null if the entry is not on a team
+     * @throws IllegalArgumentException if entry is null
      */
     @Nullable
-    Team getEntryTeam(@NotNull String entry);
+    Team getEntryTeam(@NotNull String entry) throws IllegalArgumentException;
 
     /**
      * Gets a Team by name on this Scoreboard
      *
      * @param teamName Team name
      * @return the matching Team or null if no matches
+     * @throws IllegalArgumentException if teamName is null
      */
     @Nullable
-    Team getTeam(@NotNull String teamName);
+    Team getTeam(@NotNull String teamName) throws IllegalArgumentException;
 
     /**
      * Gets all teams on this Scoreboard
@@ -220,10 +254,11 @@
      *
      * @param name Team name
      * @return registered Team
+     * @throws IllegalArgumentException if name is null
      * @throws IllegalArgumentException if team by that name already exists
      */
     @NotNull
-    Team registerNewTeam(@NotNull String name);
+    Team registerNewTeam(@NotNull String name) throws IllegalArgumentException;
 
     /**
      * Gets all players tracked by this Scoreboard
@@ -248,6 +283,7 @@
      * Clears any objective in the specified slot.
      *
      * @param slot the slot to remove objectives
+     * @throws IllegalArgumentException if slot is null
      */
-    void clearSlot(@NotNull DisplaySlot slot);
-}
\ No newline at end of file
+    void clearSlot(@NotNull DisplaySlot slot) throws IllegalArgumentException;
+}
Index: src/main/java/org/bukkit/scoreboard/ScoreboardManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java b/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java
--- a/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.scoreboard;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.lang.ref.WeakReference;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Manager of Scoreboards
Index: src/main/java/org/bukkit/scoreboard/Team.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
--- a/src/main/java/org/bukkit/scoreboard/Team.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/scoreboard/Team.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.scoreboard;
 
+import java.util.Set;
 import org.bukkit.ChatColor;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Set;
-
 /**
  * A team on a scoreboard that has a common display theme and other
  * properties. This team is only relevant to the display of the associated
@@ -22,7 +21,7 @@
      * @throws IllegalStateException if this team has been unregistered
      */
     @NotNull
-    String getName();
+    String getName() throws IllegalStateException;
 
     /**
      * Gets the name displayed to entries for this team
@@ -31,15 +30,17 @@
      * @throws IllegalStateException if this team has been unregistered
      */
     @NotNull
-    String getDisplayName();
+    String getDisplayName() throws IllegalStateException;
 
     /**
      * Sets the name displayed to entries for this team
      *
      * @param displayName New display name
+     * @throws IllegalArgumentException if displayName is longer than 128
+     *     characters.
      * @throws IllegalStateException if this team has been unregistered
      */
-    void setDisplayName(@NotNull String displayName);
+    void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * Gets the prefix prepended to the display of entries on this team.
@@ -48,15 +49,18 @@
      * @throws IllegalStateException if this team has been unregistered
      */
     @NotNull
-    String getPrefix();
+    String getPrefix() throws IllegalStateException;
 
     /**
      * Sets the prefix prepended to the display of entries on this team.
      *
      * @param prefix New prefix
+     * @throws IllegalArgumentException if prefix is null
+     * @throws IllegalArgumentException if prefix is longer than 64
+     *     characters
      * @throws IllegalStateException if this team has been unregistered
      */
-    void setPrefix(@NotNull String prefix);
+    void setPrefix(@NotNull String prefix) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * Gets the suffix appended to the display of entries on this team.
@@ -65,15 +69,18 @@
      * @throws IllegalStateException if this team has been unregistered
      */
     @NotNull
-    String getSuffix();
+    String getSuffix() throws IllegalStateException;
 
     /**
      * Sets the suffix appended to the display of entries on this team.
      *
      * @param suffix the new suffix for this team.
+     * @throws IllegalArgumentException if suffix is null
+     * @throws IllegalArgumentException if suffix is longer than 64
+     *     characters
      * @throws IllegalStateException if this team has been unregistered
      */
-    void setSuffix(@NotNull String suffix);
+    void setSuffix(@NotNull String suffix) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * Gets the color of the team.
@@ -85,7 +92,7 @@
      * @throws IllegalStateException if this team has been unregistered
      */
     @NotNull
-    ChatColor getColor();
+    ChatColor getColor() throws IllegalStateException;
 
     /**
      * Sets the color of the team.
@@ -104,7 +111,7 @@
      * @return true if friendly fire is enabled
      * @throws IllegalStateException if this team has been unregistered
      */
-    boolean allowFriendlyFire();
+    boolean allowFriendlyFire() throws IllegalStateException;
 
     /**
      * Sets the team friendly fire state
@@ -112,7 +119,7 @@
      * @param enabled true if friendly fire is to be allowed
      * @throws IllegalStateException if this team has been unregistered
      */
-    void setAllowFriendlyFire(boolean enabled);
+    void setAllowFriendlyFire(boolean enabled) throws IllegalStateException;
 
     /**
      * Gets the team's ability to see {@link PotionEffectType#INVISIBILITY
@@ -121,7 +128,7 @@
      * @return true if team members can see invisible members
      * @throws IllegalStateException if this team has been unregistered
      */
-    boolean canSeeFriendlyInvisibles();
+    boolean canSeeFriendlyInvisibles() throws IllegalStateException;
 
     /**
      * Sets the team's ability to see {@link PotionEffectType#INVISIBILITY
@@ -130,28 +137,29 @@
      * @param enabled true if invisible teammates are to be visible
      * @throws IllegalStateException if this team has been unregistered
      */
-    void setCanSeeFriendlyInvisibles(boolean enabled);
+    void setCanSeeFriendlyInvisibles(boolean enabled) throws IllegalStateException;
 
     /**
      * Gets the team's ability to see name tags
      *
      * @return the current name tag visibility for the team
      * @throws IllegalArgumentException if this team has been unregistered
-     * @deprecated see {@link #getOption(Team.Option)}
+     * @deprecated see {@link #getOption(org.bukkit.scoreboard.Team.Option)}
      */
     @Deprecated
     @NotNull
-    NameTagVisibility getNameTagVisibility();
+    NameTagVisibility getNameTagVisibility() throws IllegalArgumentException;
 
     /**
      * Set's the team's ability to see name tags
      *
      * @param visibility The nameTagVisibility to set
      * @throws IllegalArgumentException if this team has been unregistered
-     * @deprecated see {@link #setOption(Team.Option, Team.OptionStatus)}
+     * @deprecated see
+     * {@link #setOption(org.bukkit.scoreboard.Team.Option, org.bukkit.scoreboard.Team.OptionStatus)}
      */
     @Deprecated
-    void setNameTagVisibility(@NotNull NameTagVisibility visibility);
+    void setNameTagVisibility(@NotNull NameTagVisibility visibility) throws IllegalArgumentException;
 
     /**
      * Gets the Set of players on the team
@@ -163,16 +171,16 @@
      */
     @Deprecated
     @NotNull
-    Set<OfflinePlayer> getPlayers();
+    Set<OfflinePlayer> getPlayers() throws IllegalStateException;
 
     /**
      * Gets the Set of entries on the team
      *
      * @return entries on the team
-     * @throws IllegalStateException if this entries has been unregistered
+     * @throws IllegalStateException if this entries has been unregistered\
      */
     @NotNull
-    Set<String> getEntries();
+    Set<String> getEntries() throws IllegalStateException;
 
     /**
      * Gets the size of the team
@@ -180,7 +188,7 @@
      * @return number of entries on the team
      * @throws IllegalStateException if this team has been unregistered
      */
-    int getSize();
+    int getSize() throws IllegalStateException;
 
     /**
      * Gets the Scoreboard to which this team is attached
@@ -197,12 +205,13 @@
      * This will remove the player from any other team on the scoreboard.
      *
      * @param player the player to add
+     * @throws IllegalArgumentException if player is null
      * @throws IllegalStateException if this team has been unregistered
      * @see #addEntry(String)
      * @deprecated Teams can contain entries that aren't players
      */
     @Deprecated
-    void addPlayer(@NotNull OfflinePlayer player);
+    void addPlayer(@NotNull OfflinePlayer player) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * This puts the specified entry onto this team for the scoreboard.
@@ -210,57 +219,62 @@
      * This will remove the entry from any other team on the scoreboard.
      *
      * @param entry the entry to add
+     * @throws IllegalArgumentException if entry is null
      * @throws IllegalStateException if this team has been unregistered
      */
-    void addEntry(@NotNull String entry);
+    void addEntry(@NotNull String entry) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * Removes the player from this team.
      *
      * @param player the player to remove
      * @return if the player was on this team
+     * @throws IllegalArgumentException if player is null
      * @throws IllegalStateException if this team has been unregistered
      * @see #removeEntry(String)
      * @deprecated Teams can contain entries that aren't players
      */
     @Deprecated
-    boolean removePlayer(@NotNull OfflinePlayer player);
+    boolean removePlayer(@NotNull OfflinePlayer player) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * Removes the entry from this team.
      *
      * @param entry the entry to remove
      * @return if the entry was a part of this team
+     * @throws IllegalArgumentException if entry is null
      * @throws IllegalStateException if this team has been unregistered
      */
-    boolean removeEntry(@NotNull String entry);
+    boolean removeEntry(@NotNull String entry) throws IllegalStateException, IllegalArgumentException;
 
     /**
      * Unregisters this team from the Scoreboard
      *
      * @throws IllegalStateException if this team has been unregistered
      */
-    void unregister();
+    void unregister() throws IllegalStateException;
 
     /**
      * Checks to see if the specified player is a member of this team.
      *
      * @param player the player to search for
      * @return true if the player is a member of this team
+     * @throws IllegalArgumentException if player is null
      * @throws IllegalStateException if this team has been unregistered
      * @see #hasEntry(String)
      * @deprecated Teams can contain entries that aren't players
      */
     @Deprecated
-    boolean hasPlayer(@NotNull OfflinePlayer player);
+    boolean hasPlayer(@NotNull OfflinePlayer player) throws IllegalArgumentException, IllegalStateException;
     /**
      * Checks to see if the specified entry is a member of this team.
      *
      * @param entry the entry to search for
      * @return true if the entry is a member of this team
+     * @throws IllegalArgumentException if entry is null
      * @throws IllegalStateException if this team has been unregistered
      */
-    boolean hasEntry(@NotNull String entry);
+    boolean hasEntry(@NotNull String entry) throws IllegalArgumentException, IllegalStateException;
 
     /**
      * Get an option for this team
@@ -270,7 +284,7 @@
      * @throws IllegalStateException if this team has been unregistered
      */
     @NotNull
-    OptionStatus getOption(@NotNull Option option);
+    OptionStatus getOption(@NotNull Option option) throws IllegalStateException;
 
     /**
      * Set an option for this team
@@ -279,7 +293,7 @@
      * @param status the new option status
      * @throws IllegalStateException if this team has been unregistered
      */
-    void setOption(@NotNull Option option, @NotNull OptionStatus status);
+    void setOption(@NotNull Option option, @NotNull OptionStatus status) throws IllegalStateException;
 
     /**
      * Represents an option which may be applied to this team.
@@ -322,4 +336,4 @@
          */
         FOR_OWN_TEAM;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/loot/LootTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/loot/LootTable.java b/src/main/java/org/bukkit/loot/LootTable.java
--- a/src/main/java/org/bukkit/loot/LootTable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/loot/LootTable.java	(date 1703956060000)
@@ -1,20 +1,19 @@
 package org.bukkit.loot;
 
+import java.util.Collection;
+import java.util.Random;
 import org.bukkit.Keyed;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-import java.util.Random;
-
 /**
  * LootTables are technical files that represent what items should be in
  * naturally generated containers, what items should be dropped when killing a
  * mob, or what items can be fished.
  *
- * See the <a href="https://minecraft.gamepedia.com/Loot_table">
+ * See the <a href="https://minecraft.wiki/w/Loot_table">
  * Minecraft Wiki</a> for more information.
  */
 public interface LootTable extends Keyed {
Index: src/main/java/org/bukkit/loot/LootTables.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/loot/LootTables.java b/src/main/java/org/bukkit/loot/LootTables.java
--- a/src/main/java/org/bukkit/loot/LootTables.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/loot/LootTables.java	(date 1703956060000)
@@ -2,15 +2,16 @@
 
 import org.bukkit.Bukkit;
 import org.bukkit.Keyed;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * This enum holds a list of all known {@link LootTable}s offered by Mojang.
  * This list is not guaranteed to be accurate in future versions.
- *
+ * <br>
  * See the
- * <a href="https://minecraft.gamepedia.com/Loot_table#List_of_loot_tables">
+ * <a href="https://minecraft.wiki/w/Loot_table#List_of_loot_tables">
  * Minecraft Wiki</a> for more information on loot tables.
  */
 public enum LootTables implements Keyed {
@@ -33,6 +34,26 @@
     ANCIENT_CITY("chests/ancient_city"),
     ANCIENT_CITY_ICE_BOX("chests/ancient_city_ice_box"),
     RUINED_PORTAL("chests/ruined_portal"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_REWARD("chests/trial_chambers/reward"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_SUPPLY("chests/trial_chambers/supply"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_CORRIDOR("chests/trial_chambers/corridor"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_INTERSECTION("chests/trial_chambers/intersection"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_INTERSECTION_BARREL("chests/trial_chambers/intersection_barrel"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_ENTRANCE("chests/trial_chambers/entrance"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_CORRIDOR_DISPENSER("dispensers/trial_chambers/corridor"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_CHAMBER_DISPENSER("dispensers/trial_chambers/chamber"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_WATER_DISPENSER("dispensers/trial_chambers/water"),
+    @MinecraftExperimental
+    TRIAL_CHAMBERS_CORRIDOR_POT("pots/trial_chambers/corridor"),
     SHIPWRECK_MAP("chests/shipwreck_map"),
     SHIPWRECK_SUPPLY("chests/shipwreck_supply"),
     SHIPWRECK_TREASURE("chests/shipwreck_treasure"),
@@ -157,6 +178,9 @@
     WEAPONSMITH_GIFT("gameplay/hero_of_the_village/weaponsmith_gift"),
     SNIFFER_DIGGING("gameplay/sniffer_digging"),
     PIGLIN_BARTERING("gameplay/piglin_bartering"),
+    // Spawners
+    TRIAL_CHAMBER_KEY("spawners/trial_chamber/key"),
+    RIAL_CHAMBER_CONSUMABLES("spawners/trial_chamber/consumables"),
     // Archaeology
     DESERT_WELL_ARCHAEOLOGY("archaeology/desert_well"),
     DESERT_PYRAMID_ARCHAEOLOGY("archaeology/desert_pyramid"),
Index: src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
--- a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.event.raid;
 
+import java.util.Collections;
+import java.util.List;
 import org.bukkit.Raid;
 import org.bukkit.World;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * This event is called when a {@link Raid} was complete with a clear result.
  */
Index: src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
--- a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.event.raid;
 
+import java.util.Collections;
+import java.util.List;
 import org.bukkit.Raid;
 import org.bukkit.World;
 import org.bukkit.entity.Raider;
@@ -7,9 +9,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * Called when a raid wave spawns.
  */
Index: src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
--- a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.block;
 
+import java.util.List;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
@@ -7,8 +8,6 @@
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when a sponge absorbs water from the world.
  * <br>
Index: src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
--- a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.event.enchantment;
 
 import com.google.common.base.Preconditions;
+import java.util.HashMap;
+import java.util.Map;
 import org.bukkit.block.Block;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.entity.Player;
@@ -11,9 +13,6 @@
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Called when an ItemStack is successfully enchanted (currently at
  * enchantment table)
@@ -25,9 +24,9 @@
     private int level;
     private boolean cancelled;
     private final Map<Enchantment, Integer> enchants;
-    private final Player enchanter;
     private final Enchantment enchantmentHint;
     private final int levelHint;
+    private final Player enchanter;
     private final int button;
 
     public EnchantItemEvent(@NotNull final Player enchanter, @NotNull final InventoryView view, @NotNull final Block table, @NotNull final ItemStack item, final int level, @NotNull final Map<Enchantment, Integer> enchants, @NotNull final Enchantment enchantmentHint, final int levelHint, final int i) {
Index: src/main/java/org/bukkit/metadata/MetadataStore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/metadata/MetadataStore.java b/src/main/java/org/bukkit/metadata/MetadataStore.java
--- a/src/main/java/org/bukkit/metadata/MetadataStore.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/metadata/MetadataStore.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.metadata;
 
+import java.util.List;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 public interface MetadataStore<T> {
     /**
      * Adds a metadata value to an object.
Index: src/main/java/org/bukkit/metadata/LazyMetadataValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
--- a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.metadata;
 
 import com.google.common.base.Preconditions;
+import java.lang.ref.SoftReference;
+import java.util.concurrent.Callable;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.lang.ref.SoftReference;
-import java.util.concurrent.Callable;
-
 /**
  * The LazyMetadataValue class implements a type of metadata that is not
  * computed until another plugin asks for it.
Index: src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
--- a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.metadata;
 
 import com.google.common.base.Preconditions;
+import java.lang.ref.WeakReference;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.NumberConversions;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.lang.ref.WeakReference;
-
 /**
  * Optional base class for facilitating MetadataValue implementations.
  * <p>
Index: src/main/java/org/bukkit/metadata/MetadataStoreBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java	(date 1703956060000)
@@ -1,9 +1,6 @@
 package org.bukkit.metadata;
 
 import com.google.common.base.Preconditions;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -11,6 +8,8 @@
 import java.util.List;
 import java.util.Map;
 import java.util.WeakHashMap;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 public abstract class MetadataStoreBase<T> {
     private Map<String, Map<Plugin, MetadataValue>> metadataMap = new HashMap<String, Map<Plugin, MetadataValue>>();
Index: src/main/java/org/bukkit/metadata/Metadatable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/metadata/Metadatable.java b/src/main/java/org/bukkit/metadata/Metadatable.java
--- a/src/main/java/org/bukkit/metadata/Metadatable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/metadata/Metadatable.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.metadata;
 
+import java.util.List;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * This interface is implemented by all objects that can provide metadata
  * about themselves.
Index: src/main/java/org/spigotmc/ActivationRange.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
--- a/src/main/java/org/spigotmc/ActivationRange.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/ActivationRange.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.LightningBolt;
@@ -13,6 +13,7 @@
 import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.monster.Creeper;
 import net.minecraft.world.entity.monster.Monster;
@@ -76,10 +77,10 @@
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
     {
-        if ( ( entity.bridge$activationType() == ActivationType.MISC && config.miscActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.RAIDER && config.raiderActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.ANIMAL && config.animalActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.MONSTER && config.monsterActivationRange == 0 )
+        if ( ( entity.activationType == ActivationType.MISC && config.miscActivationRange == 0 )
+                || ( entity.activationType == ActivationType.RAIDER && config.raiderActivationRange == 0 )
+                || ( entity.activationType == ActivationType.ANIMAL && config.animalActivationRange == 0 )
+                || ( entity.activationType == ActivationType.MONSTER && config.monsterActivationRange == 0 )
                 || entity instanceof Player
                 || entity instanceof ThrowableProjectile
                 || entity instanceof EnderDragon
@@ -106,20 +107,20 @@
      */
     public static void activateEntities(Level world)
     {
-        final int miscActivationRange = world.bridge$spigotConfig().miscActivationRange;
-        final int raiderActivationRange = world.bridge$spigotConfig().raiderActivationRange;
-        final int animalActivationRange = world.bridge$spigotConfig().animalActivationRange;
-        final int monsterActivationRange = world.bridge$spigotConfig().monsterActivationRange;
+        final int miscActivationRange = world.spigotConfig.miscActivationRange;
+        final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
+        final int animalActivationRange = world.spigotConfig.animalActivationRange;
+        final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
 
         int maxRange = Math.max( monsterActivationRange, animalActivationRange );
         maxRange = Math.max( maxRange, raiderActivationRange );
         maxRange = Math.max( maxRange, miscActivationRange );
-        maxRange = Math.min( ( world.bridge$spigotConfig().simulationDistance << 4 ) - 8, maxRange );
+        maxRange = Math.min( ( world.spigotConfig.simulationDistance << 4 ) - 8, maxRange );
 
         for ( Player player : world.players() )
         {
-            player.banner$setActivatedTick(BukkitExtraConstants.currentTick);
-            if ( world.bridge$spigotConfig().ignoreSpectatorActivation && player.isSpectator() )
+            player.activatedTick = MinecraftServer.currentTick;
+            if ( world.spigotConfig.ignoreSpectatorActivation && player.isSpectator() )
             {
                 continue;
             }
@@ -136,20 +137,20 @@
     /**
      * Checks for the activation state of all entities in this chunk.
      *
-     * @param
+     * @param chunk
      */
     private static void activateEntity(Entity entity)
     {
-        if ( BukkitExtraConstants.currentTick > entity.bridge$activatedTick() )
+        if ( MinecraftServer.currentTick > entity.activatedTick )
         {
-            if ( entity.bridge$defaultActivationState() )
+            if ( entity.defaultActivationState )
             {
-                entity.banner$setActivatedTick(BukkitExtraConstants.currentTick);
+                entity.activatedTick = MinecraftServer.currentTick;
                 return;
             }
-            if ( entity.bridge$activationType().boundingBox.intersects( entity.getBoundingBox() ) )
+            if ( entity.activationType.boundingBox.intersects( entity.getBoundingBox() ) )
             {
-                entity.banner$setActivatedTick(BukkitExtraConstants.currentTick);
+                entity.activatedTick = MinecraftServer.currentTick;
             }
         }
     }
@@ -230,22 +231,26 @@
             return true;
         }
 
-        boolean isActive = entity.bridge$activatedTick() >= BukkitExtraConstants.currentTick || entity.bridge$defaultActivationState();
+        if ( entity instanceof ItemEntity) {
+            return true;
+        }
+
+        boolean isActive = entity.activatedTick >= MinecraftServer.currentTick || entity.defaultActivationState;
         // Should this entity tick?
         if ( !isActive )
         {
-            if ( ( BukkitExtraConstants.currentTick - entity.bridge$activatedTick() - 1 ) % 20 == 0 )
+            if ( ( MinecraftServer.currentTick - entity.activatedTick - 1 ) % 20 == 0 )
             {
                 // Check immunities every 20 ticks.
                 if ( checkEntityImmunities( entity ) )
                 {
                     // Triggered some sort of immunity, give 20 full ticks before we check again.
-                    entity.banner$setActivatedTick(BukkitExtraConstants.currentTick + 20);
+                    entity.activatedTick = MinecraftServer.currentTick + 20;
                 }
                 isActive = true;
             }
             // Add a little performance juice to active entities. Skip 1/4 if not immune.
-        } else if ( !entity.bridge$defaultActivationState() && entity.tickCount % 4 == 0 && !checkEntityImmunities( entity ) )
+        } else if ( !entity.defaultActivationState && entity.tickCount % 4 == 0 && !checkEntityImmunities( entity ) )
         {
             isActive = false;
         }
Index: src/main/java/org/spigotmc/WatchdogThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
--- a/src/main/java/org/spigotmc/WatchdogThread.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/WatchdogThread.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
-import org.bukkit.Bukkit;
-
 import java.lang.management.ManagementFactory;
 import java.lang.management.MonitorInfo;
 import java.lang.management.ThreadInfo;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
 
 public class WatchdogThread extends Thread
 {
@@ -32,8 +31,6 @@
 
     public static void doStart(int timeoutTime, boolean restart)
     {
-        // Banner Start - disabled watchdog
-        /*
         if ( instance == null )
         {
             instance = new WatchdogThread( timeoutTime * 1000L, restart );
@@ -42,13 +39,12 @@
         {
             instance.timeoutTime = timeoutTime * 1000L;
             instance.restart = restart;
-        }*/
-        // Banner end
+        }
     }
 
     public static void tick()
     {
-        //instance.lastTick = monotonicMillis(); // Banner - disabled
+        instance.lastTick = monotonicMillis();
     }
 
     public static void doStop()
@@ -79,7 +75,7 @@
                 log.log( Level.SEVERE, "Spigot version: " + Bukkit.getServer().getVersion() );
                 log.log( Level.SEVERE, "------------------------------" );
                 log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Spigot!):" );
-                dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( BukkitExtraConstants.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
+                dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
                 log.log( Level.SEVERE, "------------------------------" );
                 //
                 log.log( Level.SEVERE, "Entire Thread Dump:" );
Index: src/main/java/org/spigotmc/SpigotCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/SpigotCommand.java b/src/main/java/org/spigotmc/SpigotCommand.java
--- a/src/main/java/org/spigotmc/SpigotCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/SpigotCommand.java	(date 1703956060000)
@@ -1,14 +1,12 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.io.File;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
-import java.io.File;
-
 public class SpigotCommand extends Command {
 
     public SpigotCommand(String name) {
@@ -31,12 +29,12 @@
             Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
             Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
 
-            MinecraftServer console = BukkitExtraConstants.getServer();
-            SpigotConfig.init((File) console.bridge$options().valueOf("spigot-settings"));
+            MinecraftServer console = MinecraftServer.getServer();
+            SpigotConfig.init((File) MinecraftServer.options.valueOf("spigot-settings"));
             for (ServerLevel world : console.getAllLevels()) {
-                world.bridge$spigotConfig().init();
+                world.spigotConfig.init();
             }
-            console.bridge$server().reloadCount++;
+            console.server.reloadCount++;
 
             Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
         }
Index: src/main/java/org/spigotmc/SpigotWorldConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.spigotmc;
 
+import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-import java.util.List;
-
 public class SpigotWorldConfig
 {
 
@@ -113,7 +112,6 @@
 
         return modifier;
     }
-
     private void growthModifiers()
     {
         cactusModifier = getAndValidateGrowth( "Cactus" );
@@ -193,7 +191,7 @@
     public int itemDespawnRate;
     private void itemDespawnRate()
     {
-        itemDespawnRate = getInt( "item-despawn-rate", 1200 );
+        itemDespawnRate = getInt( "item-despawn-rate", 6000 );
         log( "Item Despawn Rate: " + itemDespawnRate );
     }
 
@@ -376,15 +374,6 @@
         hangingTickFrequency = getInt( "hanging-tick-frequency", 100 );
     }
 
-    public int tileMaxTickTime;
-    public int entityMaxTickTime;
-    private void maxTickTimes()
-    {
-        tileMaxTickTime = getInt("max-tick-time.tile", 8);
-        entityMaxTickTime = getInt("max-tick-time.entity", 16);
-        log("Tile Max Tick Time: " + tileMaxTickTime + "ms Entity max Tick Time: " + entityMaxTickTime + "ms");
-    }
-
     public int thunderChance;
     private void thunderChance()
     {
Index: src/main/java/org/spigotmc/TrackingRange.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
--- a/src/main/java/org/spigotmc/TrackingRange.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/TrackingRange.java	(date 1703956060000)
@@ -25,11 +25,11 @@
         {
             return defaultRange;
         }
-        SpigotWorldConfig config = entity.level().bridge$spigotConfig();
+        SpigotWorldConfig config = entity.level.spigotConfig;
         if ( entity instanceof ServerPlayer)
         {
             return config.playerTrackingRange;
-        } else if ( entity.bridge$activationType() == ActivationRange.ActivationType.MONSTER || entity.bridge$activationType() == ActivationRange.ActivationType.RAIDER )
+        } else if ( entity.activationType == ActivationRange.ActivationType.MONSTER || entity.activationType == ActivationRange.ActivationType.RAIDER )
         {
             return config.monsterTrackingRange;
         } else if ( entity instanceof Ghast)
@@ -41,7 +41,7 @@
             {
                     return config.monsterActivationRange;
             }
-        } else if ( entity.bridge$activationType() == ActivationRange.ActivationType.ANIMAL )
+        } else if ( entity.activationType == ActivationRange.ActivationType.ANIMAL )
         {
             return config.animalTrackingRange;
         } else if ( entity instanceof ItemFrame || entity instanceof Painting || entity instanceof ItemEntity || entity instanceof ExperienceOrb)
Index: src/main/java/org/spigotmc/SpigotConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
--- a/src/main/java/org/spigotmc/SpigotConfig.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/SpigotConfig.java	(date 1703956060000)
@@ -1,9 +1,21 @@
 package org.spigotmc;
 
 import com.google.common.base.Throwables;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.logging.Level;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.attributes.RangedAttribute;
 import org.apache.logging.log4j.LogManager;
@@ -16,20 +28,6 @@
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.logging.Level;
-
 public class SpigotConfig
 {
 
@@ -57,7 +55,7 @@
         config = new YamlConfiguration();
         try
         {
-            config.load(CONFIG_FILE);
+            config.load( CONFIG_FILE );
         } catch ( IOException ex )
         {
         } catch ( InvalidConfigurationException ex )
@@ -80,7 +78,7 @@
     public static void registerCommands()
     {
         for ( Map.Entry<String, Command> entry : commands.entrySet() ) {
-            Objects.requireNonNull(BukkitExtraConstants.getServer()).bridge$server().getCommandMap().register(entry.getKey(), "Spigot", entry.getValue());
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Spigot", entry.getValue());
         }
     }
 
@@ -210,7 +208,7 @@
         restartOnCrash = getBoolean( "settings.restart-on-crash", restartOnCrash );
         restartScript = getString( "settings.restart-script", restartScript );
         restartMessage = transform( getString( "messages.restart", "Server is restarting" ) );
-        // WatchdogThread.doStart( timeoutTime, restartOnCrash ); // Banner - disabled
+        WatchdogThread.doStart( timeoutTime, restartOnCrash );
     }
 
     public static boolean bungee;
Index: src/main/java/org/spigotmc/AsyncCatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
--- a/src/main/java/org/spigotmc/AsyncCatcher.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java	(date 1703956060000)
@@ -1,17 +1,26 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 
 public class AsyncCatcher
 {
 
-    public static boolean enabled = false;
+    public static boolean enabled = true;
 
     public static void catchOp(String reason)
     {
-        if ( (AsyncCatcher.enabled || io.papermc.paper.util.TickThread.STRICT_THREAD_CHECKS) && Thread.currentThread() != BukkitExtraConstants.getServer().serverThread ) // Paper
+        if ( enabled && Thread.currentThread() != MinecraftServer.getServer().serverThread )
         {
             throw new IllegalStateException( "Asynchronous " + reason + "!" );
         }
     }
+
+    public static boolean catchAsync()
+    {
+        if ( enabled && Thread.currentThread() != MinecraftServer.getServer().serverThread )
+        {
+            return true;
+        }
+        return false;
+    }
 }
Index: src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
--- a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java	(date 1703956060000)
@@ -2,22 +2,21 @@
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
-import org.bukkit.entity.Player;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Standard implementation to {@link Messenger}
  */
 public class StandardMessenger implements Messenger {
-    private final Map<String, Set<PluginMessageListenerRegistration>> incomingByChannel = new HashMap<String, Set<PluginMessageListenerRegistration>>();
+    public final Map<String, Set<PluginMessageListenerRegistration>> incomingByChannel = new HashMap<String, Set<PluginMessageListenerRegistration>>();
     private final Map<Plugin, Set<PluginMessageListenerRegistration>> incomingByPlugin = new HashMap<Plugin, Set<PluginMessageListenerRegistration>>();
     private final Map<String, Set<Plugin>> outgoingByChannel = new HashMap<String, Set<Plugin>>();
     private final Map<Plugin, Set<String>> outgoingByPlugin = new HashMap<Plugin, Set<String>>();
Index: src/main/java/org/bukkit/plugin/messaging/Messenger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/messaging/Messenger.java b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
--- a/src/main/java/org/bukkit/plugin/messaging/Messenger.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/messaging/Messenger.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.plugin.messaging;
 
+import java.util.Set;
 import org.bukkit.NamespacedKey;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * A class responsible for managing the registrations of plugin channels and
  * their listeners.
@@ -25,7 +24,7 @@
     /**
      * Represents the largest size that a Plugin Channel may be.
      */
-    public static final int MAX_CHANNEL_SIZE = Integer.getInteger("paper.maxCustomChannelName", 64);
+    public static final int MAX_CHANNEL_SIZE = 64;
 
     /**
      * Checks if the specified channel is a reserved name.
Index: src/main/java/org/spigotmc/LimitStream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/spigotmc/LimitStream.java b/src/main/java/org/spigotmc/LimitStream.java
--- a/src/main/java/org/spigotmc/LimitStream.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/spigotmc/LimitStream.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.spigotmc;
 
-import net.minecraft.nbt.NbtAccounter;
-
 import java.io.FilterInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import net.minecraft.nbt.NbtAccounter;
 
 public class LimitStream extends FilterInputStream
 {
Index: src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.plugin.messaging;
 
+import java.util.Set;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Represents a possible recipient for a Plugin Message.
  */
Index: src/main/java/org/bukkit/plugin/PluginLogger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/PluginLogger.java b/src/main/java/org/bukkit/plugin/PluginLogger.java
--- a/src/main/java/org/bukkit/plugin/PluginLogger.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/PluginLogger.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.plugin;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * The PluginLogger class is a modified {@link Logger} that prepends all
Index: src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java	(date 1703956060000)
@@ -1,8 +1,25 @@
 package org.bukkit.plugin.java;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.stackdeobf.mappings.RemappingUtil;
-import com.mohistmc.banner.util.I18n;
+import com.mohistmc.org.yaml.snakeyaml.error.YAMLException;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
 import org.bukkit.Server;
 import org.bukkit.Warning;
 import org.bukkit.Warning.WarningState;
@@ -27,26 +44,6 @@
 import org.bukkit.plugin.UnknownDependencyException;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.yaml.snakeyaml.error.YAMLException;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
-import java.util.logging.Level;
-import java.util.regex.Pattern;
 
 /**
  * Represents a Java plugin loader, allowing plugins in the form of .jar
@@ -67,13 +64,13 @@
         Preconditions.checkArgument(instance != null, "Server cannot be null");
         server = instance;
 
+
         LibraryLoader libraryLoader = null;
         try {
             libraryLoader = new LibraryLoader();
         } catch (NoClassDefFoundError ex) {
             // Provided depends were not added back
             server.getLogger().warning("Could not initialize LibraryLoader (missing dependencies?)");
-            server.getLogger().warning("Caused by " + ex.getCause());
         }
         this.libraryLoader = libraryLoader;
     }
@@ -148,7 +145,6 @@
         } catch (InvalidPluginException ex) {
             throw ex;
         } catch (Throwable ex) {
-            RemappingUtil.remapStackTraceElements(ex.getStackTrace());
             throw new InvalidPluginException(ex);
         }
 
@@ -306,7 +302,6 @@
                     } catch (InvocationTargetException ex) {
                         throw new EventException(ex.getCause());
                     } catch (Throwable t) {
-                        RemappingUtil.remapStackTraceElements(t.getStackTrace());
                         throw new EventException(t);
                     }
                 }
@@ -325,7 +320,7 @@
         Preconditions.checkArgument(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
 
         if (!plugin.isEnabled()) {
-            plugin.getLogger().info(I18n.as("bukkit.plugin.enabling") + " " + plugin.getDescription().getFullName());
+            plugin.getLogger().info("Enabling " + plugin.getDescription().getFullName());
 
             JavaPlugin jPlugin = (JavaPlugin) plugin;
 
@@ -339,7 +334,6 @@
             try {
                 jPlugin.setEnabled(true);
             } catch (Throwable ex) {
-                RemappingUtil.remapStackTraceElements(ex.getStackTrace());
                 server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
                 // Mohist start - Disable plugins that fail to load
                 this.server.getPluginManager().disablePlugin(jPlugin);
@@ -358,7 +352,7 @@
         Preconditions.checkArgument(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
 
         if (plugin.isEnabled()) {
-            String message = String.format(I18n.as("bukkit.plugin.disabling"), plugin.getDescription().getFullName());
+            String message = String.format("Disabling %s", plugin.getDescription().getFullName());
             plugin.getLogger().info(message);
 
             server.getPluginManager().callEvent(new PluginDisableEvent(plugin));
@@ -369,7 +363,6 @@
             try {
                 jPlugin.setEnabled(false);
             } catch (Throwable ex) {
-                RemappingUtil.remapStackTraceElements(ex.getStackTrace());
                 server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
Index: src/main/java/org/bukkit/plugin/java/LibraryLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
--- a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java	(date 1703956060000)
@@ -1,30 +1,26 @@
 package org.bukkit.plugin.java;
 
-import com.mohistmc.banner.BannerServer;
-import com.mohistmc.banner.bukkit.PluginsLibrarySource;
-import com.mohistmc.banner.bukkit.remapping.RemappingURLClassLoader;
-import com.mohistmc.banner.util.I18n;
+import com.mohistmc.mohist.Mohist;
+import com.mohistmc.mohist.bukkit.PluginsLibrarySource;
+import com.mohistmc.mohist.bukkit.remapping.RemappingURLClassLoader;
 import com.mohistmc.tools.ConnectionUtil;
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
 import java.net.URI;
+import java.net.URL;
 import java.nio.channels.Channels;
 import java.nio.channels.FileChannel;
 import java.nio.channels.ReadableByteChannel;
 import java.nio.file.StandardOpenOption;
+import java.util.ArrayList;
+import java.util.List;
 import mjson.Json;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-
 class LibraryLoader {
 
     public LibraryLoader() {
@@ -35,7 +31,7 @@
         if (desc.getLibraries().isEmpty()) {
             return null;
         }
-        BannerServer.LOGGER.info(I18n.as("spigot.lib.loading"), desc.getName(), desc.getLibraries().size());
+        Mohist.LOGGER.info("[{}] Loading {} libraries... please wait", desc.getName(), desc.getLibraries().size());
 
         List<Dependency> dependencies = new ArrayList<>();
         for (String libraries : desc.getLibraries()) {
@@ -44,42 +40,38 @@
                 Dependency dependency = new Dependency(args[0], args[1], args[2], false);
                 dependencies.add(dependency);
             }
-
         }
 
         List<File> libraries = new ArrayList<>();
         List<Dependency> newDependencies = new ArrayList<>();
-        var d = mohistLibs();
 
         for (Dependency dependency : dependencies) {
             String group = dependency.group().replace(".", "/");
             String fileName = "%s-%s.jar".formatted(dependency.name(), dependency.version());
-            if (!d.contains(fileName)) {
-                if (dependency.version().toString().equalsIgnoreCase("LATEST")) {
-                    URL mavenUrl = URI.create(PluginsLibrarySource.DEFAULT + "%s/%s/%s".formatted(group, dependency.name(), "maven-metadata.xml")).toURL();
-                    Json compile_json2Json = Json.readXml(mavenUrl).at("metadata");
-                    List<Object> v = compile_json2Json.at("versioning").at("versions").at("version").asList();
-                    Dependency dependency0 = new Dependency(group, dependency.name(),  v.get(v.size() - 1), false);
-                    newDependencies.add(dependency0);
-                } else {
-                    newDependencies.add(dependency);
-                    String pomUrl = PluginsLibrarySource.DEFAULT + "%s/%s/%s/%s".formatted(group, dependency.name(), dependency.version(), fileName.replace("jar", "pom"));
-                    newDependencies.addAll(initDependencies0(new URL(pomUrl)));
-                }
+            if (dependency.version().toString().equalsIgnoreCase("LATEST")) {
+                URL mavenUrl = URI.create(PluginsLibrarySource.DEFAULT + "%s/%s/%s".formatted(group, dependency.name(), "maven-metadata.xml")).toURL();
+                Json compile_json2Json = Json.readXml(mavenUrl).at("metadata");
+                List<Object> v = compile_json2Json.at("versioning").at("versions").at("version").asList();
+                Dependency dependency0 = new Dependency(group, dependency.name(), v.get(v.size() - 1), false);
+                newDependencies.add(dependency0);
+            } else {
+                newDependencies.add(dependency);
+                String pomUrl = PluginsLibrarySource.DEFAULT + "%s/%s/%s/%s".formatted(group, dependency.name(), dependency.version(), fileName.replace("jar", "pom"));
+                newDependencies.addAll(initDependencies0(new URL(pomUrl)));
             }
         }
 
-        BannerServer.LOGGER.info(I18n.as("spigot.lib.loading.extra"), desc.getName(), newDependencies.size() - desc.getLibraries().size());
+        Mohist.LOGGER.info("[{}] Loading {} extra libraries... please wait", desc.getName(), newDependencies.size() - desc.getLibraries().size());
 
         for (Dependency dependency : newDependencies) {
             String group = dependency.group().replace(".", "/");
             String fileName = "%s-%s.jar".formatted(dependency.name(), dependency.version());
             String mavenUrl = PluginsLibrarySource.DEFAULT + "%s/%s/%s/%s".formatted(group, dependency.name(), dependency.version(), fileName);
 
-            File file = new File(new File("libraries", "spigot-lib"), "%s/%s/%s/%s".formatted(group, dependency.name(), dependency.version(), fileName));
+            File file = new File(new File("libraries", "plugins-lib"), "%s/%s/%s/%s".formatted(group, dependency.name(), dependency.version(), fileName));
 
             if (file.exists()) {
-                BannerServer.LOGGER.info(I18n.as("spigot.lib.found"), desc.getName(), file);
+                Mohist.LOGGER.info("[{}] Found libraries {}", desc.getName(), file);
                 libraries.add(file);
                 continue;
             }
@@ -96,7 +88,6 @@
 
                 libraries.add(file);
             } catch (IOException e) {
-                BannerServer.LOGGER.error(e.getMessage());
             }
         }
 
@@ -104,7 +95,7 @@
         for (File file : libraries) {
             try {
                 jarFiles.add(file.toURI().toURL());
-                BannerServer.LOGGER.info(I18n.as("spigot.lib.loaded"), desc.getName(), file);
+                Mohist.LOGGER.info("[{}] Loaded libraries {}", desc.getName(), file);
             } catch (MalformedURLException e) {
                 throw new RuntimeException(e);
             }
@@ -178,20 +169,6 @@
             }
         } catch (Exception ignored) {}
     }
-
-    public List<String> mohistLibs() {
-        List<String> temp = new ArrayList<>();
-        BufferedReader b = new BufferedReader(new InputStreamReader(LibraryLoader.class.getClassLoader().getResourceAsStream("libraries.txt")));
-        String str;
-        try {
-            while ((str = b.readLine()) != null) {
-                String[] s = str.split("\\|");
-                temp.add(new File(s[0]).getName());
-            }
-            b.close();
-        } catch (Exception ignored) {}
-        return temp;
-    }
 
     public record Dependency(String group, String name, Object version, boolean extra) {
     }
Index: src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java	(date 1703956060000)
@@ -2,21 +2,18 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.io.ByteStreams;
-import com.mohistmc.banner.bukkit.pluginfix.PluginFixManager;
-import com.mohistmc.banner.bukkit.remapping.ClassLoaderRemapper;
-import com.mohistmc.banner.bukkit.remapping.Remapper;
-import com.mohistmc.banner.bukkit.remapping.RemappingClassLoader;
+import com.mohistmc.mohist.bukkit.pluginfix.PluginFixManager;
+import com.mohistmc.mohist.bukkit.remapping.ClassLoaderRemapper;
+import com.mohistmc.mohist.bukkit.remapping.Remapper;
+import com.mohistmc.mohist.bukkit.remapping.RemappingClassLoader;
+import com.mohistmc.mohist.plugins.PluginHooks;
+import cpw.mods.modlauncher.EnumerationHelper;
 import io.izzel.tools.product.Product2;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.InvalidPluginException;
-import org.bukkit.plugin.PluginDescriptionFile;
-import org.bukkit.plugin.SimplePluginManager;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
@@ -33,6 +30,12 @@
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
 import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.SimplePluginManager;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
@@ -79,37 +82,65 @@
         this.url = file.toURI().toURL();
         this.libraryLoader = libraryLoader;
 
-        try {
-            Class<?> jarClass;
-            try {
-                jarClass = Class.forName(description.getMain(), true, this);
-            } catch (ClassNotFoundException ex) {
-                throw new InvalidPluginException("Cannot find main class `" + description.getMain() + "'", ex);
-            }
+        Class<?> jarClass;
+        try {
+            jarClass = Class.forName(description.getMain(), true, this);
+        } catch (ClassNotFoundException ex) {
+            throw new InvalidPluginException("Cannot find main class `" + description.getMain() + "'", ex);
+        }
 
-            Class<? extends JavaPlugin> pluginClass;
-            try {
-                pluginClass = jarClass.asSubclass(JavaPlugin.class);
-            } catch (ClassCastException ex) {
-                throw new InvalidPluginException("main class `" + description.getMain() + "' does not extend JavaPlugin", ex);
-            }
+        Class<? extends JavaPlugin> pluginClass;
+        try {
+            pluginClass = jarClass.asSubclass(JavaPlugin.class);
+        } catch (ClassCastException ex) {
+            throw new InvalidPluginException("main class `" + description.getMain() + "' must extend JavaPlugin", ex);
+        }
+
+        Constructor<? extends JavaPlugin> pluginConstructor;
+        try {
+            pluginConstructor = pluginClass.getDeclaredConstructor();
+        } catch (NoSuchMethodException ex) {
+            throw new InvalidPluginException("main class `" + description.getMain() + "' must have a public no-args constructor", ex);
+        }
 
-            plugin = pluginClass.newInstance();
+        try {
+            plugin = pluginConstructor.newInstance();
         } catch (IllegalAccessException ex) {
-            throw new InvalidPluginException("No public constructor", ex);
+            throw new InvalidPluginException("main class `" + description.getMain() + "' constructor must be public", ex);
         } catch (InstantiationException ex) {
-            throw new InvalidPluginException("Abnormal plugin type", ex);
+            throw new InvalidPluginException("main class `" + description.getMain() + "' must not be abstract", ex);
+        } catch (IllegalArgumentException ex) {
+            throw new InvalidPluginException("Could not invoke main class `" + description.getMain() + "' constructor", ex);
+        } catch (ExceptionInInitializerError | InvocationTargetException ex) {
+            throw new InvalidPluginException("Exception initializing main class `" + description.getMain() + "'", ex);
+        }
+        if (PluginHooks.hook(plugin)) {
+           // ((TransformingClassLoader) MohistMC.classLoader).addChild(this); // Mohist TODO
         }
     }
 
     @Override
     public URL getResource(String name) {
-        return findResource(name);
+        Objects.requireNonNull(name);
+        URL url = findResource(name);
+        if (url == null) {
+            if (getParent() != null) {
+                url = getParent().getResource(name);
+            }
+        }
+        return url;
     }
 
     @Override
     public Enumeration<URL> getResources(String name) throws IOException {
-        return findResources(name);
+        Objects.requireNonNull(name);
+        @SuppressWarnings("unchecked")
+        Enumeration<URL>[] tmp = (Enumeration<URL>[]) new Enumeration<?>[2];
+        if (getParent()!= null) {
+            tmp[1] = getParent().getResources(name);
+        }
+        tmp[0] = findResources(name);
+        return EnumerationHelper.merge(tmp[0], tmp[1]);
     }
 
     @Override
@@ -186,6 +217,7 @@
                     byteSource = () -> {
                         try (InputStream is = connection.getInputStream()) {
                             byte[] classBytes = ByteStreams.toByteArray(is);
+                            classBytes = Remapper.SWITCH_TABLE_FIXER.apply(classBytes);
                             classBytes = Bukkit.getUnsafe().processClass(description, path, classBytes);
                             classBytes = PluginFixManager.injectPluginFix(name, classBytes); // Mohist - Inject plugin fix
                             return classBytes;
Index: src/main/java/org/bukkit/plugin/ServicesManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/ServicesManager.java b/src/main/java/org/bukkit/plugin/ServicesManager.java
--- a/src/main/java/org/bukkit/plugin/ServicesManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/ServicesManager.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.plugin;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Collection;
 import java.util.List;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Manages services and service providers. Services are an interface
Index: src/main/java/org/bukkit/plugin/PluginDescriptionResolver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionResolver.java b/src/main/java/org/bukkit/plugin/PluginDescriptionResolver.java
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionResolver.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionResolver.java	(date 1703956060000)
@@ -1,7 +1,7 @@
 package org.bukkit.plugin;
 
-import org.yaml.snakeyaml.nodes.Tag;
-import org.yaml.snakeyaml.resolver.Resolver;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Tag;
+import com.mohistmc.org.yaml.snakeyaml.resolver.Resolver;
 
 public class PluginDescriptionResolver extends Resolver {
 
@@ -15,4 +15,4 @@
         addImplicitResolver(Tag.NULL, EMPTY, null);
         addImplicitResolver(Tag.TIMESTAMP, TIMESTAMP, "0123456789");
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/plugin/EventExecutor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java	(date 1703956060000)
@@ -1,76 +1,13 @@
 package org.bukkit.plugin;
 
-import com.destroystokyo.paper.event.executor.MethodHandleEventExecutor;
-import com.destroystokyo.paper.event.executor.StaticMethodHandleEventExecutor;
-import com.destroystokyo.paper.event.executor.asm.ASMEventExecutorGenerator;
-import com.destroystokyo.paper.event.executor.asm.ClassDefiner;
-import com.google.common.base.Preconditions;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
 import org.jetbrains.annotations.NotNull;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.function.Function;
-// Paper end
 /**
  * Interface which defines the class for event call backs to plugins
  */
 public interface EventExecutor {
     public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException;
-
-    // Paper start
-    ConcurrentMap<Method, Class<? extends EventExecutor>> eventExecutorMap = new ConcurrentHashMap<Method, Class<? extends EventExecutor>>() {
-        @NotNull
-        @Override
-        public Class<? extends EventExecutor> computeIfAbsent(@NotNull Method key, @NotNull Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
-            Class<? extends EventExecutor> executorClass = get(key);
-            if (executorClass != null)
-                return executorClass;
-
-            //noinspection SynchronizationOnLocalVariableOrMethodParameter
-            synchronized (key) {
-                executorClass = get(key);
-                if (executorClass != null)
-                    return executorClass;
-
-                return super.computeIfAbsent(key, mappingFunction);
-            }
-        }
-    };
-
-    @NotNull
-    public static EventExecutor create(@NotNull Method m, @NotNull Class<? extends Event> eventClass) {
-        Preconditions.checkNotNull(m, "Null method");
-        Preconditions.checkArgument(m.getParameterCount() != 0, "Incorrect number of arguments %s", m.getParameterCount());
-        Preconditions.checkArgument(m.getParameterTypes()[0] == eventClass, "First parameter %s doesn't match event class %s", m.getParameterTypes()[0], eventClass);
-        ClassDefiner definer = ClassDefiner.getInstance();
-        if (Modifier.isStatic(m.getModifiers())) {
-            return new StaticMethodHandleEventExecutor(eventClass, m);
-        } else if (definer.isBypassAccessChecks() || Modifier.isPublic(m.getDeclaringClass().getModifiers()) && Modifier.isPublic(m.getModifiers())) {
-            // get the existing generated EventExecutor class for the Method or generate one
-            Class<? extends EventExecutor> executorClass = eventExecutorMap.computeIfAbsent(m, (__) -> {
-                String name = ASMEventExecutorGenerator.generateName();
-                byte[] classData = ASMEventExecutorGenerator.generateEventExecutor(m, name);
-                return definer.defineClass(m.getDeclaringClass().getClassLoader(), name, classData).asSubclass(EventExecutor.class);
-            });
-
-            try {
-                EventExecutor asmExecutor = executorClass.newInstance();
-                // Define a wrapper to conform to bukkit stupidity (passing in events that don't match and wrapper exception)
-                return (listener, event) -> {
-                    if (!eventClass.isInstance(event)) return;
-                    asmExecutor.execute(listener, event);
-                };
-            } catch (InstantiationException | IllegalAccessException e) {
-                throw new AssertionError("Unable to initialize generated event executor", e);
-            }
-        } else {
-            return new MethodHandleEventExecutor(eventClass, m);
-        }
-    }
-    // Paper end
 }
Index: src/main/java/org/bukkit/plugin/PluginLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.plugin;
 
-import org.bukkit.event.Event;
-import org.bukkit.event.Listener;
-import org.jetbrains.annotations.NotNull;
-
 import java.io.File;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
+import org.bukkit.event.Event;
+import org.bukkit.event.Listener;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a plugin loader, which handles direct access to specific types
Index: src/main/java/org/bukkit/plugin/SimpleServicesManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
--- a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java	(date 1703956060000)
@@ -2,12 +2,6 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
-import org.bukkit.Bukkit;
-import org.bukkit.event.server.ServiceRegisterEvent;
-import org.bukkit.event.server.ServiceUnregisterEvent;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -16,6 +10,11 @@
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Set;
+import org.bukkit.Bukkit;
+import org.bukkit.event.server.ServiceRegisterEvent;
+import org.bukkit.event.server.ServiceUnregisterEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * A simple services manager.
Index: src/main/java/org/bukkit/plugin/PluginManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
--- a/src/main/java/org/bukkit/plugin/PluginManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.plugin;
 
+import java.io.File;
+import java.util.Set;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
@@ -9,9 +11,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.io.File;
-import java.util.Set;
-
 /**
  * Handles all plugin management from the Server
  */
Index: src/main/java/org/bukkit/plugin/SimplePluginManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java	(date 1703956060000)
@@ -5,23 +5,8 @@
 import com.google.common.graph.GraphBuilder;
 import com.google.common.graph.Graphs;
 import com.google.common.graph.MutableGraph;
-import com.mohistmc.banner.plugins.BannerPlugin;
-import org.bukkit.Server;
-import org.bukkit.World;
-import org.bukkit.command.Command;
-import org.bukkit.command.PluginCommandYamlParser;
-import org.bukkit.command.SimpleCommandMap;
-import org.bukkit.event.Event;
-import org.bukkit.event.EventPriority;
-import org.bukkit.event.HandlerList;
-import org.bukkit.event.Listener;
-import org.bukkit.permissions.Permissible;
-import org.bukkit.permissions.Permission;
-import org.bukkit.permissions.PermissionDefault;
-import org.bukkit.util.FileUtil;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
+import com.mohistmc.mohist.bukkit.pluginfix.UltraCosmetics;
+import com.mohistmc.mohist.plugins.MohistPlugin;
 import java.io.File;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
@@ -41,6 +26,21 @@
 import java.util.logging.Level;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.bukkit.Server;
+import org.bukkit.World;
+import org.bukkit.command.Command;
+import org.bukkit.command.PluginCommandYamlParser;
+import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.Listener;
+import org.bukkit.permissions.Permissible;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.util.FileUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Handles all plugin management from the Server
@@ -360,7 +360,6 @@
             }
         }
 
-        org.bukkit.command.defaults.TimingsCommand.timingStart = System.nanoTime(); // Spigot
         return result.toArray(new Plugin[result.size()]);
     }
 
@@ -481,11 +480,11 @@
             try {
                 plugin.getPluginLoader().enablePlugin(plugin);
             } catch (Throwable ex) {
-                handlePluginException("Error occurred (in the plugin loader) while enabling "
-                        + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin);
+                server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             HandlerList.bakeAll();
+            UltraCosmetics.lockRegistries(plugin);
         }
     }
 
@@ -499,41 +498,39 @@
 
     @Override
     public void disablePlugin(@NotNull final Plugin plugin) {
+        if (plugin.getName().equals("mohist")) {
+            return;
+        }
         if (plugin.isEnabled()) {
             try {
                 plugin.getPluginLoader().disablePlugin(plugin);
             } catch (Throwable ex) {
-                handlePluginException("Error occurred (in the plugin loader) while disabling "
-                        + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
+                server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             try {
                 server.getScheduler().cancelTasks(plugin);
             } catch (Throwable ex) {
-                handlePluginException("Error occurred (in the plugin loader) while cancelling tasks for "
-                        + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
+                server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while cancelling tasks for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             try {
                 server.getServicesManager().unregisterAll(plugin);
             } catch (Throwable ex) {
-                handlePluginException("Error occurred (in the plugin loader) while unregistering services for "
-                        + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
+                server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while unregistering services for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             try {
                 HandlerList.unregisterAll(plugin);
             } catch (Throwable ex) {
-                handlePluginException("Error occurred (in the plugin loader) while unregistering events for "
-                        + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
+                server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while unregistering events for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             try {
                 server.getMessenger().unregisterIncomingPluginChannel(plugin);
                 server.getMessenger().unregisterOutgoingPluginChannel(plugin);
             } catch (Throwable ex) {
-                handlePluginException("Error occurred (in the plugin loader) while unregistering plugin channels for "
-                        + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
+                server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while unregistering plugin channels for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             try {
@@ -546,13 +543,6 @@
         }
     }
 
-    // Paper start
-    private void handlePluginException(String msg, Throwable ex, Plugin plugin) {
-        server.getLogger().log(Level.SEVERE, msg, ex);
-        callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerPluginEnableDisableException(msg, ex, plugin)));
-    }
-    // Paper end
-
     @Override
     public void clearPlugins() {
         synchronized (this) {
@@ -575,26 +565,33 @@
      */
     @Override
     public void callEvent(@NotNull Event event) {
-        if (event.isAsynchronous()) {
+        // KTP start - optimize spigot event bus
+        final boolean isAsync = event.isAsynchronous();
+        final boolean isPrimary = server.isPrimaryThread(); // Cache to prevent multiple thread object comparisons.
+        if (isAsync) {
             if (Thread.holdsLock(this)) {
                 throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");
             }
-            if (server.isPrimaryThread()) {
+            if (isPrimary) {
                 throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");
             }
         } else {
-            if (!server.isPrimaryThread()) {
+            if (!isPrimary) {
                 throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from another thread.");
             }
         }
+        // KTP end - optimize spigot event bus
 
         fireEvent(event);
     }
 
     private void fireEvent(@NotNull Event event) {
+        MohistPlugin.registerListener(event);
         HandlerList handlers = event.getHandlers();
         RegisteredListener[] listeners = handlers.getRegisteredListeners();
-
+        if (listeners.length == 0) {
+            return;
+        }
         for (RegisteredListener registration : listeners) {
             if (!registration.getPlugin().isEnabled()) {
                 continue;
@@ -616,16 +613,9 @@
                             ));
                 }
             } catch (Throwable ex) {
-                // Paper start - error reporting
-                String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
-                server.getLogger().log(Level.SEVERE, msg, ex);
-                if (!(event instanceof com.destroystokyo.paper.event.server.ServerExceptionEvent)) { // We don't want to cause an endless event loop
-                    callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
-                }
-                // Paper end
+                server.getLogger().log(Level.SEVERE, "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName(), ex);
             }
         }
-        BannerPlugin.registerListener(event);
     }
 
     @Override
@@ -899,18 +889,4 @@
     public void useTimings(boolean use) {
         useTimings = use;
     }
-
-    // Banner start - add methods to support plugin manager
-    public List<Plugin> getPluginList() {
-        return plugins;
-    }
-
-    public Map<String, Plugin> getLookupNames() {
-        return lookupNames;
-    }
-
-    public SimpleCommandMap getCommandMap() {
-        return commandMap;
-    }
-    // Banner end
 }
Index: src/main/java/org/bukkit/plugin/java/JavaPlugin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java	(date 1703956060000)
@@ -2,6 +2,24 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
+import com.mohistmc.mohist.forge.MohistEventBus;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.Reader;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.ArrayList;
+import java.util.IdentityHashMap;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.eventbus.EventBus;
+import net.minecraftforge.eventbus.api.IEventBus;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -17,19 +35,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.Reader;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 /**
  * Represents a Java plugin and its main class. It contains fundamental methods
  * and fields for a plugin to be loaded and work properly. This is an indirect
@@ -48,6 +53,80 @@
     private File configFile = null;
     private PluginLogger logger = null;
 
+    // Mohist start
+    private final IdentityHashMap<IEventBus, List<Object>> forgeEvents = new IdentityHashMap<>();
+    // Changed because there's a chance we may want to register the same object under multiple event busses
+    private boolean callForge = false;
+
+    @Override
+    public boolean callForge() {
+        return callForge;
+    }
+
+    @Override
+    public void initCallForge() {
+        callForge = true;
+    }
+
+    @Override
+    public void registerForgeEvent(IEventBus bus, Object target) {
+        try {
+            if (bus instanceof EventBus eventBus) {
+                MohistEventBus.register(eventBus, target);
+                getForgeEvents(bus).add(target);
+            } else {
+                bus.register(target);
+                getForgeEvents(bus).add(target);
+            }
+        } catch (Throwable t) {
+            t.fillInStackTrace();
+        }
+    }
+
+    private List<Object> getForgeEvents(IEventBus bus) {
+        return forgeEvents.computeIfAbsent(bus, eventBus -> new ArrayList<>());
+    }
+
+    @Override
+    public void registerForgeEvent(Object target) {
+        try {
+            IEventBus eventBus = MinecraftForge.EVENT_BUS;
+            MohistEventBus.register((EventBus) eventBus, target);
+            getForgeEvents(eventBus).add(target);
+        } catch (Throwable t) {
+            t.fillInStackTrace();
+        }
+    }
+
+    @Override
+    public void unregisterForgeEvents(IEventBus bus, Object target) {
+        // Added so we can unregister the listener and remove it if need be to stop Mohist from needing to unregister it later
+        List<Object> registeredForgeEvents = getForgeEvents(bus);
+        for(int i = 0; i < registeredForgeEvents.size(); i++) {
+            if(registeredForgeEvents.get(i) == target) {
+                bus.unregister(registeredForgeEvents.remove((int) i));;
+            }
+        }
+        if(registeredForgeEvents.isEmpty()) forgeEvents.remove(bus);
+    }
+
+    @Override
+    public void unregisterForgeEvents(IEventBus bus) {
+        // Added so we can unregister the listener and remove it if need be to stop Mohist from needing to unregister it later
+        for(Object target : getForgeEvents(bus)) {
+            bus.unregister(target);
+        }
+        forgeEvents.remove(bus);
+    }
+
+    @Override
+    public void unregisterAllForgeEvents() { // Changed name for clarity
+        for(IEventBus eventBus : forgeEvents.keySet()) {
+            unregisterForgeEvents(eventBus);
+        }
+    }
+    // Mohist end
+
     public JavaPlugin() {
         final ClassLoader classLoader = this.getClass().getClassLoader();
         if (!(classLoader instanceof PluginClassLoader)) {
@@ -115,7 +194,7 @@
      * @return File containing this plugin
      */
     @NotNull
-    protected File getFile() {
+    public File getFile() {
         return file;
     }
 
Index: src/main/java/org/bukkit/plugin/Plugin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
--- a/src/main/java/org/bukkit/plugin/Plugin.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/Plugin.java	(date 1703956060000)
@@ -1,5 +1,9 @@
 package org.bukkit.plugin;
 
+import java.io.File;
+import java.io.InputStream;
+import java.util.logging.Logger;
+import net.minecraftforge.eventbus.api.IEventBus;
 import org.bukkit.Server;
 import org.bukkit.command.TabExecutor;
 import org.bukkit.configuration.file.FileConfiguration;
@@ -8,10 +12,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.io.File;
-import java.io.InputStream;
-import java.util.logging.Logger;
-
 /**
  * Represents a Plugin
  * <p>
@@ -190,4 +190,14 @@
      */
     @NotNull
     public String getName();
+
+    // Mohist start
+    public boolean callForge();
+    public void initCallForge();
+    public void registerForgeEvent(IEventBus bus, Object target);
+    public void registerForgeEvent(Object target);
+    public void unregisterForgeEvents(IEventBus bus, Object target);
+    public void unregisterForgeEvents(IEventBus bus);
+    public void unregisterAllForgeEvents();
+    // Mohist end
 }
Index: src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java	(date 1703956060000)
@@ -3,6 +3,23 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
+import com.mohistmc.org.yaml.snakeyaml.DumperOptions;
+import com.mohistmc.org.yaml.snakeyaml.LoaderOptions;
+import com.mohistmc.org.yaml.snakeyaml.Yaml;
+import com.mohistmc.org.yaml.snakeyaml.constructor.AbstractConstruct;
+import com.mohistmc.org.yaml.snakeyaml.constructor.SafeConstructor;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Node;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Tag;
+import com.mohistmc.org.yaml.snakeyaml.representer.Representer;
+import java.io.InputStream;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.regex.Pattern;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandExecutor;
 import org.bukkit.command.CommandSender;
@@ -14,24 +31,6 @@
 import org.bukkit.plugin.java.JavaPlugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.yaml.snakeyaml.DumperOptions;
-import org.yaml.snakeyaml.LoaderOptions;
-import org.yaml.snakeyaml.Yaml;
-import org.yaml.snakeyaml.constructor.AbstractConstruct;
-import org.yaml.snakeyaml.constructor.SafeConstructor;
-import org.yaml.snakeyaml.nodes.Node;
-import org.yaml.snakeyaml.nodes.Tag;
-import org.yaml.snakeyaml.representer.Representer;
-
-import java.io.InputStream;
-import java.io.Reader;
-import java.io.Writer;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.regex.Pattern;
 
 /**
  * This type is the runtime-container for the information in the plugin.yml.
@@ -237,7 +236,6 @@
             }, new Representer(dumperOptions), dumperOptions, new PluginDescriptionResolver());
         }
     };
-
     String rawName = null;
     private String name = null;
     private List<String> provides = ImmutableList.of();
Index: src/main/java/org/bukkit/plugin/RegisteredListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/plugin/RegisteredListener.java b/src/main/java/org/bukkit/plugin/RegisteredListener.java
--- a/src/main/java/org/bukkit/plugin/RegisteredListener.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/plugin/RegisteredListener.java	(date 1703956060000)
@@ -1,7 +1,5 @@
 package org.bukkit.plugin;
 
-import com.mohistmc.banner.fabric.FabricHookBukkitEvent;
-import org.bukkit.Bukkit;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
@@ -69,9 +67,6 @@
                 return;
             }
         }
-        if (Bukkit.getServer() != null) {
-            FabricHookBukkitEvent.EVENT.invoker().hook(event);
-        }
         executor.execute(listener, event);
     }
 
Index: src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java b/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
--- a/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.world;
 
+import java.util.List;
 import org.bukkit.Chunk;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when entities are unloaded.
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftCustomInventoryConverter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftCustomInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftCustomInventoryConverter.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftCustomInventoryConverter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftCustomInventoryConverter.java	(date 1703956060000)
@@ -21,6 +21,12 @@
         return new CraftInventoryCustom(owner, size);
     }
 
+    // Paper start
+    public Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
+        return new CraftInventoryCustom(owner, size, title);
+    }
+    // Paper end
+
     public Inventory createInventory(InventoryHolder owner, int size, String title) {
         return new CraftInventoryCustom(owner, size, title);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftInventoryCreator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftInventoryCreator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftInventoryCreator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftInventoryCreator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftInventoryCreator.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory.util;
 
+import java.util.HashMap;
+import java.util.Map;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
 
-import java.util.HashMap;
-import java.util.Map;
-
 public final class CraftInventoryCreator {
 
     public static final CraftInventoryCreator INSTANCE = new CraftInventoryCreator();
@@ -39,6 +38,7 @@
         converterMap.put(InventoryType.GRINDSTONE, DEFAULT_CONVERTER);
         converterMap.put(InventoryType.STONECUTTER, DEFAULT_CONVERTER);
         converterMap.put(InventoryType.SMITHING_NEW, DEFAULT_CONVERTER);
+        converterMap.put(InventoryType.CRAFTER, new CraftTileInventoryConverter.Crafter());
     }
 
     public Inventory createInventory(InventoryHolder holder, InventoryType type) {
@@ -53,6 +53,12 @@
         return DEFAULT_CONVERTER.createInventory(holder, size);
     }
 
+    // Paper start
+    public Inventory createInventory(InventoryHolder holder, int size, net.kyori.adventure.text.Component title) {
+        return DEFAULT_CONVERTER.createInventory(holder, size, title);
+    }
+    // Paper end
+
     public Inventory createInventory(InventoryHolder holder, int size, String title) {
         return DEFAULT_CONVERTER.createInventory(holder, size, title);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftTileInventoryConverter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftTileInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftTileInventoryConverter.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftTileInventoryConverter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/util/CraftTileInventoryConverter.java	(date 1703956060000)
@@ -6,6 +6,7 @@
 import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
 import net.minecraft.world.level.block.entity.BlastFurnaceBlockEntity;
 import net.minecraft.world.level.block.entity.BrewingStandBlockEntity;
+import net.minecraft.world.level.block.entity.CrafterBlockEntity;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.level.block.entity.DropperBlockEntity;
 import net.minecraft.world.level.block.entity.FurnaceBlockEntity;
@@ -135,4 +136,11 @@
             return new SmokerBlockEntity(BlockPos.ZERO, Blocks.SMOKER.defaultBlockState());
         }
     }
+
+    public static class Crafter extends CraftTileInventoryConverter {
+        @Override
+        public Container getTileEntity() {
+            return new CrafterBlockEntity(BlockPos.ZERO, Blocks.CRAFTER.defaultBlockState());
+        }
+    }
 }
Index: src/main/java/org/bukkit/event/world/LootGenerateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
--- a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.event.world;
 
+import java.util.Collection;
+import java.util.List;
 import org.bukkit.World;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
@@ -12,9 +14,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-import java.util.List;
-
 /**
  * Called when a {@link LootTable} is generated in the world for an
  * {@link InventoryHolder}.
Index: src/main/java/org/bukkit/event/world/AsyncStructureSpawnEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/world/AsyncStructureSpawnEvent.java b/src/main/java/org/bukkit/event/world/AsyncStructureSpawnEvent.java
--- a/src/main/java/org/bukkit/event/world/AsyncStructureSpawnEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/world/AsyncStructureSpawnEvent.java	(date 1703956060000)
@@ -92,4 +92,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryMapper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryMapper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryMapper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryMapper.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity.memory;
 
+import java.util.UUID;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import org.bukkit.Bukkit;
@@ -7,8 +8,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
 
-import java.util.UUID;
-
 public final class CraftMemoryMapper {
 
     private CraftMemoryMapper() {}
Index: src/main/java/org/bukkit/event/world/StructureGrowEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
--- a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.world;
 
+import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -9,8 +10,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Event that is called when an organic structure attempts to grow (Sapling {@literal ->}
  * Tree), (Mushroom {@literal ->} Huge Mushroom), naturally or using bonemeal.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/tags/DeprecatedCustomTagContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/tags/DeprecatedCustomTagContainer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/tags/DeprecatedCustomTagContainer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/tags/DeprecatedCustomTagContainer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/tags/DeprecatedCustomTagContainer.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory.tags;
 
+import java.util.Objects;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
 import org.bukkit.inventory.meta.tags.ItemTagAdapterContext;
 import org.bukkit.inventory.meta.tags.ItemTagType;
 import org.bukkit.persistence.PersistentDataContainer;
 
-import java.util.Objects;
-
 /**
  * The {@link DeprecatedCustomTagContainer} is a simply wrapper implementation
  * that wraps the new api to still be usable with the old api parts.
Index: src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java b/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
--- a/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.world;
 
+import java.util.List;
 import org.bukkit.Chunk;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when entities are loaded.
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWallSign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWallSign.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWallSign.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWallSign.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWallSign.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallSignBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.WallSignBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperSlab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperSlab.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperSlab.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperSlab.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperSlab.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSlab
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSlab
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.WeatheringCopperSlabBlock.class, "type");
 
@@ -27,7 +27,7 @@
         set(TYPE, type);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.WeatheringCopperSlabBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperStair.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperStair.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperStair.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperStair.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeatheringCopperStair.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftStairs
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftStairs
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, "shape");
 
@@ -27,7 +27,7 @@
         set(SHAPE, shape);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, "half");
 
@@ -41,7 +41,7 @@
         set(HALF, half);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, "facing");
 
@@ -60,7 +60,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeepingVines.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeepingVines.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeepingVines.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeepingVines.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWeepingVines.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.WeepingVinesBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkull.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkull.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkull.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRotatable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.WitherSkullBlock.class, "rotation");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkullWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkullWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkullWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkullWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftWitherSkullWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WitherWallSkullBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/sign/CraftSignSide.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/sign/CraftSignSide.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/sign/CraftSignSide.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/sign/CraftSignSide.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/sign/CraftSignSide.java	(date 1703956060000)
@@ -79,4 +79,4 @@
 
         return signText;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/event/world/PortalCreateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
--- a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.world;
 
+import java.util.List;
 import org.bukkit.World;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Entity;
@@ -8,8 +9,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Called when a portal is created
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryKey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryKey.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryKey.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryKey.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/memory/CraftMemoryKey.java	(date 1703956060000)
@@ -1,7 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity.memory;
 
-import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
+import org.bukkit.Registry;
+import org.bukkit.craftbukkit.v1_20_R3.CraftRegistry;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.entity.memory.MemoryKey;
 
@@ -9,11 +11,23 @@
 
     private CraftMemoryKey() {}
 
-    public static <T, U> MemoryModuleType<U> fromMemoryKey(MemoryKey<T> memoryKey) {
-        return (MemoryModuleType<U>) BuiltInRegistries.MEMORY_MODULE_TYPE.get(CraftNamespacedKey.toMinecraft(memoryKey.getKey()));
-    }
+    public static <T, U> MemoryKey<U> minecraftToBukkit(MemoryModuleType<T> minecraft) {
+        if (minecraft == null) {
+            return null;
+        }
 
-    public static <T, U> MemoryKey<U> toMemoryKey(MemoryModuleType<T> memoryModuleType) {
-        return MemoryKey.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.MEMORY_MODULE_TYPE.getKey(memoryModuleType)));
+        net.minecraft.core.Registry<MemoryModuleType<?>> registry = CraftRegistry.getMinecraftRegistry(Registries.MEMORY_MODULE_TYPE);
+        MemoryKey<U> bukkit = Registry.MEMORY_MODULE_TYPE.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+
+        return bukkit;
+    }
+
+    public static <T, U> MemoryModuleType<U> bukkitToMinecraft(MemoryKey<T> bukkit) {
+        if (bukkit == null) {
+            return null;
+        }
+
+        return (MemoryModuleType<U>) CraftRegistry.getMinecraftRegistry(Registries.MEMORY_MODULE_TYPE)
+                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTorchWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTorchWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTorchWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTorchWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTorchWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallTorchBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTrapdoor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTrapdoor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTrapdoor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTrapdoor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTrapdoor.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.TrapDoorBlock.class, "half");
 
@@ -27,7 +27,7 @@
         set(HALF, half);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.TrapDoorBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOpenable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOpenable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty OPEN = getBoolean(net.minecraft.world.level.block.TrapDoorBlock.class, "open");
 
@@ -60,7 +60,7 @@
         set(OPEN, open);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.TrapDoorBlock.class, "powered");
 
@@ -74,7 +74,7 @@
         set(POWERED, powered);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.TrapDoorBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwire.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwire.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwire.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwire.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftTripwire
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftTripwire
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty DISARMED = getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "disarmed");
 
@@ -27,7 +27,7 @@
         set(DISARMED, disarmed);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAttachable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAttachable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty ATTACHED = getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "attached");
 
@@ -41,7 +41,7 @@
         set(ATTACHED, attached);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "down", true)
@@ -91,7 +91,7 @@
         return faces.build();
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.TripWireBlock.class, "powered");
 
Index: src/main/java/org/bukkit/permissions/PermissibleBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java	(date 1703956060000)
@@ -1,10 +1,6 @@
 package org.bukkit.permissions;
 
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
+import com.mohistmc.mohist.api.PlayerAPI;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedList;
@@ -12,6 +8,10 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Base Permissible for use in any Permissible object via proxy or extension
@@ -52,7 +52,7 @@
         if (name == null) {
             throw new IllegalArgumentException("Permission name cannot be null");
         }
-
+        if (PlayerAPI.ignoreOp()) return true;
         return permissions.containsKey(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
@@ -71,6 +71,7 @@
             throw new IllegalArgumentException("Permission name cannot be null");
         }
 
+        if (PlayerAPI.ignoreOp()) return true;
         String name = inName.toLowerCase(java.util.Locale.ENGLISH);
 
         if (isPermissionSet(name)) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwireHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwireHook.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwireHook.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwireHook.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTripwireHook.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAttachable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAttachable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty ATTACHED = getBoolean(net.minecraft.world.level.block.TripWireHookBlock.class, "attached");
 
@@ -27,7 +27,7 @@
         set(ATTACHED, attached);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.TripWireHookBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.TripWireHookBlock.class, "powered");
 
Index: src/main/java/org/bukkit/permissions/PermissionDefault.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/permissions/PermissionDefault.java b/src/main/java/org/bukkit/permissions/PermissionDefault.java
--- a/src/main/java/org/bukkit/permissions/PermissionDefault.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/permissions/PermissionDefault.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.permissions;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.HashMap;
 import java.util.Map;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents the possible default values for permissions
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTurtleEgg.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTurtleEgg.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTurtleEgg.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTurtleEgg.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTurtleEgg.java	(date 1703956060000)
@@ -13,9 +13,10 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftTurtleEgg
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftTurtleEgg
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty EGGS = getInteger(net.minecraft.world.level.block.TurtleEggBlock.class, "eggs");
+    private static final net.minecraft.world.level.block.state.properties.IntegerProperty HATCH = getInteger(net.minecraft.world.level.block.TurtleEggBlock.class, "hatch");
 
     @Override
     public int getEggs() {
@@ -37,9 +38,6 @@
         return getMax(EGGS);
     }
 
-    // org.bukkit.craftbukkit.block.data.CraftHatchable
-    private static final net.minecraft.world.level.block.state.properties.IntegerProperty HATCH = getInteger(net.minecraft.world.level.block.TurtleEggBlock.class, "hatch");
-
     @Override
     public int getHatch() {
         return get(HATCH);
Index: src/main/java/org/bukkit/permissions/Permission.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/permissions/Permission.java b/src/main/java/org/bukkit/permissions/Permission.java
--- a/src/main/java/org/bukkit/permissions/Permission.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/permissions/Permission.java	(date 1703956060000)
@@ -1,17 +1,16 @@
 package org.bukkit.permissions;
 
 import com.google.common.base.Preconditions;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.PluginManager;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.PluginManager;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents a unique permission that may be attached to a {@link
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTwistingVines.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTwistingVines.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTwistingVines.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTwistingVines.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTwistingVines.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.TwistingVinesBlock.class, "age");
 
Index: src/main/java/org/bukkit/permissions/PermissionAttachment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachment.java b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
--- a/src/main/java/org/bukkit/permissions/PermissionAttachment.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachment.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.permissions;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-
 /**
  * Holds information about a permission attachment on a {@link Permissible}
  * object
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftVine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftVine.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftVine.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftVine.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftVine.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.VineBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.VineBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.VineBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.VineBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.VineBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.VineBlock.class, "down", true)
Index: src/main/java/org/bukkit/permissions/Permissible.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/permissions/Permissible.java b/src/main/java/org/bukkit/permissions/Permissible.java
--- a/src/main/java/org/bukkit/permissions/Permissible.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/permissions/Permissible.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.permissions;
 
+import java.util.Set;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Set;
-
 /**
  * Represents an object that may be assigned permissions
  */
Index: src/main/java/org/bukkit/generator/structure/Structure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/generator/structure/Structure.java b/src/main/java/org/bukkit/generator/structure/Structure.java
--- a/src/main/java/org/bukkit/generator/structure/Structure.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/generator/structure/Structure.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.generator.structure;
 
 import org.bukkit.Keyed;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.jetbrains.annotations.NotNull;
@@ -47,6 +48,8 @@
     public static final Structure RUINED_PORTAL_NETHER = getStructure("ruined_portal_nether");
     public static final Structure ANCIENT_CITY = getStructure("ancient_city");
     public static final Structure TRAIL_RUINS = getStructure("trail_ruins");
+    @MinecraftExperimental
+    public static final Structure TRIAL_CHAMBERS = getStructure("trial_chambers");
 
     private static Structure getStructure(String name) {
         return Registry.STRUCTURE.get(NamespacedKey.minecraft(name));
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStructure.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStructure.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStructure.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStructure.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftStructureBlock
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftStructureBlock
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> MODE = getEnum(net.minecraft.world.level.block.StructureBlock.class, "mode");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSweetBerryBush.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSweetBerryBush.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSweetBerryBush.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSweetBerryBush.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSweetBerryBush.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.SweetBerryBushBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlant.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlant.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlant.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlant.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.DoublePlantBlock.class, "half");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlantFlower.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlantFlower.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlantFlower.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlantFlower.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallPlantFlower.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.TallFlowerBlock.class, "half");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallSeagrass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallSeagrass.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallSeagrass.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallSeagrass.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTallSeagrass.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.TallSeagrassBlock.class, "half");
 
Index: src/main/java/org/bukkit/scheduler/BukkitScheduler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
--- a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.scheduler;
 
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 import java.util.function.Consumer;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 public interface BukkitScheduler {
 
@@ -228,7 +227,7 @@
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTask(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task) throws IllegalArgumentException;
+    public void runTask(@NotNull Plugin plugin, @NotNull Consumer<? super BukkitTask> task) throws IllegalArgumentException;
 
     /**
      * @param plugin the reference to the plugin scheduling task
@@ -268,7 +267,7 @@
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task) throws IllegalArgumentException;
+    public void runTaskAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<? super BukkitTask> task) throws IllegalArgumentException;
 
     /**
      * @param plugin the reference to the plugin scheduling task
@@ -306,7 +305,7 @@
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskLater(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay) throws IllegalArgumentException;
+    public void runTaskLater(@NotNull Plugin plugin, @NotNull Consumer<? super BukkitTask> task, long delay) throws IllegalArgumentException;
 
     /**
      * @param plugin the reference to the plugin scheduling task
@@ -351,7 +350,7 @@
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay) throws IllegalArgumentException;
+    public void runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<? super BukkitTask> task, long delay) throws IllegalArgumentException;
 
     /**
      * @param plugin the reference to the plugin scheduling task
@@ -392,7 +391,7 @@
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskTimer(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException;
+    public void runTaskTimer(@NotNull Plugin plugin, @NotNull Consumer<? super BukkitTask> task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * @param plugin the reference to the plugin scheduling task
@@ -442,7 +441,7 @@
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException;
+    public void runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<? super BukkitTask> task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * @param plugin the reference to the plugin scheduling task
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTarget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTarget.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTarget.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTarget.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTarget.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAnaloguePowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAnaloguePowerable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty POWER = getInteger(net.minecraft.world.level.block.TargetBlock.class, "power");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTNT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTNT.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTNT.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTNT.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftTNT.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftTNT
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftTNT
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty UNSTABLE = getBoolean(net.minecraft.world.level.block.TntBlock.class, "unstable");
 
Index: src/main/java/org/bukkit/generator/BlockPopulator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/generator/BlockPopulator.java b/src/main/java/org/bukkit/generator/BlockPopulator.java
--- a/src/main/java/org/bukkit/generator/BlockPopulator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/generator/BlockPopulator.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.generator;
 
+import java.util.Random;
 import org.bukkit.Chunk;
 import org.bukkit.World;
 import org.bukkit.event.world.WorldInitEvent;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Random;
-
 /**
  * A block populator is responsible for generating a small area of blocks.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnow.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnow.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnow.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSnow
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSnow
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty LAYERS = getInteger(net.minecraft.world.level.block.SnowLayerBlock.class, "layers");
 
Index: src/main/java/org/bukkit/generator/BiomeParameterPoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/generator/BiomeParameterPoint.java b/src/main/java/org/bukkit/generator/BiomeParameterPoint.java
--- a/src/main/java/org/bukkit/generator/BiomeParameterPoint.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/generator/BiomeParameterPoint.java	(date 1703956060000)
@@ -137,4 +137,4 @@
      * @return The minimum weirdness
      */
     double getMinWeirdness();
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSoil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSoil.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSoil.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSoil.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSoil.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftFarmland
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftFarmland
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty MOISTURE = getInteger(net.minecraft.world.level.block.FarmBlock.class, "moisture");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStainedGlassPane.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStainedGlassPane.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStainedGlassPane.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStainedGlassPane.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStainedGlassPane.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.StainedGlassPaneBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.StainedGlassPaneBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.StainedGlassPaneBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.StainedGlassPaneBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.StainedGlassPaneBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.StainedGlassPaneBlock.class, "down", true)
@@ -63,7 +63,7 @@
         return faces.build();
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.StainedGlassPaneBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/generator/LimitedRegion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/generator/LimitedRegion.java b/src/main/java/org/bukkit/generator/LimitedRegion.java
--- a/src/main/java/org/bukkit/generator/LimitedRegion.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/generator/LimitedRegion.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.generator;
 
+import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.RegionAccessor;
 import org.bukkit.block.BlockState;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * A limited region is used in world generation for features which are
  * going over a chunk. For example, trees or ores.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStairs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStairs.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStairs.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStairs.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStairs.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftStairs
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftStairs
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.StairBlock.class, "shape");
 
@@ -27,7 +27,7 @@
         set(SHAPE, shape);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.StairBlock.class, "half");
 
@@ -41,7 +41,7 @@
         set(HALF, half);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.StairBlock.class, "facing");
 
@@ -60,7 +60,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.StairBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/generator/BiomeProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/generator/BiomeProvider.java b/src/main/java/org/bukkit/generator/BiomeProvider.java
--- a/src/main/java/org/bukkit/generator/BiomeProvider.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/generator/BiomeProvider.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.generator;
 
+import java.util.List;
 import org.bukkit.block.Biome;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Class for providing biomes.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStem.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStem.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStem.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStem.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.StemBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStemAttached.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStemAttached.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStemAttached.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStemAttached.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStemAttached.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.AttachedStemBlock.class, "facing");
 
Index: src/main/java/org/bukkit/generator/ChunkGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/generator/ChunkGenerator.java b/src/main/java/org/bukkit/generator/ChunkGenerator.java
--- a/src/main/java/org/bukkit/generator/ChunkGenerator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/generator/ChunkGenerator.java	(date 1703956060000)
@@ -1,5 +1,8 @@
 package org.bukkit.generator;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
 import org.bukkit.Bukkit;
 import org.bukkit.HeightMap;
 import org.bukkit.Location;
@@ -12,10 +15,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-
 /**
  * A chunk generator is responsible for the initial shaping of an entire
  * chunk. For example, the nether chunk generator should shape netherrack and
@@ -468,7 +467,7 @@
      * {@link #shouldGenerateCaves(WorldInfo, Random, int, int)} is overridden.
      *
      * @return true if the server should generate Vanilla caves
-     * @see #shouldGenerateCaves(WorldInfo, Random, int, int)
+     * #shouldGenerateCaves(WorldInfo, Random, int, int)
      */
     public boolean shouldGenerateCaves() {
         return false;
@@ -505,7 +504,7 @@
      * {@link #shouldGenerateDecorations(WorldInfo, Random, int, int)} is overridden.
      *
      * @return true if the server should generate Vanilla decorations
-     * @see #shouldGenerateDecorations(WorldInfo, Random, int, int)
+     * #shouldGenerateDecorations(WorldInfo, Random, int, int)
      */
     public boolean shouldGenerateDecorations() {
         return false;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStepAbstract.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStepAbstract.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStepAbstract.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStepAbstract.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStepAbstract.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSlab
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSlab
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.SlabBlock.class, "type");
 
@@ -27,7 +27,7 @@
         set(TYPE, type);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.SlabBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/generator/WorldInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/generator/WorldInfo.java b/src/main/java/org/bukkit/generator/WorldInfo.java
--- a/src/main/java/org/bukkit/generator/WorldInfo.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/generator/WorldInfo.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.generator;
 
+import java.util.UUID;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.UUID;
-
 /**
  * Holds various information of a World
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStonecutter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStonecutter.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStonecutter.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStonecutter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftStonecutter.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.StonecutterBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftShulkerBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftShulkerBox.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftShulkerBox.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftShulkerBox.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftShulkerBox.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ShulkerBoxBlock.class, "facing");
 
Index: src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
--- a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.util.noise;
 
+import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Random;
-
 /**
  * Creates perlin noise through unbiased octaves
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkull.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkull.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkull.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRotatable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.SkullBlock.class, "rotation");
 
Index: src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
--- a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.util.noise;
 
+import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Random;
-
 /**
  * Creates simplex noise through unbiased octaves
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayer.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRotatable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.PlayerHeadBlock.class, "rotation");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayerWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayerWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayerWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayerWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullPlayerWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.PlayerWallHeadBlock.class, "facing");
 
Index: src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
--- a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.util.permissions;
 
+import java.util.Map;
 import org.bukkit.Bukkit;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 public final class DefaultPermissions {
     private static final String ROOT = "craftbukkit";
     private static final String LEGACY_PREFIX = "craft";
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSkullWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallSkullBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmallDripleaf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmallDripleaf.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmallDripleaf.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmallDripleaf.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmallDripleaf.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.SmallDripleafBlock.class, "half");
 
@@ -27,7 +27,7 @@
         set(HALF, half);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.SmallDripleafBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.SmallDripleafBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmoker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmoker.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmoker.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmoker.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSmoker.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.SmokerBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.SmokerBlock.class, "lit");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnifferEgg.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnifferEgg.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnifferEgg.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnifferEgg.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSnifferEgg.java	(date 1703956060000)
@@ -31,4 +31,4 @@
     public int getMaximumHatch() {
         return getMax(HATCH);
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/util/io/Wrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/io/Wrapper.java b/src/main/java/org/bukkit/util/io/Wrapper.java
--- a/src/main/java/org/bukkit/util/io/Wrapper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/io/Wrapper.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.util.io;
 
 import com.google.common.collect.ImmutableMap;
+import java.io.Serializable;
+import java.util.Map;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.jetbrains.annotations.NotNull;
 
-import java.io.Serializable;
-import java.util.Map;
-
 final class Wrapper<T extends Map<String, ?> & Serializable> implements Serializable {
     private static final long serialVersionUID = -986209235411767547L;
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRotatable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRotatable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRotatable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRotatable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRotatable.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOrientable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOrientable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.RotatedPillarBlock.class, "axis");
 
Index: src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
--- a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.util.io;
 
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.configuration.serialization.ConfigurationSerialization;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.ObjectInputStream;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.configuration.serialization.ConfigurationSerialization;
 
 /**
  * This class is designed to be used in conjunction with the {@link
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSapling.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSapling.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSapling.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSapling.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSapling.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSapling
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSapling
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty STAGE = getInteger(net.minecraft.world.level.block.SaplingBlock.class, "stage");
 
Index: src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
--- a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.util.io;
 
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-
 import java.io.IOException;
 import java.io.ObjectOutputStream;
 import java.io.OutputStream;
 import java.io.Serializable;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
 
 /**
  * This class is designed to be used in conjunction with the {@link
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftScaffolding.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftScaffolding.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftScaffolding.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftScaffolding.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftScaffolding.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftScaffolding
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftScaffolding
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty BOTTOM = getBoolean(net.minecraft.world.level.block.ScaffoldingBlock.class, "bottom");
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty DISTANCE = getInteger(net.minecraft.world.level.block.ScaffoldingBlock.class, "distance");
@@ -43,7 +43,7 @@
         return getMax(DISTANCE);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.ScaffoldingBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
--- a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 // CHECKSTYLE:OFF
 package org.bukkit.util.noise;
 
+import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Random;
-
 /**
  * Generates simplex-based noise.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSculkSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSculkSensor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSculkSensor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSculkSensor.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSculkSensor
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSculkSensor
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> PHASE = getEnum(net.minecraft.world.level.block.SculkSensorBlock.class, "sculk_sensor_phase");
 
@@ -27,7 +27,7 @@
         set(PHASE, phase);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAnaloguePowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAnaloguePowerable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty POWER = getInteger(net.minecraft.world.level.block.SculkSensorBlock.class, "power");
 
@@ -46,7 +46,7 @@
         return getMax(POWER);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.SculkSensorBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
--- a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.util.noise;
 
+import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Random;
-
 /**
  * Generates noise using the "classic" perlin generator
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSeaPickle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSeaPickle.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSeaPickle.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSeaPickle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftSeaPickle.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSeaPickle
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSeaPickle
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty PICKLES = getInteger(net.minecraft.world.level.block.SeaPickleBlock.class, "pickles");
 
@@ -37,7 +37,7 @@
         return getMax(PICKLES);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.SeaPickleBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneLamp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneLamp.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneLamp.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneLamp.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneLamp.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.RedstoneLampBlock.class, "lit");
 
Index: src/main/java/org/bukkit/util/Vector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
--- a/src/main/java/org/bukkit/util/Vector.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/Vector.java	(date 1703956060000)
@@ -2,6 +2,9 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.primitives.Doubles;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Random;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -9,12 +12,11 @@
 import org.jetbrains.annotations.NotNull;
 import org.joml.RoundingMode;
 import org.joml.Vector3d;
+import org.joml.Vector3dc;
 import org.joml.Vector3f;
+import org.joml.Vector3fc;
 import org.joml.Vector3i;
-
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Random;
+import org.joml.Vector3ic;
 
 /**
  * Represents a mutable vector. Because the components of Vectors are mutable,
@@ -819,6 +821,48 @@
         return new BlockVector(x, y, z);
     }
 
+    /**
+     * Get this vector as a JOML {@link Vector3f}.
+     *
+     * @return the JOML vector
+     */
+    @NotNull
+    public Vector3f toVector3f() {
+        return new Vector3f((float) x, (float) y, (float) z);
+    }
+
+    /**
+     * Get this vector as a JOML {@link Vector3d}.
+     *
+     * @return the JOML vector
+     */
+    @NotNull
+    public Vector3d toVector3d() {
+        return new Vector3d(x, y, z);
+    }
+
+    /**
+     * Get this vector as a JOML {@link Vector3i}.
+     *
+     * @param roundingMode the {@link RoundingMode} to use for this vector's components
+     * @return the JOML vector
+     */
+    @NotNull
+    public Vector3i toVector3i(int roundingMode) {
+        return new Vector3i(x, y, z, roundingMode);
+    }
+
+    /**
+     * Get this vector as a JOML {@link Vector3i} with its components floored.
+     *
+     * @return the JOML vector
+     * @see #toVector3i(int)
+     */
+    @NotNull
+    public Vector3i toVector3i() {
+        return toVector3i(RoundingMode.FLOOR);
+    }
+
     /**
      * Check if each component of this Vector is finite.
      *
@@ -906,6 +950,39 @@
     public static Vector fromJOML(@NotNull Vector3i vector) {
         return new Vector(vector.x(), vector.y(), vector.z());
     }
+
+    /**
+     * Gets a vector with components that match the provided JOML {@link Vector3fc}.
+     *
+     * @param vector the vector to match
+     * @return the new vector
+     */
+    @NotNull
+    public static Vector fromJOML(@NotNull Vector3fc vector) {
+        return new Vector(vector.x(), vector.y(), vector.z());
+    }
+
+    /**
+     * Gets a vector with components that match the provided JOML {@link Vector3dc}.
+     *
+     * @param vector the vector to match
+     * @return the new vector
+     */
+    @NotNull
+    public static Vector fromJOML(@NotNull Vector3dc vector) {
+        return new Vector(vector.x(), vector.y(), vector.z());
+    }
+
+    /**
+     * Gets a vector with components that match the provided JOML {@link Vector3ic}.
+     *
+     * @param vector the vector to match
+     * @return the new vector
+     */
+    @NotNull
+    public static Vector fromJOML(@NotNull Vector3ic vector) {
+        return new Vector(vector.x(), vector.y(), vector.z());
+    }
 
     @Override
     @NotNull
@@ -937,46 +1014,4 @@
 
         return new Vector(x, y, z);
     }
-
-    /**
-     * Get this vector as a JOML {@link Vector3f}.
-     *
-     * @return the JOML vector
-     */
-    @NotNull
-    public Vector3f toVector3f() {
-        return new Vector3f((float) x, (float) y, (float) z);
-    }
-
-    /**
-     * Get this vector as a JOML {@link Vector3d}.
-     *
-     * @return the JOML vector
-     */
-    @NotNull
-    public Vector3d toVector3d() {
-        return new Vector3d(x, y, z);
-    }
-
-    /**
-     * Get this vector as a JOML {@link Vector3i}.
-     *
-     * @param roundingMode the {@link RoundingMode} to use for this vector's components
-     * @return the JOML vector
-     */
-    @NotNull
-    public Vector3i toVector3i(int roundingMode) {
-        return new Vector3i(x, y, z, roundingMode);
-    }
-
-    /**
-     * Get this vector as a JOML {@link Vector3i} with its components floored.
-     *
-     * @return the JOML vector
-     * @see #toVector3i(int)
-     */
-    @NotNull
-    public Vector3i toVector3i() {
-        return toVector3i(RoundingMode.FLOOR);
-    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneOre.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneOre.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneOre.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneOre.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneOre.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.RedStoneOreBlock.class, "lit");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorch.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorch.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorch.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorch.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.RedstoneTorchBlock.class, "lit");
 
Index: src/main/java/org/bukkit/util/StringUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/StringUtil.java b/src/main/java/org/bukkit/util/StringUtil.java
--- a/src/main/java/org/bukkit/util/StringUtil.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/StringUtil.java	(date 1703956060000)
@@ -1,9 +1,8 @@
 package org.bukkit.util;
 
 import com.google.common.base.Preconditions;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Collection;
+import org.jetbrains.annotations.NotNull;
 
 public class StringUtil {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorchWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorchWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorchWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorchWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneTorchWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.RedstoneWallTorchBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.RedstoneWallTorchBlock.class, "lit");
 
Index: src/main/java/org/bukkit/util/FileUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/FileUtil.java b/src/main/java/org/bukkit/util/FileUtil.java
--- a/src/main/java/org/bukkit/util/FileUtil.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/FileUtil.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.util;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.channels.FileChannel;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Class containing file utilities
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneWire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneWire.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneWire.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneWire.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneWire.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftRedstoneWire
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftRedstoneWire
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> NORTH = getEnum(net.minecraft.world.level.block.RedStoneWireBlock.class, "north");
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> EAST = getEnum(net.minecraft.world.level.block.RedStoneWireBlock.class, "east");
@@ -61,7 +61,7 @@
         return com.google.common.collect.ImmutableSet.of(org.bukkit.block.BlockFace.NORTH, org.bukkit.block.BlockFace.EAST, org.bukkit.block.BlockFace.SOUTH, org.bukkit.block.BlockFace.WEST);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAnaloguePowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAnaloguePowerable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty POWER = getInteger(net.minecraft.world.level.block.RedStoneWireBlock.class, "power");
 
Index: src/main/java/org/bukkit/util/BlockIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
--- a/src/main/java/org/bukkit/util/BlockIterator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/BlockIterator.java	(date 1703956060000)
@@ -1,18 +1,16 @@
 package org.bukkit.util;
 
 import com.google.common.base.Preconditions;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.entity.LivingEntity;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-
 import static org.bukkit.util.NumberConversions.floor;
 import static org.bukkit.util.NumberConversions.round;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * This class performs ray tracing and iterates along blocks on a line
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftReed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftReed.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftReed.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftReed.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftReed.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.SugarCaneBlock.class, "age");
 
Index: src/main/java/org/bukkit/util/Transformation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/Transformation.java b/src/main/java/org/bukkit/util/Transformation.java
--- a/src/main/java/org/bukkit/util/Transformation.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/Transformation.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.util;
 
 import com.google.common.base.Preconditions;
+import java.util.Objects;
 import org.jetbrains.annotations.NotNull;
 import org.joml.AxisAngle4f;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
 
-import java.util.Objects;
-
 /**
  * Represents an arbitrary affine transformation.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRepeater.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRepeater.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRepeater.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRepeater.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRepeater.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftRepeater
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftRepeater
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty DELAY = getInteger(net.minecraft.world.level.block.RepeaterBlock.class, "delay");
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LOCKED = getBoolean(net.minecraft.world.level.block.RepeaterBlock.class, "locked");
@@ -48,7 +48,7 @@
         set(LOCKED, locked);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.RepeaterBlock.class, "facing");
 
@@ -67,7 +67,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.RepeaterBlock.class, "powered");
 
Index: src/main/java/org/bukkit/util/VoxelShape.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/VoxelShape.java b/src/main/java/org/bukkit/util/VoxelShape.java
--- a/src/main/java/org/bukkit/util/VoxelShape.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/VoxelShape.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.util;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Collection;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * A shape made out of voxels.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRespawnAnchor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRespawnAnchor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRespawnAnchor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRespawnAnchor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRespawnAnchor.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftRespawnAnchor
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftRespawnAnchor
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty CHARGES = getInteger(net.minecraft.world.level.block.RespawnAnchorBlock.class, "charges");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPortal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPortal.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPortal.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPortal.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPortal.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOrientable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOrientable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.NetherPortalBlock.class, "axis");
 
Index: src/main/java/org/bukkit/util/BlockVector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/BlockVector.java b/src/main/java/org/bukkit/util/BlockVector.java
--- a/src/main/java/org/bukkit/util/BlockVector.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/BlockVector.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.util;
 
+import java.util.Map;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Map;
-
 /**
  * A vector with a hash function that floors the X, Y, Z components, a la
  * BlockVector in WorldEdit. BlockVectors can be used in hash sets and
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPotatoes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPotatoes.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPotatoes.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPotatoes.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPotatoes.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.PotatoBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPoweredRail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPoweredRail.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPoweredRail.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPoweredRail.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPoweredRail.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.PoweredRailBlock.class, "powered");
 
@@ -27,7 +27,7 @@
         set(POWERED, powered);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRail
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRail
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.PoweredRailBlock.class, "shape");
 
@@ -46,7 +46,7 @@
         return getValues(SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.PoweredRailBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/util/ChatPaginator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/ChatPaginator.java b/src/main/java/org/bukkit/util/ChatPaginator.java
--- a/src/main/java/org/bukkit/util/ChatPaginator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/ChatPaginator.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.util;
 
-import org.bukkit.ChatColor;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
+import org.bukkit.ChatColor;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * The ChatPaginator takes a raw string of arbitrary length and breaks it down
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateBinary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateBinary.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateBinary.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateBinary.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateBinary.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.PressurePlateBlock.class, "powered");
 
Index: src/main/java/org/bukkit/util/RayTraceResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/RayTraceResult.java b/src/main/java/org/bukkit/util/RayTraceResult.java
--- a/src/main/java/org/bukkit/util/RayTraceResult.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/RayTraceResult.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.util;
 
 import com.google.common.base.Preconditions;
+import java.util.Objects;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Objects;
-
 /**
  * The hit result of a ray trace.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateWeighted.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateWeighted.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateWeighted.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateWeighted.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPressurePlateWeighted.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAnaloguePowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAnaloguePowerable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty POWER = getInteger(net.minecraft.world.level.block.WeightedPressurePlateBlock.class, "power");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPumpkinCarved.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPumpkinCarved.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPumpkinCarved.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPumpkinCarved.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPumpkinCarved.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CarvedPumpkinBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneComparator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneComparator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneComparator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftRedstoneComparator.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftComparator
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftComparator
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> MODE = getEnum(net.minecraft.world.level.block.ComparatorBlock.class, "mode");
 
@@ -27,7 +27,7 @@
         set(MODE, mode);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ComparatorBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.ComparatorBlock.class, "powered");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftObserver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftObserver.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftObserver.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftObserver.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftObserver.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ObserverBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.ObserverBlock.class, "powered");
 
Index: src/main/java/org/bukkit/help/HelpMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/help/HelpMap.java b/src/main/java/org/bukkit/help/HelpMap.java
--- a/src/main/java/org/bukkit/help/HelpMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/help/HelpMap.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.help;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Collection;
 import java.util.List;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * The HelpMap tracks all help topics registered in a Bukkit server. When the
Index: src/main/java/org/bukkit/help/IndexHelpTopic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.help;
 
+import java.util.Collection;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
@@ -8,8 +9,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-
 /**
  * This help topic generates a list of other help topics. This class is useful
  * for adding your own index help topics. To enforce a particular order, use a
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPiston.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPiston.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPiston.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPiston.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPiston.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftPiston
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftPiston
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty EXTENDED = getBoolean(net.minecraft.world.level.block.piston.PistonBaseBlock.class, "extended");
 
@@ -27,7 +27,7 @@
         set(EXTENDED, extended);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.piston.PistonBaseBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonExtension.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonExtension.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonExtension.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonExtension.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonExtension.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftPistonHead
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftPistonHead
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty SHORT = getBoolean(net.minecraft.world.level.block.piston.PistonHeadBlock.class, "short");
 
@@ -27,7 +27,7 @@
         set(SHORT, _short);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftTechnicalPiston
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftTechnicalPiston
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.piston.PistonHeadBlock.class, "type");
 
@@ -41,7 +41,7 @@
         set(TYPE, type);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.piston.PistonHeadBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonMoving.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonMoving.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonMoving.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonMoving.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPistonMoving.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftTechnicalPiston
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftTechnicalPiston
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.piston.MovingPistonBlock.class, "type");
 
@@ -27,7 +27,7 @@
         set(TYPE, type);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.piston.MovingPistonBlock.class, "facing");
 
Index: src/main/java/org/bukkit/util/BoundingBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/util/BoundingBox.java b/src/main/java/org/bukkit/util/BoundingBox.java
--- a/src/main/java/org/bukkit/util/BoundingBox.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/util/BoundingBox.java	(date 1703956060000)
@@ -1,6 +1,9 @@
 package org.bukkit.util;
 
 import com.google.common.base.Preconditions;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Objects;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -9,10 +12,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Objects;
-
 /**
  * A mutable axis aligned bounding box (AABB).
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPitcherCrop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPitcherCrop.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPitcherCrop.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPitcherCrop.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPitcherCrop.java	(date 1703956060000)
@@ -37,12 +37,12 @@
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.PitcherCropBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
-        return get(HALF, org.bukkit.block.data.Bisected.Half.class);
+    public Half getHalf() {
+        return get(HALF, Half.class);
     }
 
     @Override
-    public void setHalf(org.bukkit.block.data.Bisected.Half half) {
+    public void setHalf(Half half) {
         set(HALF, half);
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPointedDripstone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPointedDripstone.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPointedDripstone.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPointedDripstone.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftPointedDripstone.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftPointedDripstone
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftPointedDripstone
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> VERTICAL_DIRECTION = getEnum(net.minecraft.world.level.block.PointedDripstoneBlock.class, "vertical_direction");
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> THICKNESS = getEnum(net.minecraft.world.level.block.PointedDripstoneBlock.class, "thickness");
@@ -43,7 +43,7 @@
         set(THICKNESS, thickness);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.PointedDripstoneBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
--- a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.material.types;
 
 import com.google.common.collect.Maps;
+import java.util.Map;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * Represents the different textured blocks of mushroom.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartDetector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartDetector.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartDetector.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartDetector.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartDetector.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.DetectorRailBlock.class, "powered");
 
@@ -27,7 +27,7 @@
         set(POWERED, powered);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRail
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRail
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.DetectorRailBlock.class, "shape");
 
@@ -46,7 +46,7 @@
         return getValues(SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.DetectorRailBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartTrack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartTrack.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartTrack.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartTrack.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMinecartTrack.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRail
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRail
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.RailBlock.class, "shape");
 
@@ -32,7 +32,7 @@
         return getValues(SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.RailBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMycel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMycel.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMycel.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMycel.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftMycel.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftSnowable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftSnowable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty SNOWY = getBoolean(net.minecraft.world.level.block.MyceliumBlock.class, "snowy");
 
Index: src/main/java/org/bukkit/help/HelpTopicComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/help/HelpTopicComparator.java b/src/main/java/org/bukkit/help/HelpTopicComparator.java
--- a/src/main/java/org/bukkit/help/HelpTopicComparator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/help/HelpTopicComparator.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.help;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Comparator;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Used to impose a custom total ordering on help topics.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNetherWart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNetherWart.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNetherWart.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNetherWart.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNetherWart.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.NetherWartBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNote.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNote.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNote.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNote.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftNote.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftNoteBlock
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftNoteBlock
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> INSTRUMENT = getEnum(net.minecraft.world.level.block.NoteBlock.class, "instrument");
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty NOTE = getInteger(net.minecraft.world.level.block.NoteBlock.class, "note");
@@ -38,7 +38,7 @@
         set(NOTE, (int) note.getId());
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.NoteBlock.class, "powered");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLantern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLantern.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLantern.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLantern.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLantern.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftLantern
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftLantern
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty HANGING = getBoolean(net.minecraft.world.level.block.LanternBlock.class, "hanging");
 
@@ -27,7 +27,7 @@
         set(HANGING, hanging);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.LanternBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/map/MapFont.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/map/MapFont.java b/src/main/java/org/bukkit/map/MapFont.java
--- a/src/main/java/org/bukkit/map/MapFont.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/map/MapFont.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.map;
 
+import java.util.HashMap;
 import org.bukkit.ChatColor;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.HashMap;
-
 /**
  * Represents a bitmap font drawable to a map.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLayeredCauldron.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLayeredCauldron.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLayeredCauldron.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLayeredCauldron.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLayeredCauldron.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLevelled
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLevelled
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL = getInteger(net.minecraft.world.level.block.LayeredCauldronBlock.class, "level");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLeaves.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLeaves.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLeaves.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLeaves.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLeaves.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftLeaves
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftLeaves
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty DISTANCE = getInteger(net.minecraft.world.level.block.LeavesBlock.class, "distance");
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty PERSISTENT = getBoolean(net.minecraft.world.level.block.LeavesBlock.class, "persistent");
Index: src/main/java/org/bukkit/map/MapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/map/MapView.java b/src/main/java/org/bukkit/map/MapView.java
--- a/src/main/java/org/bukkit/map/MapView.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/map/MapView.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.map;
 
+import java.util.List;
 import org.bukkit.World;
 import org.bukkit.inventory.meta.MapMeta;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Represents a map item.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLectern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLectern.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLectern.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLectern.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLectern.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftLectern
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftLectern
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty HAS_BOOK = getBoolean(net.minecraft.world.level.block.LecternBlock.class, "has_book");
 
@@ -22,7 +22,7 @@
         return get(HAS_BOOK);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LecternBlock.class, "facing");
 
@@ -41,7 +41,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.LecternBlock.class, "powered");
 
Index: src/main/java/org/bukkit/map/MapCursor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
--- a/src/main/java/org/bukkit/map/MapCursor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/map/MapCursor.java	(date 1703956060000)
@@ -222,7 +222,7 @@
     /**
      * Represents the standard types of map cursors. More may be made
      * available by resource packs - the value is used by the client as an
-     * index in the file './misc/mapicons.png' from minecraft.jar or from a
+     * index in the file './assets/minecraft/textures/map/map_icons.png' from minecraft.jar or from a
      * resource pack.
      */
     public enum Type {
@@ -252,7 +252,15 @@
         BANNER_GREEN(23),
         BANNER_RED(24),
         BANNER_BLACK(25),
-        RED_X(26);
+        RED_X(26),
+        DESERT_VILLAGE(27),
+        PLAINS_VILLAGE(28),
+        SAVANNA_VILLAGE(29),
+        SNOWY_VILLAGE(30),
+        TAIGA_VILLAGE(31),
+        JUNGLE_TEMPLE(32),
+        SWAMP_HUT(33),
+        ;
 
         private byte value;
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLever.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLever.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLever.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLever.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLever.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSwitch
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSwitch
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACE = getEnum(net.minecraft.world.level.block.LeverBlock.class, "face");
 
@@ -27,7 +27,7 @@
         set(FACE, face);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LeverBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftFaceAttachable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftFaceAttachable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACH_FACE = getEnum(net.minecraft.world.level.block.LeverBlock.class, "face");
 
@@ -60,7 +60,7 @@
         set(ATTACH_FACE, face);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.LeverBlock.class, "powered");
 
Index: src/main/java/org/bukkit/map/MapCursorCollection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java
--- a/src/main/java/org/bukkit/map/MapCursorCollection.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/map/MapCursorCollection.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.map;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.ArrayList;
 import java.util.List;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents all the map cursors on a {@link MapCanvas}. Like MapCanvas, a
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLight.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLight.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLight.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLight.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLevelled
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLevelled
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL = getInteger(net.minecraft.world.level.block.LightBlock.class, "level");
 
@@ -32,7 +32,7 @@
         return getMax(LEVEL);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.LightBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/map/MapCanvas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/map/MapCanvas.java b/src/main/java/org/bukkit/map/MapCanvas.java
--- a/src/main/java/org/bukkit/map/MapCanvas.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/map/MapCanvas.java	(date 1703956060000)
@@ -1,9 +1,9 @@
 package org.bukkit.map;
 
+import java.awt.Color;
+import java.awt.Image;
+import javax.annotation.Nullable;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-import java.awt.*;
 
 /**
  * Represents a canvas for drawing to a map. Each canvas is associated with a
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLightningRod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLightningRod.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLightningRod.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLightningRod.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLightningRod.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LightningRodBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.LightningRodBlock.class, "powered");
 
@@ -46,7 +46,7 @@
         set(POWERED, powered);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.LightningRodBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLoom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLoom.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLoom.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLoom.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLoom.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LoomBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHugeMushroom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHugeMushroom.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHugeMushroom.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHugeMushroom.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHugeMushroom.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.HugeMushroomBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.HugeMushroomBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.HugeMushroomBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.HugeMushroomBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.HugeMushroomBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.HugeMushroomBlock.class, "down", true)
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIceFrost.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIceFrost.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIceFrost.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIceFrost.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIceFrost.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.FrostedIceBlock.class, "age");
 
Index: src/main/java/org/bukkit/enchantments/Enchantment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java	(date 1703956060000)
@@ -1,15 +1,15 @@
 package org.bukkit.enchantments;
 
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * The various type of enchantments that may be added to armour or weapons
  */
@@ -17,213 +17,208 @@
     /**
      * Provides protection against environmental damage
      */
-    public static final Enchantment PROTECTION_ENVIRONMENTAL = new EnchantmentWrapper("protection");
+    public static final Enchantment PROTECTION_ENVIRONMENTAL = getEnchantment("protection");
 
     /**
      * Provides protection against fire damage
      */
-    public static final Enchantment PROTECTION_FIRE = new EnchantmentWrapper("fire_protection");
+    public static final Enchantment PROTECTION_FIRE = getEnchantment("fire_protection");
 
     /**
      * Provides protection against fall damage
      */
-    public static final Enchantment PROTECTION_FALL = new EnchantmentWrapper("feather_falling");
+    public static final Enchantment PROTECTION_FALL = getEnchantment("feather_falling");
 
     /**
      * Provides protection against explosive damage
      */
-    public static final Enchantment PROTECTION_EXPLOSIONS = new EnchantmentWrapper("blast_protection");
+    public static final Enchantment PROTECTION_EXPLOSIONS = getEnchantment("blast_protection");
 
     /**
      * Provides protection against projectile damage
      */
-    public static final Enchantment PROTECTION_PROJECTILE = new EnchantmentWrapper("projectile_protection");
+    public static final Enchantment PROTECTION_PROJECTILE = getEnchantment("projectile_protection");
 
     /**
      * Decreases the rate of air loss whilst underwater
      */
-    public static final Enchantment OXYGEN = new EnchantmentWrapper("respiration");
+    public static final Enchantment OXYGEN = getEnchantment("respiration");
 
     /**
      * Increases the speed at which a player may mine underwater
      */
-    public static final Enchantment WATER_WORKER = new EnchantmentWrapper("aqua_affinity");
+    public static final Enchantment WATER_WORKER = getEnchantment("aqua_affinity");
 
     /**
      * Damages the attacker
      */
-    public static final Enchantment THORNS = new EnchantmentWrapper("thorns");
+    public static final Enchantment THORNS = getEnchantment("thorns");
 
     /**
      * Increases walking speed while in water
      */
-    public static final Enchantment DEPTH_STRIDER = new EnchantmentWrapper("depth_strider");
+    public static final Enchantment DEPTH_STRIDER = getEnchantment("depth_strider");
 
     /**
      * Freezes any still water adjacent to ice / frost which player is walking on
      */
-    public static final Enchantment FROST_WALKER = new EnchantmentWrapper("frost_walker");
+    public static final Enchantment FROST_WALKER = getEnchantment("frost_walker");
 
     /**
      * Item cannot be removed
      */
-    public static final Enchantment BINDING_CURSE = new EnchantmentWrapper("binding_curse");
+    public static final Enchantment BINDING_CURSE = getEnchantment("binding_curse");
 
     /**
      * Increases damage against all targets
      */
-    public static final Enchantment DAMAGE_ALL = new EnchantmentWrapper("sharpness");
+    public static final Enchantment DAMAGE_ALL = getEnchantment("sharpness");
 
     /**
      * Increases damage against undead targets
      */
-    public static final Enchantment DAMAGE_UNDEAD = new EnchantmentWrapper("smite");
+    public static final Enchantment DAMAGE_UNDEAD = getEnchantment("smite");
 
     /**
      * Increases damage against arthropod targets
      */
-    public static final Enchantment DAMAGE_ARTHROPODS = new EnchantmentWrapper("bane_of_arthropods");
+    public static final Enchantment DAMAGE_ARTHROPODS = getEnchantment("bane_of_arthropods");
 
     /**
      * All damage to other targets will knock them back when hit
      */
-    public static final Enchantment KNOCKBACK = new EnchantmentWrapper("knockback");
+    public static final Enchantment KNOCKBACK = getEnchantment("knockback");
 
     /**
      * When attacking a target, has a chance to set them on fire
      */
-    public static final Enchantment FIRE_ASPECT = new EnchantmentWrapper("fire_aspect");
+    public static final Enchantment FIRE_ASPECT = getEnchantment("fire_aspect");
 
     /**
      * Provides a chance of gaining extra loot when killing monsters
      */
-    public static final Enchantment LOOT_BONUS_MOBS = new EnchantmentWrapper("looting");
+    public static final Enchantment LOOT_BONUS_MOBS = getEnchantment("looting");
 
     /**
      * Increases damage against targets when using a sweep attack
      */
-    public static final Enchantment SWEEPING_EDGE = new EnchantmentWrapper("sweeping");
+    public static final Enchantment SWEEPING_EDGE = getEnchantment("sweeping");
 
     /**
      * Increases the rate at which you mine/dig
      */
-    public static final Enchantment DIG_SPEED = new EnchantmentWrapper("efficiency");
+    public static final Enchantment DIG_SPEED = getEnchantment("efficiency");
 
     /**
      * Allows blocks to drop themselves instead of fragments (for example,
      * stone instead of cobblestone)
      */
-    public static final Enchantment SILK_TOUCH = new EnchantmentWrapper("silk_touch");
+    public static final Enchantment SILK_TOUCH = getEnchantment("silk_touch");
 
     /**
      * Decreases the rate at which a tool looses durability
      */
-    public static final Enchantment DURABILITY = new EnchantmentWrapper("unbreaking");
+    public static final Enchantment DURABILITY = getEnchantment("unbreaking");
 
     /**
      * Provides a chance of gaining extra loot when destroying blocks
      */
-    public static final Enchantment LOOT_BONUS_BLOCKS = new EnchantmentWrapper("fortune");
+    public static final Enchantment LOOT_BONUS_BLOCKS = getEnchantment("fortune");
 
     /**
      * Provides extra damage when shooting arrows from bows
      */
-    public static final Enchantment ARROW_DAMAGE = new EnchantmentWrapper("power");
+    public static final Enchantment ARROW_DAMAGE = getEnchantment("power");
 
     /**
      * Provides a knockback when an entity is hit by an arrow from a bow
      */
-    public static final Enchantment ARROW_KNOCKBACK = new EnchantmentWrapper("punch");
+    public static final Enchantment ARROW_KNOCKBACK = getEnchantment("punch");
 
     /**
      * Sets entities on fire when hit by arrows shot from a bow
      */
-    public static final Enchantment ARROW_FIRE = new EnchantmentWrapper("flame");
+    public static final Enchantment ARROW_FIRE = getEnchantment("flame");
 
     /**
      * Provides infinite arrows when shooting a bow
      */
-    public static final Enchantment ARROW_INFINITE = new EnchantmentWrapper("infinity");
+    public static final Enchantment ARROW_INFINITE = getEnchantment("infinity");
 
     /**
      * Decreases odds of catching worthless junk
      */
-    public static final Enchantment LUCK = new EnchantmentWrapper("luck_of_the_sea");
+    public static final Enchantment LUCK = getEnchantment("luck_of_the_sea");
 
     /**
      * Increases rate of fish biting your hook
      */
-    public static final Enchantment LURE = new EnchantmentWrapper("lure");
+    public static final Enchantment LURE = getEnchantment("lure");
 
     /**
      * Causes a thrown trident to return to the player who threw it
      */
-    public static final Enchantment LOYALTY = new EnchantmentWrapper("loyalty");
+    public static final Enchantment LOYALTY = getEnchantment("loyalty");
 
     /**
      * Deals more damage to mobs that live in the ocean
      */
-    public static final Enchantment IMPALING = new EnchantmentWrapper("impaling");
+    public static final Enchantment IMPALING = getEnchantment("impaling");
 
     /**
      * When it is rainy, launches the player in the direction their trident is thrown
      */
-    public static final Enchantment RIPTIDE = new EnchantmentWrapper("riptide");
+    public static final Enchantment RIPTIDE = getEnchantment("riptide");
 
     /**
      * Strikes lightning when a mob is hit with a trident if conditions are
      * stormy
      */
-    public static final Enchantment CHANNELING = new EnchantmentWrapper("channeling");
+    public static final Enchantment CHANNELING = getEnchantment("channeling");
 
     /**
      * Shoot multiple arrows from crossbows
      */
-    public static final Enchantment MULTISHOT = new EnchantmentWrapper("multishot");
+    public static final Enchantment MULTISHOT = getEnchantment("multishot");
 
     /**
      * Charges crossbows quickly
      */
-    public static final Enchantment QUICK_CHARGE = new EnchantmentWrapper("quick_charge");
+    public static final Enchantment QUICK_CHARGE = getEnchantment("quick_charge");
 
     /**
      * Crossbow projectiles pierce entities
      */
-    public static final Enchantment PIERCING = new EnchantmentWrapper("piercing");
+    public static final Enchantment PIERCING = getEnchantment("piercing");
 
     /**
      * Allows mending the item using experience orbs
      */
-    public static final Enchantment MENDING = new EnchantmentWrapper("mending");
+    public static final Enchantment MENDING = getEnchantment("mending");
 
     /**
      * Item disappears instead of dropping
      */
-    public static final Enchantment VANISHING_CURSE = new EnchantmentWrapper("vanishing_curse");
+    public static final Enchantment VANISHING_CURSE = getEnchantment("vanishing_curse");
 
     /**
      * Walk quicker on soul blocks
      */
-    public static final Enchantment SOUL_SPEED = new EnchantmentWrapper("soul_speed");
+    public static final Enchantment SOUL_SPEED = getEnchantment("soul_speed");
 
     /**
      * Walk quicker while sneaking
      */
-    public static final Enchantment SWIFT_SNEAK = new EnchantmentWrapper("swift_sneak");
-
-    private static final Map<NamespacedKey, Enchantment> byKey = new HashMap<NamespacedKey, Enchantment>();
-    private static final Map<String, Enchantment> byName = new HashMap<String, Enchantment>();
-    private static boolean acceptingNew = true;
-    private final NamespacedKey key;
-
-    public Enchantment(@NotNull NamespacedKey key) {
-        this.key = key;
-    }
+    public static final Enchantment SWIFT_SNEAK = getEnchantment("swift_sneak");
 
     @NotNull
-    @Override
-    public NamespacedKey getKey() {
-        return key;
+    private static Enchantment getEnchantment(@NotNull String key) {
+        NamespacedKey namespacedKey = NamespacedKey.minecraft(key);
+        Enchantment enchantment = Registry.ENCHANTMENT.get(namespacedKey);
+
+        Preconditions.checkNotNull(enchantment, "No Enchantment found for %s. This is a bug.", namespacedKey);
+
+        return enchantment;
     }
 
     /**
@@ -301,75 +296,21 @@
      */
     public abstract boolean canEnchantItem(@NotNull ItemStack item);
 
-    @Override
-    public boolean equals(Object obj) {
-        if (obj == null) {
-            return false;
-        }
-        if (!(obj instanceof Enchantment)) {
-            return false;
-        }
-        final Enchantment other = (Enchantment) obj;
-        if (!this.key.equals(other.key)) {
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return key.hashCode();
-    }
-
-    @Override
-    public String toString() {
-        return "Enchantment[" + key + ", " + getName() + "]";
-    }
-
-    /**
-     * Registers an enchantment with the given ID and object.
-     * <p>
-     * Generally not to be used from within a plugin.
-     *
-     * @param enchantment Enchantment to register
-     */
-    public static void registerEnchantment(@NotNull Enchantment enchantment) {
-        if (byKey.containsKey(enchantment.key) || byName.containsKey(enchantment.getName())) {
-            throw new IllegalArgumentException("Cannot set already-set enchantment");
-        } else if (!isAcceptingRegistrations()) {
-            throw new IllegalStateException("No longer accepting new enchantments (can only be done by the server implementation)");
-        }
-
-        byKey.put(enchantment.key, enchantment);
-        byName.put(enchantment.getName(), enchantment);
-    }
-
-    /**
-     * Checks if this is accepting Enchantment registrations.
-     *
-     * @return True if the server Implementation may add enchantments
-     */
-    public static boolean isAcceptingRegistrations() {
-        return acceptingNew;
-    }
-
-    /**
-     * Stops accepting any enchantment registrations
-     */
-    public static void stopAcceptingRegistrations() {
-        acceptingNew = false;
-    }
-
     /**
      * Gets the Enchantment at the specified key
      *
      * @param key key to fetch
      * @return Resulting Enchantment, or null if not found
+     * @deprecated only for backwards compatibility, use {@link Registry#get(NamespacedKey)} instead
      */
     @Contract("null -> null")
     @Nullable
+    @Deprecated
     public static Enchantment getByKey(@Nullable NamespacedKey key) {
-        return byKey.get(key);
+        if (key == null) {
+            return null;
+        }
+        return Registry.ENCHANTMENT.get(key);
     }
 
     /**
@@ -383,16 +324,74 @@
     @Contract("null -> null")
     @Nullable
     public static Enchantment getByName(@Nullable String name) {
-        return byName.get(name);
+        if (name == null) {
+            return null;
+        }
+
+        name = convertLegacy(name);
+        return getByKey(NamespacedKey.fromString(name.toLowerCase()));
     }
 
     /**
      * Gets an array of all the registered {@link Enchantment}s
      *
      * @return Array of enchantments
+     * @deprecated use {@link Registry#iterator()}
      */
     @NotNull
+    @Deprecated
     public static Enchantment[] values() {
-        return byName.values().toArray(new Enchantment[byName.size()]);
+        return Lists.newArrayList(Registry.ENCHANTMENT).toArray(new Enchantment[0]);
+    }
+
+    private static String convertLegacy(String from) {
+        if (from == null) {
+            return null;
+        }
+
+        switch (from.toLowerCase()) {
+            case "protection_environmental":
+                return "protection";
+            case "protection_fire":
+                return "fire_protection";
+            case "protection_fall":
+                return "feather_falling";
+            case "protection_explosions":
+                return "blast_protection";
+            case "protection_projectile":
+                return "projectile_protection";
+            case "oxygen":
+                return "respiration";
+            case "water_worker":
+                return "aqua_affinity";
+            case "damage_all":
+                return "sharpness";
+            case "damage_undead":
+                return "smite";
+            case "damage_arthropods":
+                return "bane_of_arthropods";
+            case "loot_bonus_mobs":
+                return "looting";
+            case "sweeping_edge":
+                return "sweeping";
+            case "dig_speed":
+                return "efficiency";
+            case "durability":
+                return "unbreaking";
+            case "loot_bonus_blocks":
+                return "fortune";
+            case "arrow_damage":
+                return "power";
+            case "arrow_knockback":
+                return "punch";
+            case "arrow_fire":
+                return "flame";
+            case "arrow_infinite":
+                return "infinity";
+            case "luck":
+                return "luck_of_the_sea";
+        }
+
+        return from;
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftInfestedRotatedPillar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftInfestedRotatedPillar.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftInfestedRotatedPillar.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftInfestedRotatedPillar.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftInfestedRotatedPillar.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOrientable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOrientable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.InfestedRotatedPillarBlock.class, "axis");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIronBars.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIronBars.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIronBars.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIronBars.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftIronBars.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.IronBarsBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.IronBarsBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.IronBarsBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.IronBarsBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.IronBarsBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.IronBarsBlock.class, "down", true)
@@ -63,7 +63,7 @@
         return faces.build();
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.IronBarsBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.enchantments;
 
-import org.bukkit.NamespacedKey;
-import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * A simple wrapper for ease of selecting {@link Enchantment}s
+ * @deprecated only for backwards compatibility, EnchantmentWrapper is no longer used.
  */
-public class EnchantmentWrapper extends Enchantment {
-    public EnchantmentWrapper(@NotNull String name) {
-        super(NamespacedKey.minecraft(name));
+@Deprecated
+public abstract class EnchantmentWrapper extends Enchantment {
+    protected EnchantmentWrapper() {
     }
 
     /**
@@ -19,48 +18,6 @@
      */
     @NotNull
     public Enchantment getEnchantment() {
-        return Enchantment.getByKey(getKey());
-    }
-
-    @Override
-    public int getMaxLevel() {
-        return getEnchantment().getMaxLevel();
-    }
-
-    @Override
-    public int getStartLevel() {
-        return getEnchantment().getStartLevel();
-    }
-
-    @NotNull
-    @Override
-    public EnchantmentTarget getItemTarget() {
-        return getEnchantment().getItemTarget();
-    }
-
-    @Override
-    public boolean canEnchantItem(@NotNull ItemStack item) {
-        return getEnchantment().canEnchantItem(item);
-    }
-
-    @NotNull
-    @Override
-    public String getName() {
-        return getEnchantment().getName();
-    }
-
-    @Override
-    public boolean isTreasure() {
-        return getEnchantment().isTreasure();
-    }
-
-    @Override
-    public boolean isCursed() {
-        return getEnchantment().isCursed();
-    }
-
-    @Override
-    public boolean conflictsWith(@NotNull Enchantment other) {
-        return getEnchantment().conflictsWith(other);
+        return this;
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJigsaw.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJigsaw.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJigsaw.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJigsaw.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJigsaw.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftJigsaw
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftJigsaw
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ORIENTATION = getEnum(net.minecraft.world.level.block.JigsawBlock.class, "orientation");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJukeBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJukeBox.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJukeBox.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJukeBox.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftJukeBox.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftJukebox
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftJukebox
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty HAS_RECORD = getBoolean(net.minecraft.world.level.block.JukeboxBlock.class, "has_record");
 
Index: src/main/java/org/bukkit/map/MapPalette.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
--- a/src/main/java/org/bukkit/map/MapPalette.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/map/MapPalette.java	(date 1703956060000)
@@ -1,12 +1,13 @@
 package org.bukkit.map;
 
 import com.google.common.base.Preconditions;
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.awt.Image;
+import java.awt.image.BufferedImage;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.awt.*;
-import java.awt.image.BufferedImage;
-
 /**
  * Represents the palette that map items use.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftKelp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftKelp.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftKelp.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftKelp.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftKelp.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.KelpBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLadder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLadder.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLadder.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLadder.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftLadder.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LadderBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.LadderBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFurnaceFurace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFurnaceFurace.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFurnaceFurace.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFurnaceFurace.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFurnaceFurace.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.FurnaceBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.FurnaceBlock.class, "lit");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlazedTerracotta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlazedTerracotta.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlazedTerracotta.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlazedTerracotta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlazedTerracotta.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.GlazedTerracottaBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlowLichen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlowLichen.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlowLichen.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlowLichen.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGlowLichen.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.GlowLichenBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.GlowLichenBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.GlowLichenBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.GlowLichenBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.GlowLichenBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.GlowLichenBlock.class, "down", true)
@@ -63,7 +63,7 @@
         return faces.build();
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.GlowLichenBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.player;
 
+import java.util.UUID;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
@@ -11,13 +12,25 @@
 public class PlayerResourcePackStatusEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
+    private final UUID id;
     private final Status status;
 
-    public PlayerResourcePackStatusEvent(@NotNull final Player who, @NotNull Status resourcePackStatus) {
+    public PlayerResourcePackStatusEvent(@NotNull final Player who, @NotNull UUID id, @NotNull Status resourcePackStatus) {
         super(who);
+        this.id = id;
         this.status = resourcePackStatus;
     }
 
+    /**
+     * Gets the unique ID of this pack.
+     *
+     * @return unique resource pack ID.
+     */
+    @NotNull
+    public UUID getID() {
+        return id;
+    }
+
     /**
      * Gets the status of this pack.
      *
@@ -60,6 +73,22 @@
         /**
          * The client accepted the pack and is beginning a download of it.
          */
-        ACCEPTED;
+        ACCEPTED,
+        /**
+         * The client successfully downloaded the pack.
+         */
+        DOWNLOADED,
+        /**
+         * The pack URL was invalid.
+         */
+        INVALID_URL,
+        /**
+         * The client was unable to reload the pack.
+         */
+        FAILED_RELOAD,
+        /**
+         * The pack was discarded by the client.
+         */
+        DISCARDED;
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrass.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrass.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrass.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrass.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftSnowable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftSnowable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty SNOWY = getBoolean(net.minecraft.world.level.block.GrassBlock.class, "snowy");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrindstone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrindstone.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrindstone.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrindstone.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftGrindstone.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.GrindstoneBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftFaceAttachable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftFaceAttachable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACH_FACE = getEnum(net.minecraft.world.level.block.GrindstoneBlock.class, "face");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHangingRoots.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHangingRoots.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHangingRoots.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHangingRoots.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHangingRoots.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.HangingRootsBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHay.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHay.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHay.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHay.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOrientable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOrientable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.HayBlock.class, "axis");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHopper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHopper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHopper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftHopper.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftHopper
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftHopper
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty ENABLED = getBoolean(net.minecraft.world.level.block.HopperBlock.class, "enabled");
 
@@ -27,7 +27,7 @@
         set(ENABLED, enabled);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.HopperBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderPortalFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderPortalFrame.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderPortalFrame.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderPortalFrame.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderPortalFrame.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftEndPortalFrame
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftEndPortalFrame
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty EYE = getBoolean(net.minecraft.world.level.block.EndPortalFrameBlock.class, "eye");
 
@@ -27,7 +27,7 @@
         set(EYE, eye);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.EndPortalFrameBlock.class, "facing");
 
Index: src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.event.player;
 
+import java.net.InetAddress;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.net.InetAddress;
-
 /**
  * Stores details for players attempting to log in.
  * <br>
@@ -16,6 +15,7 @@
 public class PlayerLoginEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
     private final InetAddress address;
+    private final InetAddress realAddress;
     private final String hostname;
     private Result result = Result.ALLOWED;
     private String message = "";
@@ -28,11 +28,26 @@
      * @param hostname The hostname that was used to connect to the server
      * @param address The address the player used to connect, provided for
      *     timing issues
+     * @param realAddress the actual, unspoofed connecting address
      */
-    public PlayerLoginEvent(@NotNull final Player player, @NotNull final String hostname, @NotNull final InetAddress address) {
+    public PlayerLoginEvent(@NotNull final Player player, @NotNull final String hostname, @NotNull final InetAddress address, final @NotNull InetAddress realAddress) {
         super(player);
         this.hostname = hostname;
         this.address = address;
+        this.realAddress = realAddress;
+    }
+
+    /**
+     * This constructor defaults message to an empty string, and result to
+     * ALLOWED
+     *
+     * @param player The {@link Player} for this event
+     * @param hostname The hostname that was used to connect to the server
+     * @param address The address the player used to connect, provided for
+     *     timing issues
+     */
+    public PlayerLoginEvent(@NotNull final Player player, @NotNull final String hostname, @NotNull final InetAddress address) {
+        this(player, hostname, address, address);
     }
 
     /**
@@ -44,13 +59,24 @@
      *     timing issues
      * @param result The result status for this event
      * @param message The message to be displayed if result denies login
+     * @param realAddress the actual, unspoofed connecting address
      */
-    public PlayerLoginEvent(@NotNull final Player player, @NotNull String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final String message) {
-        this(player, hostname, address);
+    public PlayerLoginEvent(@NotNull final Player player, @NotNull String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final String message, @NotNull final InetAddress realAddress) { // Spigot
+        this(player, hostname, address, realAddress);
         this.result = result;
         this.message = message;
     }
 
+    /**
+     * Gets the connection address of this player, regardless of whether it has been spoofed or not.
+     *
+     * @return the player's connection address
+     */
+    @NotNull
+    public InetAddress getRealAddress() {
+        return realAddress;
+    }
+
     /**
      * Gets the current result of the login, as an enum
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEndRod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEndRod.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEndRod.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEndRod.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEndRod.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.EndRodBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEquipableCarvedPumpkin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEquipableCarvedPumpkin.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEquipableCarvedPumpkin.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEquipableCarvedPumpkin.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEquipableCarvedPumpkin.java	(date 1703956060000)
@@ -31,4 +31,4 @@
     public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFence.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFence.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFence.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFence.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFence.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.FenceBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.FenceBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.FenceBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.FenceBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.FenceBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.FenceBlock.class, "down", true)
@@ -63,7 +63,7 @@
         return faces.build();
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.FenceBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFenceGate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFenceGate.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFenceGate.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFenceGate.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFenceGate.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftGate
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftGate
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty IN_WALL = getBoolean(net.minecraft.world.level.block.FenceGateBlock.class, "in_wall");
 
@@ -27,7 +27,7 @@
         set(IN_WALL, inWall);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.FenceGateBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOpenable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOpenable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty OPEN = getBoolean(net.minecraft.world.level.block.FenceGateBlock.class, "open");
 
@@ -60,7 +60,7 @@
         set(OPEN, open);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.FenceGateBlock.class, "powered");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFire.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFire.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFire.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFire.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.FireBlock.class, "age");
 
@@ -32,7 +32,7 @@
         return getMax(AGE);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.FireBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.FireBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.FireBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.FireBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.FireBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.FireBlock.class, "down", true)
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFloorSign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFloorSign.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFloorSign.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFloorSign.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFloorSign.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRotatable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.StandingSignBlock.class, "rotation");
 
@@ -116,7 +116,7 @@
         set(ROTATION, val);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.StandingSignBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFluids.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFluids.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFluids.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFluids.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftFluids.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLevelled
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLevelled
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL = getInteger(net.minecraft.world.level.block.LiquidBlock.class, "level");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCrops.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCrops.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCrops.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCrops.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCrops.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.CropBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDaylightDetector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDaylightDetector.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDaylightDetector.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDaylightDetector.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDaylightDetector.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftDaylightDetector
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftDaylightDetector
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty INVERTED = getBoolean(net.minecraft.world.level.block.DaylightDetectorBlock.class, "inverted");
 
@@ -27,7 +27,7 @@
         set(INVERTED, inverted);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAnaloguePowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAnaloguePowerable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty POWER = getInteger(net.minecraft.world.level.block.DaylightDetectorBlock.class, "power");
 
Index: src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java	(date 1703956060000)
@@ -23,14 +23,59 @@
     private final ExperienceOrb experienceOrb;
     private int repairAmount;
     private boolean cancelled;
+    private java.util.function.IntUnaryOperator durabilityToXpOp; // Paper
 
     public PlayerItemMendEvent(@NotNull Player who, @NotNull ItemStack item, @NotNull EquipmentSlot slot, @NotNull ExperienceOrb experienceOrb, int repairAmount) {
+        // Paper start
+        this(who, item, slot, experienceOrb, repairAmount, amount -> amount / 2);
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public PlayerItemMendEvent(@NotNull Player who, @NotNull ItemStack item, @NotNull EquipmentSlot slot, @NotNull ExperienceOrb experienceOrb, int repairAmount, @NotNull java.util.function.IntUnaryOperator durabilityToXpOp) {
+        // Paper end
         super(who);
         this.item = item;
         this.slot = slot;
         this.experienceOrb = experienceOrb;
         this.repairAmount = repairAmount;
+        // Paper start
+        this.durabilityToXpOp = durabilityToXpOp;
+    }
+
+    /**
+     * Get the operation used to calculate xp used based on
+     * the set repair amount. Used to calculate how much of
+     * an XP orb will be consumed by this mend operation.
+     *
+     * @return the durability-to-xp operation
+     */
+    public @NotNull java.util.function.IntUnaryOperator getDurabilityToXpOperation() {
+        return this.durabilityToXpOp;
     }
+
+    /**
+     * Sets the operation used to calculate xp used based on
+     * the set repair amount. Used to calculate how much of
+     * an XP orb will be consumed by this mend operation.
+     *
+     * @param durabilityToXpOp the durability-to-xp operation
+     */
+    public void setDurabilityToXpOperation(@NotNull java.util.function.IntUnaryOperator durabilityToXpOp) {
+        com.google.common.base.Preconditions.checkNotNull(durabilityToXpOp);
+        this.durabilityToXpOp = durabilityToXpOp;
+    }
+
+    /**
+     * Helper method to get the amount of experience that will be consumed.
+     * This method just returns the result of inputting {@link #getRepairAmount()}
+     * into the function {@link #getDurabilityToXpOperation()}.
+     *
+     * @return the amount of xp that will be consumed
+     */
+    public int getConsumedExperience() {
+        return this.durabilityToXpOp.applyAsInt(this.getRepairAmount());
+    }
+    // Paper end
 
     @Deprecated
     public PlayerItemMendEvent(@NotNull Player who, @NotNull ItemStack item, @NotNull ExperienceOrb experienceOrb, int repairAmount) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDirtSnow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDirtSnow.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDirtSnow.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDirtSnow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDirtSnow.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftSnowable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftSnowable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty SNOWY = getBoolean(net.minecraft.world.level.block.SnowyDirtBlock.class, "snowy");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDispenser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDispenser.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDispenser.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDispenser.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftDispenser
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftDispenser
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty TRIGGERED = getBoolean(net.minecraft.world.level.block.DispenserBlock.class, "triggered");
 
@@ -27,7 +27,7 @@
         set(TRIGGERED, triggered);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.DispenserBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDoor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDoor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDoor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDoor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDoor.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftDoor
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftDoor
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HINGE = getEnum(net.minecraft.world.level.block.DoorBlock.class, "hinge");
 
@@ -27,7 +27,7 @@
         set(HINGE, hinge);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftBisected
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBisected
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.DoorBlock.class, "half");
 
@@ -41,7 +41,7 @@
         set(HALF, half);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.DoorBlock.class, "facing");
 
@@ -60,7 +60,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOpenable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOpenable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty OPEN = getBoolean(net.minecraft.world.level.block.DoorBlock.class, "open");
 
@@ -74,7 +74,7 @@
         set(OPEN, open);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.DoorBlock.class, "powered");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDropper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDropper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDropper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDropper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftDropper.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftDispenser
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftDispenser
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty TRIGGERED = getBoolean(net.minecraft.world.level.block.DropperBlock.class, "triggered");
 
@@ -27,7 +27,7 @@
         set(TRIGGERED, triggered);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.DropperBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderChest.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderChest.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderChest.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftEnderChest.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.EnderChestBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.EnderChestBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftComposter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftComposter.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftComposter.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftComposter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftComposter.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLevelled
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLevelled
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL = getInteger(net.minecraft.world.level.block.ComposterBlock.class, "level");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftConduit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftConduit.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftConduit.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftConduit.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftConduit.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.ConduitBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.player;
 
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -8,8 +9,6 @@
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * This event is called whenever a player harvests a block.
  * <br>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralDead.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralDead.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralDead.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralDead.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralDead.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.BaseCoralPlantBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java	(date 1703956060000)
@@ -21,7 +21,6 @@
         this(respawnPlayer, respawnLocation, isBedSpawn, false);
     }
 
-    @Deprecated
     public PlayerRespawnEvent(@NotNull final Player respawnPlayer, @NotNull final Location respawnLocation, final boolean isBedSpawn, final boolean isAnchorSpawn) {
         this(respawnPlayer, respawnLocation, isBedSpawn, false, RespawnReason.PLUGIN);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFan.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFan.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFan.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFan.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFan.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.CoralFanBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java	(date 1703956060000)
@@ -8,10 +8,10 @@
 
 /**
  * Called when a visible entity is hidden from a player.
- * <br>
+ * <p>
  * This event is only called when the entity's visibility status is actually
  * changed.
- * <br>
+ *
  * This event is called regardless of if the entity was within tracking range.
  *
  * @see Player#hideEntity(org.bukkit.plugin.Plugin, org.bukkit.entity.Entity)
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanAbstract.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanAbstract.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanAbstract.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanAbstract.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanAbstract.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.BaseCoralFanBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.player;
 
+import java.net.InetAddress;
+import java.util.UUID;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.net.InetAddress;
-import java.util.UUID;
-
 /**
  * Stores details for players attempting to log in.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CoralWallFanBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.CoralWallFanBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.event.player;
 
+import java.util.Collection;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collection;
-
 /**
  * This event is called when the list of available server commands is sent to
  * the player.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWallAbstract.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWallAbstract.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWallAbstract.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWallAbstract.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralFanWallAbstract.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BaseCoralWallFanBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.BaseCoralWallFanBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralPlant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralPlant.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralPlant.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralPlant.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCoralPlant.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.CoralPlantBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChest.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChest.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChest.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftChest
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftChest
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.ChestBlock.class, "type");
 
@@ -27,7 +27,7 @@
         set(TYPE, type);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ChestBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.ChestBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChestTrapped.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChestTrapped.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChestTrapped.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChestTrapped.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChestTrapped.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftChest
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftChest
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.TrappedChestBlock.class, "type");
 
@@ -27,7 +27,7 @@
         set(TYPE, type);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.TrappedChestBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.TrappedChestBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/event/player/AsyncPlayerChatPreviewEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerChatPreviewEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerChatPreviewEvent.java
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerChatPreviewEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerChatPreviewEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.player;
 
+import java.util.Set;
 import org.bukkit.Warning;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Used to format chat for chat preview. If this event is used, then the result
  * of the corresponding {@link AsyncPlayerChatEvent} <b>must</b> be formatted in
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFlower.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFlower.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFlower.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFlower.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFlower.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.ChorusFlowerBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFruit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFruit.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFruit.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFruit.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChorusFruit.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftMultipleFacing
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftMultipleFacing
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] FACES = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.ChorusPlantBlock.class, "north", true), getBoolean(net.minecraft.world.level.block.ChorusPlantBlock.class, "east", true), getBoolean(net.minecraft.world.level.block.ChorusPlantBlock.class, "south", true), getBoolean(net.minecraft.world.level.block.ChorusPlantBlock.class, "west", true), getBoolean(net.minecraft.world.level.block.ChorusPlantBlock.class, "up", true), getBoolean(net.minecraft.world.level.block.ChorusPlantBlock.class, "down", true)
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCobbleWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCobbleWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCobbleWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCobbleWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCobbleWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftWall
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftWall
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty UP = getBoolean(net.minecraft.world.level.block.WallBlock.class, "up");
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?>[] HEIGHTS = new net.minecraft.world.level.block.state.properties.EnumProperty[]{
@@ -40,7 +40,7 @@
         set(HEIGHTS[face.ordinal()], height);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.WallBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCocoa.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCocoa.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCocoa.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCocoa.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCocoa.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.CocoaBlock.class, "age");
 
@@ -32,7 +32,7 @@
         return getMax(AGE);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CocoaBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCommand.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCommand.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCommand.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftCommandBlock
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftCommandBlock
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty CONDITIONAL = getBoolean(net.minecraft.world.level.block.CommandBlock.class, "conditional");
 
@@ -27,7 +27,7 @@
         set(CONDITIONAL, conditional);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CommandBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandle.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandle.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandle.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftCandle
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftCandle
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty CANDLES = getInteger(net.minecraft.world.level.block.CandleBlock.class, "candles");
 
@@ -32,7 +32,7 @@
         return getMax(CANDLES);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.CandleBlock.class, "lit");
 
@@ -46,7 +46,7 @@
         set(LIT, lit);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.CandleBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandleCake.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandleCake.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandleCake.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandleCake.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCandleCake.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.CandleCakeBlock.class, "lit");
 
Index: src/main/java/org/bukkit/event/player/PlayerChatEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.event.player;
 
 import com.google.common.base.Preconditions;
+import java.util.HashSet;
+import java.util.Set;
 import org.bukkit.Warning;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.HashSet;
-import java.util.Set;
-
 /**
  * Holds information for player chat and commands
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCarrots.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCarrots.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCarrots.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCarrots.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCarrots.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.CarrotBlock.class, "age");
 
Index: src/main/java/org/bukkit/event/player/PlayerExpCooldownChangeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerExpCooldownChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerExpCooldownChangeEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerExpCooldownChangeEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerExpCooldownChangeEvent.java	(date 1703956060000)
@@ -75,4 +75,4 @@
          */
         PLUGIN;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVines.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVines.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVines.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVines.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVines.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.CaveVinesBlock.class, "age");
 
@@ -32,7 +32,7 @@
         return getMax(AGE);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftCaveVinesPlant
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftCaveVinesPlant
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty BERRIES = getBoolean(net.minecraft.world.level.block.CaveVinesBlock.class, "berries");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVinesPlant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVinesPlant.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVinesPlant.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVinesPlant.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCaveVinesPlant.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftCaveVinesPlant
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftCaveVinesPlant
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty BERRIES = getBoolean(net.minecraft.world.level.block.CaveVinesPlantBlock.class, "berries");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChain.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChain.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChain.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftChain.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftOrientable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftOrientable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.ChainBlock.class, "axis");
 
@@ -32,7 +32,7 @@
         return getValues(AXIS, org.bukkit.Axis.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.ChainBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrewingStand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrewingStand.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrewingStand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrewingStand.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftBrewingStand
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftBrewingStand
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty[] HAS_BOTTLE = new net.minecraft.world.level.block.state.properties.BooleanProperty[]{
         getBoolean(net.minecraft.world.level.block.BrewingStandBlock.class, "has_bottle_0"), getBoolean(net.minecraft.world.level.block.BrewingStandBlock.class, "has_bottle_1"), getBoolean(net.minecraft.world.level.block.BrewingStandBlock.class, "has_bottle_2")
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrushable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrushable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrushable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrushable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBrushable.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.block.data.type.CraftBrushable
+    // org.bukkit.craftbukkit.block.data.CraftBrushable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty DUSTED = getInteger(net.minecraft.world.level.block.BrushableBlock.class, "dusted");
 
Index: src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.player;
 
 import com.google.common.base.Preconditions;
+import java.util.Collection;
 import org.bukkit.Warning;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collection;
-
 /**
  * Called when a player attempts to tab-complete a chat message.
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBubbleColumn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBubbleColumn.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBubbleColumn.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBubbleColumn.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBubbleColumn.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftBubbleColumn
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftBubbleColumn
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty DRAG = getBoolean(net.minecraft.world.level.block.BubbleColumnBlock.class, "drag");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftButtonAbstract.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftButtonAbstract.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftButtonAbstract.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftButtonAbstract.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftButtonAbstract.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSwitch
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSwitch
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACE = getEnum(net.minecraft.world.level.block.ButtonBlock.class, "face");
 
@@ -27,7 +27,7 @@
         set(FACE, face);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ButtonBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftFaceAttachable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftFaceAttachable
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACH_FACE = getEnum(net.minecraft.world.level.block.ButtonBlock.class, "face");
 
@@ -60,7 +60,7 @@
         set(ATTACH_FACE, face);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.ButtonBlock.class, "powered");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCactus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCactus.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCactus.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCactus.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCactus.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.CactusBlock.class, "age");
 
Index: src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java	(date 1703956060000)
@@ -85,6 +85,7 @@
          * Indicates the teleportation was caused by an event not covered by
          * this enum
          */
+        MOHIST,
         UNKNOWN;
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCake.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCake.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCake.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCake.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCake.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftCake
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftCake
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty BITES = getInteger(net.minecraft.world.level.block.CakeBlock.class, "bites");
 
Index: src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java	(date 1703956060000)
@@ -17,7 +17,6 @@
 public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private final Item item;
-    private boolean flyAtPlayer = true; // Paper
     private boolean cancel = false;
     private final int remaining;
 
@@ -46,27 +45,6 @@
         return remaining;
     }
 
-    // Paper Start
-    /**
-     * Set if the item will fly at the player
-     * <p>Cancelling the event will set this value to false.</p>
-     *
-     * @param flyAtPlayer True for item to fly at player
-     */
-    public void setFlyAtPlayer(boolean flyAtPlayer) {
-        this.flyAtPlayer = flyAtPlayer;
-    }
-
-    /**
-     * Gets if the item will fly at the player
-     *
-     * @return True if the item will fly at the player
-     */
-    public boolean getFlyAtPlayer() {
-        return flyAtPlayer;
-    }
-    // Paper End
-
     @Override
     public boolean isCancelled() {
         return cancel;
@@ -75,7 +53,6 @@
     @Override
     public void setCancelled(boolean cancel) {
         this.cancel = cancel;
-        this.flyAtPlayer = !cancel; // Paper
     }
 
     @NotNull
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCalibratedSculkSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCalibratedSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCalibratedSculkSensor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCalibratedSculkSensor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCalibratedSculkSensor.java	(date 1703956060000)
@@ -37,12 +37,12 @@
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> PHASE = getEnum(net.minecraft.world.level.block.CalibratedSculkSensorBlock.class, "sculk_sensor_phase");
 
     @Override
-    public org.bukkit.block.data.type.SculkSensor.Phase getPhase() {
-        return get(PHASE, org.bukkit.block.data.type.SculkSensor.Phase.class);
+    public Phase getPhase() {
+        return get(PHASE, Phase.class);
     }
 
     @Override
-    public void setPhase(org.bukkit.block.data.type.SculkSensor.Phase phase) {
+    public void setPhase(Phase phase) {
         set(PHASE, phase);
     }
 
@@ -78,4 +78,4 @@
     public void setWaterlogged(boolean waterlogged) {
         set(WATERLOGGED, waterlogged);
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCampfire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCampfire.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCampfire.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftCampfire.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftCampfire
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftCampfire
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty SIGNAL_FIRE = getBoolean(net.minecraft.world.level.block.CampfireBlock.class, "signal_fire");
 
@@ -27,7 +27,7 @@
         set(SIGNAL_FIRE, signalFire);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CampfireBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.CampfireBlock.class, "lit");
 
@@ -60,7 +60,7 @@
         set(LIT, lit);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.CampfireBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBarrel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBarrel.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBarrel.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBarrel.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBarrel.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BarrelBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBed.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBed.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBed.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftBed
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftBed
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> PART = getEnum(net.minecraft.world.level.block.BedBlock.class, "part");
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty OCCUPIED = getBoolean(net.minecraft.world.level.block.BedBlock.class, "occupied");
@@ -33,7 +33,7 @@
         return get(OCCUPIED);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BedBlock.class, "facing");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeehive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeehive.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeehive.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeehive.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftBeehive
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftBeehive
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty HONEY_LEVEL = getInteger(net.minecraft.world.level.block.BeehiveBlock.class, "honey_level");
 
@@ -32,7 +32,7 @@
         return getMax(HONEY_LEVEL);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BeehiveBlock.class, "facing");
 
Index: src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.player;
 
+import java.net.InetAddress;
+import java.util.UUID;
 import org.bukkit.Warning;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.net.InetAddress;
-import java.util.UUID;
-
 /**
  * Stores details for players attempting to log in
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeetroot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeetroot.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeetroot.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeetroot.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBeetroot.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.BeetrootBlock.class, "age");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBell.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBell.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBell.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBell.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftBell
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftBell
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACHMENT = getEnum(net.minecraft.world.level.block.BellBlock.class, "attachment");
 
@@ -27,7 +27,7 @@
         set(ATTACHMENT, leaves);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BellBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftPowerable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftPowerable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.BellBlock.class, "powered");
 
Index: src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.event.player;
 
 import com.google.common.base.Preconditions;
+import java.util.HashSet;
+import java.util.Set;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.HashSet;
-import java.util.Set;
-
 /**
  * This event is called whenever a player runs a command (by placing a slash
  * at the start of their message). It is called early in the command handling
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleaf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleaf.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleaf.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleaf.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleaf.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftBigDripleaf
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftBigDripleaf
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TILT = getEnum(net.minecraft.world.level.block.BigDripleafBlock.class, "tilt");
 
@@ -27,7 +27,7 @@
         set(TILT, tilt);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BigDripleafBlock.class, "facing");
 
@@ -46,7 +46,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.BigDripleafBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleafStem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleafStem.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleafStem.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleafStem.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBigDripleafStem.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BigDripleafStemBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.BigDripleafStemBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBlastFurnace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBlastFurnace.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBlastFurnace.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBlastFurnace.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBlastFurnace.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BlastFurnaceBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftLightable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftLightable
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty LIT = getBoolean(net.minecraft.world.level.block.BlastFurnaceBlock.class, "lit");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAmethystCluster.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAmethystCluster.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAmethystCluster.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAmethystCluster.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAmethystCluster.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.AmethystClusterBlock.class, "facing");
 
@@ -32,7 +32,7 @@
         return getValues(FACING, org.bukkit.block.BlockFace.class);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftWaterlogged
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftWaterlogged
 
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED = getBoolean(net.minecraft.world.level.block.AmethystClusterBlock.class, "waterlogged");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAnvil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAnvil.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAnvil.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAnvil.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftAnvil.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.AnvilBlock.class, "facing");
 
Index: src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java	(date 1703956060000)
@@ -8,10 +8,10 @@
 
 /**
  * Called when a hidden entity is shown to a player.
- * <br>
+ * <p>
  * This event is only called when the entity's visibility status is actually
  * changed.
- * <br>
+ * <p>
  * This event is called regardless of whether the entity was within tracking
  * range.
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBamboo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBamboo.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBamboo.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBamboo.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBamboo.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftBamboo
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftBamboo
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> LEAVES = getEnum(net.minecraft.world.level.block.BambooStalkBlock.class, "leaves");
 
@@ -27,7 +27,7 @@
         set(LEAVES, leaves);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftAgeable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftAgeable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty AGE = getInteger(net.minecraft.world.level.block.BambooStalkBlock.class, "age");
 
@@ -46,7 +46,7 @@
         return getMax(AGE);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.type.CraftSapling
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.type.CraftSapling
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty STAGE = getInteger(net.minecraft.world.level.block.BambooStalkBlock.class, "stage");
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBanner.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBanner.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBanner.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftRotatable
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.BannerBlock.class, "rotation");
 
Index: src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java	(date 1703956060000)
@@ -15,12 +15,20 @@
     private static final HandlerList handlers = new HandlerList();
     private final ItemStack item;
     private int damage;
+    private int originalDamage; // Paper - Add pre-reduction damage
     private boolean cancelled = false;
 
     public PlayerItemDamageEvent(@NotNull Player player, @NotNull ItemStack what, int damage) {
+        // Paper start - Add pre-reduction damage
+        this(player, what, damage, damage);
+    }
+
+    public PlayerItemDamageEvent(@NotNull Player player, @NotNull ItemStack what, int damage, int originalDamage) {
         super(player);
         this.item = what;
         this.damage = damage;
+        this.originalDamage = originalDamage;
+        // Paper end
     }
 
     /**
@@ -42,6 +50,19 @@
         return damage;
     }
 
+    // Paper start - Add pre-reduction damage
+    /**
+     * Gets the amount of durability damage this item would have taken before
+     * the Unbreaking reduction. If the item has no Unbreaking level then
+     * this value will be the same as the {@link #getDamage()} value.
+     *
+     * @return pre-reduction damage amount
+     */
+    public int getOriginalDamage() {
+        return originalDamage;
+    }
+    // Paper end
+
     public void setDamage(int damage) {
         this.damage = damage;
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBannerWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBannerWall.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBannerWall.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBannerWall.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/impl/CraftBannerWall.java	(date 1703956060000)
@@ -13,7 +13,7 @@
         super(state);
     }
 
-    // org.bukkit.craftbukkit.v1_19_R3.block.data.CraftDirectional
+    // org.bukkit.craftbukkit.v1_20_R2.block.data.CraftDirectional
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallBannerBlock.class, "facing");
 
Index: src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.player;
 
+import java.util.IllegalFormatException;
+import java.util.Set;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.IllegalFormatException;
-import java.util.Set;
-
 /**
  * This event will sometimes fire synchronously, depending on how it was
  * triggered.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftBlockData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftBlockData.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftBlockData.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftBlockData.java	(date 1703956060000)
@@ -5,6 +5,10 @@
 import com.google.common.collect.ImmutableSet;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
 import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -18,6 +22,7 @@
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import org.bukkit.Color;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.SoundGroup;
@@ -32,17 +37,13 @@
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockStates;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockSupport;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-import java.util.stream.Collectors;
-
 public class CraftBlockData implements BlockData {
 
     private BlockState state;
@@ -58,7 +59,7 @@
 
     @Override
     public Material getMaterial() {
-        return CraftMagicNumbers.getMaterial(state.getBlock());
+        return CraftBlockType.minecraftToBukkit(state.getBlock());
     }
 
     public BlockState getState() {
@@ -364,6 +365,7 @@
         register(net.minecraft.world.level.block.BannerBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftBanner::new);
         register(net.minecraft.world.level.block.WallBannerBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftBannerWall::new);
         register(net.minecraft.world.level.block.BarrelBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftBarrel::new);
+        register(net.minecraft.world.level.block.BarrierBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftBarrier::new);
         register(net.minecraft.world.level.block.BedBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftBed::new);
         register(net.minecraft.world.level.block.BeehiveBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftBeehive::new);
         register(net.minecraft.world.level.block.BeetrootBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftBeetroot::new);
@@ -489,6 +491,8 @@
         register(net.minecraft.world.level.block.CeilingHangingSignBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftCeilingHangingSign::new);
         register(net.minecraft.world.level.block.CherryLeavesBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftCherryLeaves::new);
         register(net.minecraft.world.level.block.ChiseledBookShelfBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftChiseledBookShelf::new);
+        register(net.minecraft.world.level.block.CopperBulbBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftCopperBulb::new);
+        register(net.minecraft.world.level.block.CrafterBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftCrafter::new);
         register(net.minecraft.world.level.block.DecoratedPotBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftDecoratedPot::new);
         register(net.minecraft.world.level.block.EquipableCarvedPumpkinBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftEquipableCarvedPumpkin::new);
         register(net.minecraft.world.level.block.GlowLichenBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftGlowLichen::new);
@@ -504,7 +508,6 @@
         register(net.minecraft.world.level.block.PinkPetalsBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftPinkPetals::new);
         register(net.minecraft.world.level.block.PitcherCropBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftPitcherCrop::new);
         register(net.minecraft.world.level.block.PointedDripstoneBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftPointedDripstone::new);
-        register(net.minecraft.world.level.block.PowderSnowCauldronBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftPowderSnowCauldron::new);
         register(net.minecraft.world.level.block.SculkCatalystBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftSculkCatalyst::new);
         register(net.minecraft.world.level.block.SculkSensorBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftSculkSensor::new);
         register(net.minecraft.world.level.block.SculkShriekerBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftSculkShrieker::new);
@@ -513,9 +516,15 @@
         register(net.minecraft.world.level.block.SnifferEggBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftSnifferEgg::new);
         register(net.minecraft.world.level.block.TallSeagrassBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftTallSeagrass::new);
         register(net.minecraft.world.level.block.TorchflowerCropBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftTorchflowerCrop::new);
+        register(net.minecraft.world.level.block.TrialSpawnerBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftTrialSpawner::new);
         register(net.minecraft.world.level.block.WallHangingSignBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWallHangingSign::new);
+        register(net.minecraft.world.level.block.WaterloggedTransparentBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWaterloggedTransparent::new);
+        register(net.minecraft.world.level.block.WeatheringCopperBulbBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWeatheringCopperBulb::new);
+        register(net.minecraft.world.level.block.WeatheringCopperDoorBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWeatheringCopperDoor::new);
+        register(net.minecraft.world.level.block.WeatheringCopperGrateBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWeatheringCopperGrate::new);
         register(net.minecraft.world.level.block.WeatheringCopperSlabBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWeatheringCopperSlab::new);
         register(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWeatheringCopperStair::new);
+        register(net.minecraft.world.level.block.WeatheringCopperTrapDoorBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftWeatheringCopperTrapDoor::new);
         register(net.minecraft.world.level.block.piston.PistonBaseBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftPiston::new);
         register(net.minecraft.world.level.block.piston.PistonHeadBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftPistonExtension::new);
         register(net.minecraft.world.level.block.piston.MovingPistonBlock.class, org.bukkit.craftbukkit.v1_20_R3.block.impl.CraftPistonMoving::new);
@@ -530,7 +539,7 @@
         Preconditions.checkArgument(material == null || material.isBlock(), "Cannot get data for not block %s", material);
 
         BlockState blockData;
-        Block block = CraftMagicNumbers.getBlock(material);
+        Block block = CraftBlockType.bukkitToMinecraft(material);
         Map<net.minecraft.world.level.block.state.properties.Property<?>, Comparable<?>> parsed = null;
 
         // Data provided, use it
@@ -627,9 +636,14 @@
         return state.isFaceSturdy(EmptyBlockGetter.INSTANCE, BlockPos.ZERO, CraftBlock.blockFaceToNotch(face), CraftBlockSupport.toNMS(support));
     }
 
+    @Override
+    public Color getMapColor() {
+        return Color.fromRGB(state.getMapColor(null, null).col);
+    }
+
     @Override
     public Material getPlacementMaterial() {
-        return CraftMagicNumbers.getMaterial(state.getBlock().asItem());
+        return CraftItemType.minecraftToBukkit(state.getBlock().asItem());
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftHatchable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftHatchable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftHatchable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftHatchable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/data/CraftHatchable.java	(date 1703956060000)
@@ -20,4 +20,4 @@
     public int getMaximumHatch() {
         return getMax(HATCH);
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/projectiles/CraftBlockProjectileSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/projectiles/CraftBlockProjectileSource.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/projectiles/CraftBlockProjectileSource.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/projectiles/CraftBlockProjectileSource.java	(date 1703956060000)
@@ -12,8 +12,8 @@
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
 import org.bukkit.entity.AbstractArrow;
+import org.bukkit.entity.Arrow;
 import org.bukkit.entity.Egg;
 import org.bukkit.entity.EnderPearl;
 import org.bukkit.entity.Fireball;
@@ -27,7 +27,6 @@
 import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.WitherSkull;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
 import org.bukkit.projectiles.BlockProjectileSource;
 import org.bukkit.util.Vector;
@@ -79,15 +78,15 @@
             }
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.Arrow(world, iposition.x(), iposition.y(), iposition.z());
-                ((net.minecraft.world.entity.projectile.Arrow) launch).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+                launch = new net.minecraft.world.entity.projectile.Arrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW));
+                ((Arrow) launch.getBukkitEntity()).setBasePotionType(PotionType.WATER);
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, iposition.x(), iposition.y(), iposition.z());
+                launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.SPECTRAL_ARROW));
             } else {
-                launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, iposition.x(), iposition.y(), iposition.z());
+                launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW));
             }
             ((net.minecraft.world.entity.projectile.AbstractArrow) launch).pickup = net.minecraft.world.entity.projectile.AbstractArrow.Pickup.ALLOWED;
-            ((net.minecraft.world.entity.projectile.AbstractArrow) launch).banner$setProjectileSource(this);
+            ((net.minecraft.world.entity.projectile.AbstractArrow) launch).projectileSource = this;
         } else if (Fireball.class.isAssignableFrom(projectile)) {
             double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
             double d1 = iposition.y() + (double) ((float) enumdirection.getStepY() * 0.3F);
@@ -117,14 +116,14 @@
                 ((AbstractHurtingProjectile) launch).zPower = d5 / d6 * 0.1D;
             }
 
-            ((AbstractHurtingProjectile) launch).banner$setProjectileSource(this);
+            ((AbstractHurtingProjectile) launch).projectileSource = this;
         }
 
         Preconditions.checkArgument(launch != null, "Projectile not supported");
 
         if (launch instanceof net.minecraft.world.entity.projectile.Projectile) {
             if (launch instanceof net.minecraft.world.entity.projectile.ThrowableProjectile) {
-                ((net.minecraft.world.entity.projectile.ThrowableProjectile) launch).banner$setProjectileSource(this);
+                ((net.minecraft.world.entity.projectile.ThrowableProjectile) launch).projectileSource = this;
             }
             // Values from DispenseBehaviorProjectile
             float a = 6.0F;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/enchantments/CraftEnchantment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/enchantments/CraftEnchantment.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/enchantments/CraftEnchantment.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/enchantments/CraftEnchantment.java	(date 1703956060000)
@@ -1,8 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.enchantments;
 
+import com.google.common.base.Preconditions;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.world.item.enchantment.BindingCurseEnchantment;
 import net.minecraft.world.item.enchantment.VanishingCurseEnchantment;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.bukkit.craftbukkit.v1_20_R3.CraftRegistry;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.enchantments.Enchantment;
@@ -11,171 +16,132 @@
 import org.bukkit.inventory.ItemStack;
 
 public class CraftEnchantment extends Enchantment {
-    private final net.minecraft.world.item.enchantment.Enchantment target;
+    public static Enchantment minecraftToBukkit(net.minecraft.world.item.enchantment.Enchantment minecraft) {
+        Preconditions.checkArgument(minecraft != null);
+
+        net.minecraft.core.Registry<net.minecraft.world.item.enchantment.Enchantment> registry = CraftRegistry.getMinecraftRegistry(Registries.ENCHANTMENT);
+        Enchantment bukkit = Registry.ENCHANTMENT.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+
+        Preconditions.checkArgument(bukkit != null);
+
+        return bukkit;
+    }
+
+    public static net.minecraft.world.item.enchantment.Enchantment bukkitToMinecraft(Enchantment bukkit) {
+        Preconditions.checkArgument(bukkit != null);
+
+        return ((CraftEnchantment) bukkit).getHandle();
+    }
+
+    private final NamespacedKey key;
+    private final net.minecraft.world.item.enchantment.Enchantment handle;
+    private final int id;
+
+    public CraftEnchantment(NamespacedKey key, net.minecraft.world.item.enchantment.Enchantment handle) {
+        this.key = key;
+        this.handle = handle;
+        this.id = BuiltInRegistries.ENCHANTMENT.getId(handle);
+    }
 
-    public CraftEnchantment(net.minecraft.world.item.enchantment.Enchantment target) {
-        super(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.ENCHANTMENT.getKey(target)));
-        this.target = target;
+    public net.minecraft.world.item.enchantment.Enchantment getHandle() {
+        return handle;
+    }
+
+    @Override
+    public NamespacedKey getKey() {
+        return key;
     }
 
     @Override
     public int getMaxLevel() {
-        return target.getMaxLevel();
+        return handle.getMaxLevel();
     }
 
     @Override
     public int getStartLevel() {
-        return target.getMinLevel();
+        return handle.getMinLevel();
     }
 
     @Override
     public EnchantmentTarget getItemTarget() {
-        switch (target.category) {
-        case ARMOR:
-            return EnchantmentTarget.ARMOR;
-        case ARMOR_FEET:
-            return EnchantmentTarget.ARMOR_FEET;
-        case ARMOR_HEAD:
-            return EnchantmentTarget.ARMOR_HEAD;
-        case ARMOR_LEGS:
-            return EnchantmentTarget.ARMOR_LEGS;
-        case ARMOR_CHEST:
-            return EnchantmentTarget.ARMOR_TORSO;
-        case DIGGER:
-            return EnchantmentTarget.TOOL;
-        case WEAPON:
-            return EnchantmentTarget.WEAPON;
-        case BOW:
-            return EnchantmentTarget.BOW;
-        case FISHING_ROD:
-            return EnchantmentTarget.FISHING_ROD;
-        case BREAKABLE:
-            return EnchantmentTarget.BREAKABLE;
-        case WEARABLE:
-            return EnchantmentTarget.WEARABLE;
-        case TRIDENT:
-            return EnchantmentTarget.TRIDENT;
-        case CROSSBOW:
-            return EnchantmentTarget.CROSSBOW;
-        case VANISHABLE:
-            return EnchantmentTarget.VANISHABLE;
-        default:
-            return null;
-        }
+        return switch (handle.category) {
+            case ARMOR -> EnchantmentTarget.ARMOR;
+            case ARMOR_FEET -> EnchantmentTarget.ARMOR_FEET;
+            case ARMOR_HEAD -> EnchantmentTarget.ARMOR_HEAD;
+            case ARMOR_LEGS -> EnchantmentTarget.ARMOR_LEGS;
+            case ARMOR_CHEST -> EnchantmentTarget.ARMOR_TORSO;
+            case DIGGER -> EnchantmentTarget.TOOL;
+            case WEAPON -> EnchantmentTarget.WEAPON;
+            case BOW -> EnchantmentTarget.BOW;
+            case FISHING_ROD -> EnchantmentTarget.FISHING_ROD;
+            case BREAKABLE -> EnchantmentTarget.BREAKABLE;
+            case WEARABLE -> EnchantmentTarget.WEARABLE;
+            case TRIDENT -> EnchantmentTarget.TRIDENT;
+            case CROSSBOW -> EnchantmentTarget.CROSSBOW;
+            case VANISHABLE -> EnchantmentTarget.VANISHABLE;
+        };
     }
 
     @Override
     public boolean isTreasure() {
-        return target.isTreasureOnly();
+        return handle.isTreasureOnly();
     }
 
     @Override
     public boolean isCursed() {
-        return target instanceof BindingCurseEnchantment || target instanceof VanishingCurseEnchantment;
+        return handle instanceof BindingCurseEnchantment || handle instanceof VanishingCurseEnchantment;
     }
 
     @Override
     public boolean canEnchantItem(ItemStack item) {
-        return target.canEnchant(CraftItemStack.asNMSCopy(item));
+        return handle.canEnchant(CraftItemStack.asNMSCopy(item));
     }
 
     @Override
     public String getName() {
         // PAIL: migration paths
-        switch (BuiltInRegistries.ENCHANTMENT.getId(target)) {
-        case 0:
-            return "PROTECTION_ENVIRONMENTAL";
-        case 1:
-            return "PROTECTION_FIRE";
-        case 2:
-            return "PROTECTION_FALL";
-        case 3:
-            return "PROTECTION_EXPLOSIONS";
-        case 4:
-            return "PROTECTION_PROJECTILE";
-        case 5:
-            return "OXYGEN";
-        case 6:
-            return "WATER_WORKER";
-        case 7:
-            return "THORNS";
-        case 8:
-            return "DEPTH_STRIDER";
-        case 9:
-            return "FROST_WALKER";
-        case 10:
-            return "BINDING_CURSE";
-        case 11:
-            return "SOUL_SPEED";
-        case 12:
-            return "SWIFT_SNEAK";
-        case 13:
-            return "DAMAGE_ALL";
-        case 14:
-            return "DAMAGE_UNDEAD";
-        case 15:
-            return "DAMAGE_ARTHROPODS";
-        case 16:
-            return "KNOCKBACK";
-        case 17:
-            return "FIRE_ASPECT";
-        case 18:
-            return "LOOT_BONUS_MOBS";
-        case 19:
-            return "SWEEPING_EDGE";
-        case 20:
-            return "DIG_SPEED";
-        case 21:
-            return "SILK_TOUCH";
-        case 22:
-            return "DURABILITY";
-        case 23:
-            return "LOOT_BONUS_BLOCKS";
-        case 24:
-            return "ARROW_DAMAGE";
-        case 25:
-            return "ARROW_KNOCKBACK";
-        case 26:
-            return "ARROW_FIRE";
-        case 27:
-            return "ARROW_INFINITE";
-        case 28:
-            return "LUCK";
-        case 29:
-            return "LURE";
-        case 30:
-            return "LOYALTY";
-        case 31:
-            return "IMPALING";
-        case 32:
-            return "RIPTIDE";
-        case 33:
-            return "CHANNELING";
-        case 34:
-            return "MULTISHOT";
-        case 35:
-            return "QUICK_CHARGE";
-        case 36:
-            return "PIERCING";
-        case 37:
-            return "MENDING";
-        case 38:
-            return "VANISHING_CURSE";
-        default:
-            return "UNKNOWN_ENCHANT_" + BuiltInRegistries.ENCHANTMENT.getId(target);
-        }
-    }
-
-    public static net.minecraft.world.item.enchantment.Enchantment getRaw(Enchantment enchantment) {
-        if (enchantment instanceof EnchantmentWrapper) {
-            enchantment = ((EnchantmentWrapper) enchantment).getEnchantment();
-        }
-
-        if (enchantment instanceof CraftEnchantment) {
-            return ((CraftEnchantment) enchantment).target;
-        }
-
-        return null;
+        return switch (id) {
+            case 0 -> "PROTECTION_ENVIRONMENTAL";
+            case 1 -> "PROTECTION_FIRE";
+            case 2 -> "PROTECTION_FALL";
+            case 3 -> "PROTECTION_EXPLOSIONS";
+            case 4 -> "PROTECTION_PROJECTILE";
+            case 5 -> "OXYGEN";
+            case 6 -> "WATER_WORKER";
+            case 7 -> "THORNS";
+            case 8 -> "DEPTH_STRIDER";
+            case 9 -> "FROST_WALKER";
+            case 10 -> "BINDING_CURSE";
+            case 11 -> "SOUL_SPEED";
+            case 12 -> "SWIFT_SNEAK";
+            case 13 -> "DAMAGE_ALL";
+            case 14 -> "DAMAGE_UNDEAD";
+            case 15 -> "DAMAGE_ARTHROPODS";
+            case 16 -> "KNOCKBACK";
+            case 17 -> "FIRE_ASPECT";
+            case 18 -> "LOOT_BONUS_MOBS";
+            case 19 -> "SWEEPING_EDGE";
+            case 20 -> "DIG_SPEED";
+            case 21 -> "SILK_TOUCH";
+            case 22 -> "DURABILITY";
+            case 23 -> "LOOT_BONUS_BLOCKS";
+            case 24 -> "ARROW_DAMAGE";
+            case 25 -> "ARROW_KNOCKBACK";
+            case 26 -> "ARROW_FIRE";
+            case 27 -> "ARROW_INFINITE";
+            case 28 -> "LUCK";
+            case 29 -> "LURE";
+            case 30 -> "LOYALTY";
+            case 31 -> "IMPALING";
+            case 32 -> "RIPTIDE";
+            case 33 -> "CHANNELING";
+            case 34 -> "MULTISHOT";
+            case 35 -> "QUICK_CHARGE";
+            case 36 -> "PIERCING";
+            case 37 -> "MENDING";
+            case 38 -> "VANISHING_CURSE";
+            default -> getKey().toString();
+        };
     }
 
     @Override
@@ -187,10 +153,29 @@
             return false;
         }
         CraftEnchantment ench = (CraftEnchantment) other;
-        return !target.isCompatibleWith(ench.target);
+        return !handle.isCompatibleWith(ench.getHandle());
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        if (this == other) {
+            return true;
+        }
+
+        if (!(other instanceof CraftEnchantment)) {
+            return false;
+        }
+
+        return getKey().equals(((Enchantment) other).getKey());
+    }
+
+    @Override
+    public int hashCode() {
+        return getKey().hashCode();
     }
 
-    public net.minecraft.world.item.enchantment.Enchantment getHandle() {
-        return target;
+    @Override
+    public String toString() {
+        return "CraftEnchantment[" + getKey() + "]";
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/configuration/ConfigSerializationUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/configuration/ConfigSerializationUtil.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/configuration/ConfigSerializationUtil.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/configuration/ConfigSerializationUtil.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/configuration/ConfigSerializationUtil.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.configuration;
 
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.UUID;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
 
 /**
  * Utilities related to the serialization and deserialization of {@link ConfigurationSerializable}s.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/conversations/ConversationTracker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/conversations/ConversationTracker.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/conversations/ConversationTracker.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/conversations/ConversationTracker.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/conversations/ConversationTracker.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.conversations;
 
+import java.util.LinkedList;
+import java.util.logging.Level;
 import org.bukkit.Bukkit;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
 
-import java.util.LinkedList;
-import java.util.logging.Level;
-
 /**
  */
 public class ConversationTracker {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/permissions/CraftDefaultPermissions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/permissions/CraftDefaultPermissions.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/permissions/CraftDefaultPermissions.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/permissions/CraftDefaultPermissions.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/permissions/CraftDefaultPermissions.java	(date 1703956060000)
@@ -11,12 +11,6 @@
     public static void registerCorePermissions() {
         Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all vanilla utilities and commands");
         CommandPermissions.registerPermissions(parent);
-        // Spigot start
-        DefaultPermissions.registerPermission(ROOT + ".nbt.place", "Gives the user the ability to place restricted blocks with NBT in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
-        DefaultPermissions.registerPermission(ROOT + ".nbt.copy", "Gives the user the ability to copy NBT in creative", org.bukkit.permissions.PermissionDefault.TRUE, parent);
-        DefaultPermissions.registerPermission(ROOT + ".debugstick", "Gives the user the ability to use the debug stick in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
-        DefaultPermissions.registerPermission(ROOT + ".debugstick.always", "Gives the user the ability to use the debug stick in all game modes", org.bukkit.permissions.PermissionDefault.FALSE, parent);
-        // Spigot end
         parent.recalculatePermissibles();
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftTeam.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftTeam.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftTeam.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftTeam.java	(date 1703956060000)
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
+import java.util.Set;
 import net.minecraft.world.scores.PlayerTeam;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -10,8 +11,6 @@
 import org.bukkit.scoreboard.NameTagVisibility;
 import org.bukkit.scoreboard.Team;
 
-import java.util.Set;
-
 final class CraftTeam extends CraftScoreboardComponent implements Team {
     private final PlayerTeam team;
 
@@ -37,8 +36,6 @@
     @Override
     public void setDisplayName(String displayName) {
         Preconditions.checkArgument(displayName != null, "Display name cannot be null");
-        int lengthStripedDisplayName = ChatColor.stripColor(displayName).length();
-        Preconditions.checkArgument(lengthStripedDisplayName <= 128, "Display name '%s' is longer than the limit of 128 characters (%s)", displayName, lengthStripedDisplayName);
         checkState();
 
         team.setDisplayName(CraftChatMessage.fromString(displayName)[0]); // SPIGOT-4112: not nullable
@@ -54,8 +51,6 @@
     @Override
     public void setPrefix(String prefix) {
         Preconditions.checkArgument(prefix != null, "Prefix cannot be null");
-        int lengthStripedPrefix = ChatColor.stripColor(prefix).length();
-        Preconditions.checkArgument(lengthStripedPrefix <= 64, "Prefix '%s' is longer than the limit of 64 characters (%s)", prefix, lengthStripedPrefix);
         checkState();
 
         team.setPlayerPrefix(CraftChatMessage.fromStringOrNull(prefix));
@@ -71,8 +66,7 @@
     @Override
     public void setSuffix(String suffix) {
         Preconditions.checkArgument(suffix != null, "Suffix cannot be null");
-        int lengthStripedSuffix = ChatColor.stripColor(suffix).length();
-        Preconditions.checkArgument(lengthStripedSuffix <= 64, "Suffix '%s' is longer than the limit of 64 characters (%s)", suffix, lengthStripedSuffix);
+        checkState();
 
         team.setPlayerSuffix(CraftChatMessage.fromStringOrNull(suffix));
     }
@@ -121,14 +115,14 @@
     }
 
     @Override
-    public NameTagVisibility getNameTagVisibility() {
+    public NameTagVisibility getNameTagVisibility() throws IllegalArgumentException {
         checkState();
 
         return notchToBukkit(team.getNameTagVisibility());
     }
 
     @Override
-    public void setNameTagVisibility(NameTagVisibility visibility) {
+    public void setNameTagVisibility(NameTagVisibility visibility) throws IllegalArgumentException {
         checkState();
 
         team.setNameTagVisibility(bukkitToNotch(visibility));
@@ -197,13 +191,13 @@
     }
 
     @Override
-    public boolean hasPlayer(OfflinePlayer player) {
+    public boolean hasPlayer(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Preconditions.checkArgument(player != null, "OfflinePlayer cannot be null");
         return hasEntry(player.getName());
     }
 
     @Override
-    public boolean hasEntry(String entry) {
+    public boolean hasEntry(String entry) throws IllegalArgumentException, IllegalStateException {
         Preconditions.checkArgument(entry != null, "Entry cannot be null");
         checkState();
 
@@ -283,7 +277,7 @@
     }
 
     @Override
-    CraftScoreboard checkState() throws IllegalStateException {
+    CraftScoreboard checkState() {
         Preconditions.checkState(getScoreboard().board.getPlayerTeam(team.getName()) != null, "Unregistered scoreboard component");
 
         return getScoreboard();
@@ -308,4 +302,4 @@
         return !(this.team != other.team && (this.team == null || !this.team.equals(other.team)));
     }
 
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancement.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancement.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancement.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancement.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.advancement;
 
+import java.util.Collection;
+import java.util.Collections;
 import net.minecraft.advancements.AdvancementHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.advancement.AdvancementDisplay;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 
-import java.util.Collection;
-import java.util.Collections;
-
 public class CraftAdvancement implements org.bukkit.advancement.Advancement {
 
     private final AdvancementHolder handle;
@@ -32,7 +31,7 @@
 
     @Override
     public AdvancementDisplay getDisplay() {
-        if (handle.value().display() == null) {
+        if (handle.value().display().isEmpty()) {
             return null;
         }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementDisplay.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementDisplay.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementDisplay.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementDisplay.java	(date 1703956060000)
@@ -60,6 +60,6 @@
 
     @Override
     public AdvancementDisplayType getType() {
-        return AdvancementDisplayType.values()[handle.getFrame().ordinal()];
+        return AdvancementDisplayType.values()[handle.getType().ordinal()];
     }
 }
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementProgress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementProgress.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementProgress.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementProgress.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/advancement/CraftAdvancementProgress.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.craftbukkit.v1_20_R3.advancement;
 
 import com.google.common.collect.Lists;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
 import net.minecraft.advancements.CriterionProgress;
 import net.minecraft.server.PlayerAdvancements;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.advancement.AdvancementProgress;
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Date;
-
 public class CraftAdvancementProgress implements AdvancementProgress {
 
     private final CraftAdvancement advancement;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataContainer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataContainer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataContainer.java	(date 1703956060000)
@@ -1,6 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.persistence;
 
 import com.google.common.base.Preconditions;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Objects;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.NamespacedKey;
@@ -9,13 +15,6 @@
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.persistence.PersistentDataType;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Objects;
-import java.util.Set;
-
 public class CraftPersistentDataContainer implements PersistentDataContainer {
 
     private final Map<String, Tag> customDataTags = new HashMap<>();
@@ -55,6 +54,11 @@
         return registry.isInstanceOf(type.getPrimitiveType(), value);
     }
 
+    @Override
+    public boolean has(NamespacedKey key) {
+        return this.customDataTags.get(key.toString()) != null;
+    }
+
     @Override
     public <T, Z> Z get(NamespacedKey key, PersistentDataType<T, Z> type) {
         Preconditions.checkArgument(key != null, "The NamespacedKey key cannot be null");
@@ -100,6 +104,18 @@
         return this.customDataTags.isEmpty();
     }
 
+    @Override
+    public void copyTo(PersistentDataContainer other, boolean replace) {
+        Preconditions.checkArgument(other != null, "The target container cannot be null");
+
+        CraftPersistentDataContainer target = (CraftPersistentDataContainer) other;
+        if (replace) {
+            target.customDataTags.putAll(customDataTags);
+        } else {
+            customDataTags.forEach(target.customDataTags::putIfAbsent);
+        }
+    }
+
     @Override
     public PersistentDataAdapterContext getAdapterContext() {
         return this.adapterContext;
@@ -154,7 +170,7 @@
         return hashCode;
     }
 
-    public Map<String, Object> serialize() {
-        return (Map<String, Object>) CraftNBTTagConfigSerializer.serialize(toTagCompound());
+    public String serialize() {
+        return CraftNBTTagConfigSerializer.serialize(toTagCompound());
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataTypeRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataTypeRegistry.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataTypeRegistry.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataTypeRegistry.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/CraftPersistentDataTypeRegistry.java	(date 1703956060000)
@@ -2,6 +2,11 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.primitives.Primitives;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.function.Function;
 import net.minecraft.nbt.ByteArrayTag;
 import net.minecraft.nbt.ByteTag;
 import net.minecraft.nbt.CompoundTag;
@@ -17,12 +22,6 @@
 import net.minecraft.nbt.Tag;
 import org.bukkit.persistence.PersistentDataContainer;
 
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-import java.util.function.Function;
-
 /**
  * This class represents a registry that contains the used adapters for.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/DirtyCraftPersistentDataContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/DirtyCraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/DirtyCraftPersistentDataContainer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/DirtyCraftPersistentDataContainer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/persistence/DirtyCraftPersistentDataContainer.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.persistence;
 
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.NamespacedKey;
 import org.bukkit.persistence.PersistentDataType;
 
-import java.util.Map;
-
 /**
  * A child class of the persistent data container that recalls if it has been
  * mutated from an external caller.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructureManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructureManager.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructureManager.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructureManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructureManager.java	(date 1703956060000)
@@ -1,15 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.structure;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtIo;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
-import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
-import org.bukkit.structure.Structure;
-import org.bukkit.structure.StructureManager;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -22,6 +13,14 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtIo;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
+import org.bukkit.structure.Structure;
+import org.bukkit.structure.StructureManager;
 
 public class CraftStructureManager implements StructureManager {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftCriteria.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftCriteria.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftCriteria.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftCriteria.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftCriteria.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.scoreboard;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
 import org.bukkit.scoreboard.Criteria;
 import org.bukkit.scoreboard.RenderType;
 
-import java.util.Map;
-
 public final class CraftCriteria implements Criteria {
     static final Map<String, CraftCriteria> DEFAULTS;
     static final CraftCriteria DUMMY;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftObjective.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftObjective.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftObjective.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftObjective.java	(date 1703956060000)
@@ -25,7 +25,7 @@
     }
 
     @Override
-    public String getName()  {
+    public String getName() {
         checkState();
 
         return objective.getName();
@@ -41,7 +41,6 @@
     @Override
     public void setDisplayName(String displayName) {
         Preconditions.checkArgument(displayName != null, "Display name cannot be null");
-        Preconditions.checkArgument(displayName.length() <= 128, "Display name '" + displayName + "' is longer than the limit of 128 characters");
         checkState();
 
         objective.setDisplayName(CraftChatMessage.fromString(displayName)[0]); // SPIGOT-4112: not nullable
@@ -116,10 +115,9 @@
 
     @Override
     public Score getScore(OfflinePlayer player) {
-        Preconditions.checkArgument(player != null, "Player cannot be null");
         checkState();
 
-        return new CraftScore(this, player.getName());
+        return new CraftScore(this, CraftScoreboard.getScoreHolder(player));
     }
 
     @Override
@@ -128,7 +126,7 @@
         Preconditions.checkArgument(entry.length() <= Short.MAX_VALUE, "Score '" + entry + "' is longer than the limit of 32767 characters");
         checkState();
 
-        return new CraftScore(this, entry);
+        return new CraftScore(this, CraftScoreboard.getScoreHolder(entry));
     }
 
     @Override
@@ -165,4 +163,4 @@
     }
 
 
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java b/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java
--- a/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java	(date 1703956060000)
@@ -2,12 +2,20 @@
 
 import org.bukkit.Keyed;
 import org.bukkit.Material;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
+import org.jetbrains.annotations.ApiStatus;
 
 /**
  * Represents a material that may be used in an {@link ArmorTrim}.
+ *
+ * @apiNote Armor trims are part of an experimental feature of Minecraft and
+ * hence subject to change. Constants in this class may be null if a data pack
+ * is not present to enable these features.
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public interface TrimMaterial extends Keyed {
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScore.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScore.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScore.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScore.java	(date 1703956060000)
@@ -1,12 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.scoreboard;
 
+import net.minecraft.world.scores.ReadOnlyScoreInfo;
+import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Scoreboard;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
-
-import java.util.Map;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * TL;DR: This class is special and lazily grabs a handle...
@@ -15,26 +16,26 @@
  * Also, as an added perk, a CraftScore will (intentionally) stay a valid reference so long as objective is valid.
  */
 final class CraftScore implements Score {
-    private final String entry;
+    private final ScoreHolder entry;
     private final CraftObjective objective;
 
-    CraftScore(CraftObjective objective, String entry) {
+    CraftScore(CraftObjective objective, ScoreHolder  entry) {
         this.objective = objective;
         this.entry = entry;
     }
 
     @Override
     public OfflinePlayer getPlayer() {
-        return Bukkit.getOfflinePlayer(entry);
+        return Bukkit.getOfflinePlayer(entry.getScoreboardName());
     }
 
     @Override
     public String getEntry() {
-        return entry;
+        return entry.getScoreboardName();
     }
 
     @Override
-    public Objective getObjective() {
+    public @NotNull Objective getObjective() {
         return objective;
     }
 
@@ -43,10 +44,9 @@
         Scoreboard board = objective.checkState().board;
 
         if (board.getTrackedPlayers().contains(entry)) { // Lazy
-            Map<net.minecraft.world.scores.Objective, net.minecraft.world.scores.Score> scores = board.getPlayerScores(entry);
-            net.minecraft.world.scores.Score score = scores.get(objective.getHandle());
+            ReadOnlyScoreInfo score = board.getPlayerScoreInfo(entry, objective.getHandle());
             if (score != null) { // Lazy
-                return score.getScore();
+                return score.value();
             }
         }
 
@@ -55,14 +55,14 @@
 
     @Override
     public void setScore(int score) {
-        objective.checkState().board.getOrCreatePlayerScore(entry, objective.getHandle()).setScore(score);
+        objective.checkState().board.getOrCreatePlayerScore(entry, objective.getHandle()).set(score);
     }
 
     @Override
     public boolean isScoreSet() {
         Scoreboard board = objective.checkState().board;
 
-        return board.getTrackedPlayers().contains(entry) && board.getPlayerScores(entry).containsKey(objective.getHandle());
+        return board.getTrackedPlayers().contains(entry) && board.getPlayerScoreInfo(entry, objective.getHandle()) != null;
     }
 
     @Override
Index: src/main/java/org/bukkit/inventory/meta/trim/ArmorTrim.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/trim/ArmorTrim.java b/src/main/java/org/bukkit/inventory/meta/trim/ArmorTrim.java
--- a/src/main/java/org/bukkit/inventory/meta/trim/ArmorTrim.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/trim/ArmorTrim.java	(date 1703956060000)
@@ -1,16 +1,21 @@
 package org.bukkit.inventory.meta.trim;
 
 import com.google.common.base.Preconditions;
+import java.util.Objects;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.inventory.meta.ArmorMeta;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Objects;
-
 /**
  * Represents an armor trim that may be applied to an item.
  *
  * @see ArmorMeta#setTrim(ArmorTrim)
+ * @apiNote Armor trims are part of an experimental feature of Minecraft and
+ * hence subject to change.
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public class ArmorTrim {
 
     private final TrimMaterial material;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboard.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboard.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboard.java	(date 1703956060000)
@@ -5,9 +5,11 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import net.minecraft.world.scores.PlayerTeam;
+import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Scoreboard;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage;
 import org.bukkit.scoreboard.Criteria;
 import org.bukkit.scoreboard.DisplaySlot;
@@ -53,7 +55,7 @@
         Preconditions.checkArgument(displayName.length() <= 128, "The display name '%s' is longer than the limit of 128 characters (%s)", displayName, displayName.length());
         Preconditions.checkArgument(board.getObjective(name) == null, "An objective of name '%s' already exists", name);
 
-        net.minecraft.world.scores.Objective objective = board.addObjective(name, ((CraftCriteria) criteria).criteria, CraftChatMessage.fromStringOrNull(displayName), CraftScoreboardTranslations.fromBukkitRender(renderType));
+        net.minecraft.world.scores.Objective objective = board.addObjective(name, ((CraftCriteria) criteria).criteria, CraftChatMessage.fromStringOrNull(displayName), CraftScoreboardTranslations.fromBukkitRender(renderType), true, null);
         return new CraftObjective(this, objective);
     }
 
@@ -110,13 +112,14 @@
 
     @Override
     public ImmutableSet<Score> getScores(OfflinePlayer player) {
-        Preconditions.checkArgument(player != null, "OfflinePlayer cannot be null");
-
-        return getScores(player.getName());
+        return getScores(getScoreHolder(player));
     }
 
     @Override
     public ImmutableSet<Score> getScores(String entry) {
+        return getScores(getScoreHolder(entry));
+    }
+    private ImmutableSet<Score> getScores(ScoreHolder entry) {
         Preconditions.checkArgument(entry != null, "Entry cannot be null");
 
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
@@ -128,17 +131,18 @@
 
     @Override
     public void resetScores(OfflinePlayer player) {
-        Preconditions.checkArgument(player != null, "OfflinePlayer cannot be null");
-
-        resetScores(player.getName());
+        resetScores(getScoreHolder(player));
     }
 
     @Override
     public void resetScores(String entry) {
+        resetScores(getScoreHolder(entry));
+    }
+    private void resetScores(ScoreHolder entry) {
         Preconditions.checkArgument(entry != null, "Entry cannot be null");
 
         for (net.minecraft.world.scores.Objective objective : this.board.getObjectives()) {
-            board.resetPlayerScore(entry, objective);
+            board.resetSinglePlayerScore(entry, objective);
         }
     }
 
@@ -183,8 +187,8 @@
     @Override
     public ImmutableSet<OfflinePlayer> getPlayers() {
         ImmutableSet.Builder<OfflinePlayer> players = ImmutableSet.builder();
-        for (Object playerName : board.getTrackedPlayers()) {
-            players.add(Bukkit.getOfflinePlayer(playerName.toString()));
+        for (ScoreHolder playerName : board.getTrackedPlayers()) {
+            players.add(Bukkit.getOfflinePlayer(playerName.getScoreboardName()));
         }
         return players.build();
     }
@@ -192,8 +196,8 @@
     @Override
     public ImmutableSet<String> getEntries() {
         ImmutableSet.Builder<String> entries = ImmutableSet.builder();
-        for (Object entry : board.getTrackedPlayers()) {
-            entries.add(entry.toString());
+        for (ScoreHolder entry : board.getTrackedPlayers()) {
+            entries.add(entry.getScoreboardName());
         }
         return entries.build();
     }
@@ -208,4 +212,16 @@
     public Scoreboard getHandle() {
         return board;
     }
-}
\ No newline at end of file
+
+    static ScoreHolder getScoreHolder(String entry) {
+        return () -> entry;
+    }
+    static ScoreHolder getScoreHolder(OfflinePlayer player) {
+        Preconditions.checkArgument(player != null, "OfflinePlayer cannot be null");
+        if (player instanceof CraftPlayer craft) {
+            return craft.getHandle();
+        } else {
+            return getScoreHolder(player.getName());
+        }
+    }
+}
Index: src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java b/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java
--- a/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java	(date 1703956060000)
@@ -2,12 +2,20 @@
 
 import org.bukkit.Keyed;
 import org.bukkit.Material;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
+import org.jetbrains.annotations.ApiStatus;
 
 /**
  * Represents a pattern that may be used in an {@link ArmorTrim}.
+ *
+ * @apiNote Armor trims are part of an experimental feature of Minecraft and
+ * hence subject to change. Constants in this class may be null if a data pack
+ * is not present to enable these features.
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public interface TrimPattern extends Keyed {
 
     /**
@@ -54,24 +62,4 @@
      * {@link Material#SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE}.
      */
     public static final TrimPattern SPIRE = Registry.TRIM_PATTERN.get(NamespacedKey.minecraft("spire"));
-    /**
-     * {@link Material#WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE}.
-     */
-    public static final TrimPattern WAYFINDER = Registry.TRIM_PATTERN.get(NamespacedKey.minecraft("wayfinder"));
-    /**
-     * {@link Material#SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE}.
-     */
-    public static final TrimPattern SHAPER = Registry.TRIM_PATTERN.get(NamespacedKey.minecraft("shaper"));
-    /**
-     * {@link Material#SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE}.
-     */
-    public static final TrimPattern SILENCE = Registry.TRIM_PATTERN.get(NamespacedKey.minecraft("silence"));
-    /**
-     * {@link Material#RAISER_ARMOR_TRIM_SMITHING_TEMPLATE}.
-     */
-    public static final TrimPattern RAISER = Registry.TRIM_PATTERN.get(NamespacedKey.minecraft("raiser"));
-    /**
-     * {@link Material#HOST_ARMOR_TRIM_SMITHING_TEMPLATE}.
-     */
-    public static final TrimPattern HOST = Registry.TRIM_PATTERN.get(NamespacedKey.minecraft("host"));
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboardManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboardManager.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboardManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scoreboard/CraftScoreboardManager.java	(date 1703956060000)
@@ -1,26 +1,25 @@
 package org.bukkit.craftbukkit.v1_20_R3.scoreboard;
 
 import com.google.common.base.Preconditions;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.function.Consumer;
 import net.minecraft.network.protocol.game.ClientboundSetObjectivePacket;
 import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerScoreboard;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.scores.PlayerTeam;
+import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
 import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer;
 import org.bukkit.craftbukkit.v1_20_R3.util.WeakCollection;
-import org.bukkit.entity.Player;
 import org.bukkit.scoreboard.ScoreboardManager;
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.function.Consumer;
-
 public final class CraftScoreboardManager implements ScoreboardManager {
     private final CraftScoreboard mainScoreboard;
     private final MinecraftServer server;
@@ -92,15 +91,15 @@
     }
 
     // CraftBukkit method
-    public void removePlayer(Player player) {
+    public void removePlayer(CraftPlayer  player) {
         playerBoards.remove(player);
     }
 
     // CraftBukkit method
-    public void getScoreboardScores(ObjectiveCriteria criteria, String name, Consumer<net.minecraft.world.scores.Score> consumer) {
+    public void forAllObjectives(ObjectiveCriteria criteria, ScoreHolder holder, Consumer<net.minecraft.world.scores.ScoreAccess> consumer) {
         for (CraftScoreboard scoreboard : scoreboards) {
             Scoreboard board = scoreboard.board;
-            board.forAllObjectives(criteria, name, score -> consumer.accept(score));
+            board.forAllObjectives(criteria, holder, score -> consumer.accept(score));
         }
     }
 }
Index: src/main/java/org/bukkit/inventory/meta/SpawnEggMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/SpawnEggMeta.java b/src/main/java/org/bukkit/inventory/meta/SpawnEggMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/SpawnEggMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/SpawnEggMeta.java	(date 1703956060000)
@@ -1,8 +1,10 @@
 package org.bukkit.inventory.meta;
 
+import org.bukkit.entity.EntitySnapshot;
 import org.bukkit.entity.EntityType;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents a spawn egg and it's spawned type.
@@ -30,6 +32,27 @@
     @Contract("_ -> fail")
     void setSpawnedType(EntityType type);
 
+    /**
+     * Gets the {@link EntitySnapshot} that will be spawned by this spawn egg or null if no entity
+     * has been set. <br>
+     * <p>
+     * All applicable data from the egg will be copied, such as custom name, health,
+     * and velocity. <br>
+     *
+     * @return the entity snapshot or null if no entity has been set
+     */
+    @Nullable
+    EntitySnapshot getSpawnedEntity();
+    /**
+     * Sets the {@link EntitySnapshot} that will be spawned by this spawn egg. <br>
+     * <p>
+     * All applicable data from the entity will be copied, such as custom name,
+     * health, and velocity. <br>
+     *
+     * @param snapshot the snapshot
+     */
+    void setSpawnedEntity(@NotNull EntitySnapshot snapshot);
+
     @NotNull
     @Override
     SpawnEggMeta clone();
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftAsyncTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftAsyncTask.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftAsyncTask.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftAsyncTask.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftAsyncTask.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.scheduler;
 
-import org.bukkit.plugin.Plugin;
-import org.bukkit.scheduler.BukkitWorker;
-
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.Map;
 import java.util.logging.Level;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitWorker;
 
 class CraftAsyncTask extends CraftTask {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftFuture.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftFuture.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftFuture.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftFuture.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftFuture.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.scheduler;
 
-import org.bukkit.plugin.Plugin;
-
 import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
+import org.bukkit.plugin.Plugin;
 
 class CraftFuture<T> extends CraftTask implements Future<T> {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftScheduler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftScheduler.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftScheduler.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftScheduler.java	(date 1703956060000)
@@ -1,17 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.scheduler;
 
-import com.destroystokyo.paper.ServerSchedulerReportingWrapper;
-import com.destroystokyo.paper.event.server.ServerExceptionEvent;
-import com.destroystokyo.paper.exception.ServerSchedulerException;
 import com.google.common.base.Preconditions;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import org.bukkit.plugin.IllegalPluginAccessException;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.scheduler.BukkitRunnable;
-import org.bukkit.scheduler.BukkitScheduler;
-import org.bukkit.scheduler.BukkitTask;
-import org.bukkit.scheduler.BukkitWorker;
-
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.Iterator;
@@ -27,6 +17,13 @@
 import java.util.function.Consumer;
 import java.util.function.IntUnaryOperator;
 import java.util.logging.Level;
+import org.bukkit.plugin.IllegalPluginAccessException;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+import org.bukkit.scheduler.BukkitScheduler;
+import org.bukkit.scheduler.BukkitTask;
+import org.bukkit.scheduler.BukkitWorker;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * The fundamental concepts for this implementation:
@@ -126,7 +123,7 @@
     }
 
     @Override
-    public void runTask(Plugin plugin, Consumer<BukkitTask> task) throws IllegalArgumentException {
+    public void runTask(@NotNull Plugin plugin, @NotNull Consumer<? super BukkitTask> task) throws IllegalArgumentException {
         runTaskLater(plugin, task, 0L);
     }
 
@@ -142,7 +139,7 @@
     }
 
     @Override
-    public void runTaskAsynchronously(Plugin plugin, Consumer<BukkitTask> task) throws IllegalArgumentException {
+    public void runTaskAsynchronously(Plugin plugin, Consumer<? super BukkitTask> task) throws IllegalArgumentException {
         runTaskLaterAsynchronously(plugin, task, 0L);
     }
 
@@ -157,7 +154,7 @@
     }
 
     @Override
-    public void runTaskLater(Plugin plugin, Consumer<BukkitTask> task, long delay) throws IllegalArgumentException {
+    public void runTaskLater(Plugin plugin, Consumer<? super BukkitTask> task, long delay) throws IllegalArgumentException {
         runTaskTimer(plugin, task, delay, CraftTask.NO_REPEATING);
     }
 
@@ -173,12 +170,12 @@
     }
 
     @Override
-    public void runTaskLaterAsynchronously(Plugin plugin, Consumer<BukkitTask> task, long delay) throws IllegalArgumentException {
+    public void runTaskLaterAsynchronously(Plugin plugin, Consumer<? super BukkitTask> task, long delay) throws IllegalArgumentException {
         runTaskTimerAsynchronously(plugin, task, delay, CraftTask.NO_REPEATING);
     }
 
     @Override
-    public void runTaskTimerAsynchronously(Plugin plugin, Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException {
+    public void runTaskTimerAsynchronously(Plugin plugin, Consumer<? super BukkitTask> task, long delay, long period) throws IllegalArgumentException {
         runTaskTimerAsynchronously(plugin, (Object) task, delay, CraftTask.NO_REPEATING);
     }
 
@@ -193,7 +190,7 @@
     }
 
     @Override
-    public void runTaskTimer(Plugin plugin, Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException {
+    public void runTaskTimer(Plugin plugin, Consumer<? super BukkitTask> task, long delay, long period) throws IllegalArgumentException {
         runTaskTimer(plugin, (Object) task, delay, period);
     }
 
@@ -418,24 +415,20 @@
                 try {
                     task.run();
                 } catch (final Throwable throwable) {
-                    String msg = String.format(
-                            "Task #%s for %s generated an exception",
-                            task.getTaskId(),
-                            task.getOwner().getDescription().getFullName());
-
                     task.getOwner().getLogger().log(
                             Level.WARNING,
-                            msg,
+                            String.format(
+                                "Task #%s for %s generated an exception",
+                                task.getTaskId(),
+                                task.getOwner().getDescription().getFullName()),
                             throwable);
-                    org.bukkit.Bukkit.getServer().getPluginManager().callEvent(
-                            new ServerExceptionEvent(new ServerSchedulerException(msg, throwable, task)));
                 } finally {
                     currentTask = null;
                 }
                 parsePending();
             } else {
                 debugTail = debugTail.setNext(new CraftAsyncDebugger(currentTick + RECENT_TICKS, task.getOwner(), task.getTaskClass()));
-                this.executor.execute(new ServerSchedulerReportingWrapper(task)); // Paper
+                executor.execute(task);
                 // We don't need to parse pending
                 // (async tasks must live with race-conditions if they attempt to cancel between these few lines of code)
             }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftTask.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftTask.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/scheduler/CraftTask.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.scheduler;
 
+import java.util.function.Consumer;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
-import java.util.function.Consumer;
-
-public class CraftTask implements BukkitTask, Runnable {
+class CraftTask implements BukkitTask, Runnable {
 
     private volatile CraftTask next = null;
     public static final int ERROR = 0;
@@ -132,10 +131,4 @@
         setPeriod(CraftTask.CANCEL);
         return true;
     }
-
-    // Spigot start
-    public String getTaskName() {
-        return (getTaskClass() == null) ? "Unknown" : getTaskClass().getName();
-    }
-    // Spigot end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftPalette.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftPalette.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftPalette.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftPalette.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftPalette.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.structure;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockStates;
 import org.bukkit.structure.Palette;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class CraftPalette implements Palette {
 
     private final StructureTemplate.Palette palette;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructure.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructure.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructure.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/structure/CraftStructure.java	(date 1703956060000)
@@ -1,6 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.structure;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Random;
+import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.level.block.Blocks;
@@ -24,12 +29,6 @@
 import org.bukkit.structure.Structure;
 import org.bukkit.util.BlockVector;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Random;
-import java.util.stream.Collectors;
-
 public class CraftStructure implements Structure {
 
     private final StructureTemplate structure;
@@ -127,7 +126,7 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return getHandle().bridge$persistentDataContainer();
+        return getHandle().persistentDataContainer;
     }
 
     public StructureTemplate getHandle() {
Index: src/main/java/org/bukkit/inventory/meta/BannerMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/BannerMeta.java b/src/main/java/org/bukkit/inventory/meta/BannerMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/BannerMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/BannerMeta.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
 import org.bukkit.DyeColor;
 import org.bukkit.block.banner.Pattern;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 public interface BannerMeta extends ItemMeta {
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTransformRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTransformRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTransformRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTransformRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTransformRecipe.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -25,6 +25,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTransformRecipe(toNMS(this.getTemplate(), true), toNMS(this.getBase(), true), toNMS(this.getAddition(), true), CraftItemStack.asNMSCopy(result))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTransformRecipe(toNMS(this.getTemplate(), true), toNMS(this.getBase(), true), toNMS(this.getAddition(), true), CraftItemStack.asNMSCopy(result))));
     }
 }
Index: src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java b/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.inventory.meta;
 
+import java.util.Map;
 import org.bukkit.Material;
 import org.bukkit.enchantments.Enchantment;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Map;
-
 /**
  * EnchantmentMeta is specific to items that can <i>store</i> enchantments, as
  * opposed to being enchanted. {@link Material#ENCHANTED_BOOK} is an example
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTrimRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTrimRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTrimRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTrimRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmithingTrimRecipe.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -23,6 +23,6 @@
 
     @Override
     public void addToCraftingManager() {
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTrimRecipe(toNMS(this.getTemplate(), true), toNMS(this.getBase(), true), toNMS(this.getAddition(), true))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTrimRecipe(toNMS(this.getTemplate(), true), toNMS(this.getBase(), true), toNMS(this.getAddition(), true))));
     }
 }
Index: src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java b/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
 import org.bukkit.FireworkEffect;
 import org.bukkit.Material;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Represents a {@link Material#FIREWORK_ROCKET} and its effects.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmokingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmokingRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmokingRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmokingRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftSmokingRecipe.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -27,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmokingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmokingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
     }
 }
Index: src/main/java/org/bukkit/inventory/meta/BundleMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/BundleMeta.java b/src/main/java/org/bukkit/inventory/meta/BundleMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/BundleMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/BundleMeta.java	(date 1703956060000)
@@ -1,11 +1,14 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
+@MinecraftExperimental
+@ApiStatus.Experimental
 public interface BundleMeta extends ItemMeta {
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftStonecuttingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftStonecuttingRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftStonecuttingRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftStonecuttingRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftStonecuttingRecipe.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -26,6 +26,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.StonecutterRecipe(this.getGroup(), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.StonecutterRecipe(this.getGroup(), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result))));
     }
 }
Index: src/main/java/org/bukkit/inventory/meta/PotionMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java	(date 1703956060000)
@@ -1,14 +1,14 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.bukkit.potion.PotionType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Represents a potion or item that can have custom effects.
  */
@@ -29,6 +29,21 @@
     @NotNull
     PotionData getBasePotionData();
 
+    /**
+     * Sets the underlying potion type
+     *
+     * @param type PotionType to set the base potion state to
+     */
+    void setBasePotionType(@NotNull PotionType type);
+
+    /**
+     * Returns the potion type about the base potion
+     *
+     * @return a PotionType object
+     */
+    @NotNull
+    PotionType getBasePotionType();
+
     /**
      * Checks for the presence of custom potion effects.
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/InventoryIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/InventoryIterator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/InventoryIterator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/InventoryIterator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/InventoryIterator.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.ListIterator;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.ListIterator;
-
 public class InventoryIterator implements ListIterator<ItemStack> {
     private final Inventory inventory;
     private int nextIndex;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/RecipeIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/RecipeIterator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/RecipeIterator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/RecipeIterator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/RecipeIterator.java	(date 1703956060000)
@@ -1,20 +1,20 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
+import java.util.Iterator;
+import java.util.Map;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeType;
 import org.bukkit.inventory.Recipe;
 
-import java.util.Iterator;
-import java.util.Map;
-
 public class RecipeIterator implements Iterator<Recipe> {
-    private final Iterator<Map.Entry<RecipeType<?>, Map<ResourceLocation, net.minecraft.world.item.crafting.RecipeHolder<?>>>> recipes;
+    private final Iterator<Map.Entry<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, net.minecraft.world.item.crafting.RecipeHolder<?>>>> recipes;
     private Iterator<net.minecraft.world.item.crafting.RecipeHolder<?>> current;
 
     public RecipeIterator() {
-        this.recipes = BukkitExtraConstants.getServer().getRecipeManager().recipes.entrySet().iterator();
+        this.recipes = MinecraftServer.getServer().getRecipeManager().recipesCB.entrySet().iterator();
     }
 
     @Override
@@ -37,20 +37,18 @@
             current = recipes.next().getValue().values().iterator();
             return next();
         }
-        // Banner start - get more info about recipe
+
         net.minecraft.world.item.crafting.RecipeHolder<?> recipe = current.next();
         try {
-            return  recipe.toBukkitRecipe();
+            return recipe.toBukkitRecipe();
         } catch (Throwable e) {
             throw new RuntimeException("Error converting recipe " + recipe.id(), e);
         }
-        // Banner end
     }
 
     @Override
     public void remove() {
         Preconditions.checkState(current != null, "next() not yet called");
-
         current.remove();
     }
 }
Index: src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java b/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 public interface KnowledgeBookMeta extends ItemMeta {
 
     /**
Index: src/main/java/org/bukkit/inventory/meta/ArmorMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/ArmorMeta.java b/src/main/java/org/bukkit/inventory/meta/ArmorMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/ArmorMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/ArmorMeta.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.inventory.meta;
 
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.inventory.meta.trim.ArmorTrim;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -10,6 +12,8 @@
  * <strong>Note: Armor trims are part of an experimental feature of Minecraft
  * and hence subject to change.</strong>
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public interface ArmorMeta extends ItemMeta {
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSkull.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSkull.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSkull.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSkull.java	(date 1703956060000)
@@ -3,10 +3,14 @@
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.UUID;
+import net.minecraft.Util;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -14,18 +18,12 @@
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.SerializableMeta;
-import org.bukkit.craftbukkit.v1_20_R3.profile.CraftGameProfile;
 import org.bukkit.craftbukkit.v1_20_R3.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.inventory.meta.SkullMeta;
 import org.bukkit.profile.PlayerProfile;
 
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.UUID;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
 
@@ -76,7 +74,7 @@
         if (tag.contains(SKULL_OWNER.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
             this.setProfile(NbtUtils.readGameProfile(tag.getCompound(SKULL_OWNER.NBT)));
         } else if (tag.contains(SKULL_OWNER.NBT, CraftMagicNumbers.NBT.TAG_STRING) && !tag.getString(SKULL_OWNER.NBT).isEmpty()) {
-            this.setProfile(new CraftGameProfile(null, tag.getString(SKULL_OWNER.NBT)));
+            this.setProfile(new GameProfile(Util.NIL_UUID, tag.getString(SKULL_OWNER.NBT)));
         }
 
         if (tag.contains(BLOCK_ENTITY_TAG.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
@@ -100,10 +98,8 @@
 
         if (noteBlockSound == null) {
             Object object = map.get(NOTE_BLOCK_SOUND.BUKKIT);
-            if (object instanceof NamespacedKey) {
-                setNoteBlockSound((NamespacedKey) object);
-            } else {
-                setNoteBlockSound(SerializableMeta.getObject(NamespacedKey.class, map, NOTE_BLOCK_SOUND.BUKKIT, true));
+            if (object != null) {
+                setNoteBlockSound(NamespacedKey.fromString(object.toString()));
             }
         }
     }
@@ -141,15 +137,18 @@
         super.applyToItem(tag);
 
         if (profile != null) {
+            checkForInconsistency();
+
             // SPIGOT-6558: Set initial textures
             tag.put(SKULL_OWNER.NBT, serializedProfile);
             // Fill in textures
-            SkullBlockEntity.fillProfileTextures(profile).thenAccept((optional) -> {
-                optional.ifPresent((filledProfile) -> {
-                    setProfile(filledProfile);
+            PlayerProfile ownerProfile = new CraftPlayerProfile(profile); // getOwnerProfile may return null
+            if (ownerProfile.getTextures().isEmpty()) {
+                ownerProfile.update().thenAccept((filledProfile) -> {
+                    setOwnerProfile(filledProfile);
                     tag.put(SKULL_OWNER.NBT, serializedProfile);
                 });
-            });
+            }
         }
 
         if (noteBlockSound != null) {
@@ -180,7 +179,7 @@
 
     @Override
     public boolean hasOwner() {
-        return profile != null && profile.getName() != null;
+        return profile != null && !profile.getName().isEmpty();
     }
 
     @Override
@@ -191,11 +190,11 @@
     @Override
     public OfflinePlayer getOwningPlayer() {
         if (hasOwner()) {
-            if (profile.getId() != null) {
+            if (!profile.getId().equals(Util.NIL_UUID)) {
                 return Bukkit.getOfflinePlayer(profile.getId());
             }
 
-            if (profile.getName() != null) {
+            if (!profile.getName().isEmpty()) {
                 return Bukkit.getOfflinePlayer(profile.getName());
             }
         }
@@ -212,7 +211,7 @@
         if (name == null) {
             setProfile(null);
         } else {
-            setProfile(new CraftGameProfile(null, name));
+            setProfile(new GameProfile(Util.NIL_UUID, name));
         }
 
         return true;
@@ -225,7 +224,7 @@
         } else if (owner instanceof CraftPlayer) {
             setProfile(((CraftPlayer) owner).getProfile());
         } else {
-            setProfile(new CraftGameProfile(owner.getUniqueId(), owner.getName()));
+            setProfile(new GameProfile(owner.getUniqueId(), owner.getName()));
         }
 
         return true;
@@ -284,6 +283,7 @@
         if (meta instanceof CraftMetaSkull) {
             CraftMetaSkull that = (CraftMetaSkull) meta;
 
+            checkForInconsistency();
             // SPIGOT-5403: equals does not check properties
             return (this.profile != null ? that.profile != null && this.serializedProfile.equals(that.serializedProfile) : that.profile == null) && Objects.equals(this.noteBlockSound, that.noteBlockSound);
         }
@@ -303,8 +303,14 @@
         }
         NamespacedKey namespacedKeyNB = this.getNoteBlockSound();
         if (namespacedKeyNB != null) {
-            return builder.put(NOTE_BLOCK_SOUND.BUKKIT, namespacedKeyNB);
+            return builder.put(NOTE_BLOCK_SOUND.BUKKIT, namespacedKeyNB.toString());
         }
         return builder;
     }
+
+    private void checkForInconsistency() {
+        if (profile != null && serializedProfile == null) {
+            serializedProfile = NbtUtils.writeGameProfile(new CompoundTag(), profile);
+        }
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSpawnEgg.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSpawnEgg.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSpawnEgg.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSpawnEgg.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSpawnEgg.java	(date 1703956060000)
@@ -1,20 +1,22 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
+import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
+import java.util.Map;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntitySnapshot;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLegacy;
+import org.bukkit.entity.EntitySnapshot;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.meta.SpawnEggMeta;
 import org.bukkit.material.MaterialData;
 
-import java.util.Map;
-import java.util.Set;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
 
@@ -24,6 +26,7 @@
             Material.BAT_SPAWN_EGG,
             Material.BEE_SPAWN_EGG,
             Material.BLAZE_SPAWN_EGG,
+            Material.BREEZE_SPAWN_EGG,
             Material.CAT_SPAWN_EGG,
             Material.CAMEL_SPAWN_EGG,
             Material.CAVE_SPIDER_SPAWN_EGG,
@@ -217,6 +220,16 @@
         throw new UnsupportedOperationException("Must change item type to set spawned type");
     }
 
+    @Override
+    public EntitySnapshot getSpawnedEntity() {
+        return CraftEntitySnapshot.create(this.entityTag);
+    }
+    @Override
+    public void setSpawnedEntity(EntitySnapshot snapshot) {
+        Preconditions.checkArgument(snapshot.getEntityType().isSpawnable(), "Entity is not spawnable");
+        this.entityTag = ((CraftEntitySnapshot) snapshot).getData();
+    }
+
     @Override
     boolean equalsCommon(CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
Index: src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Represents a suspicious stew that can have custom effects.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSuspiciousStew.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSuspiciousStew.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSuspiciousStew.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSuspiciousStew.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaSuspiciousStew.java	(date 1703956060000)
@@ -3,6 +3,10 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap.Builder;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import org.bukkit.Material;
@@ -13,11 +17,6 @@
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaSuspiciousStew extends CraftMetaItem implements SuspiciousStewMeta {
 
@@ -66,7 +65,6 @@
 
         for (Object obj : rawEffectList) {
             Preconditions.checkArgument(obj instanceof PotionEffect, "Object (%s) in effect list is not valid", obj.getClass());
-
             addCustomEffect((PotionEffect) obj, true);
         }
     }
@@ -142,7 +140,7 @@
             }
         } else {
             if (customEffects == null) {
-                customEffects = new ArrayList<PotionEffect>();
+                customEffects = new ArrayList<>();
             }
             customEffects.add(effect);
             return true;
Index: src/main/java/org/bukkit/inventory/meta/SkullMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/SkullMeta.java b/src/main/java/org/bukkit/inventory/meta/SkullMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/SkullMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/SkullMeta.java	(date 1703956060000)
@@ -88,6 +88,7 @@
      *
      * @param noteBlockSound the key of the sound to be played, or null
      */
+
     void setNoteBlockSound(@Nullable NamespacedKey noteBlockSound);
 
     /**
@@ -98,6 +99,7 @@
      *
      * @return the key of the sound, or null
      */
+
     @Nullable
     NamespacedKey getNoteBlockSound();
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaTropicalFishBucket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaTropicalFishBucket.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaTropicalFishBucket.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaTropicalFishBucket.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaTropicalFishBucket.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.DyeColor;
@@ -12,8 +13,6 @@
 import org.bukkit.entity.TropicalFish;
 import org.bukkit.inventory.meta.TropicalFishBucketMeta;
 
-import java.util.Map;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishBucketMeta {
     static final ItemMetaKey VARIANT = new ItemMetaKey("BucketVariantTag", "fish-variant");
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftRecipe.java	(date 1703956060000)
@@ -1,17 +1,15 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.google.common.base.Preconditions;
+import com.mohistmc.mohist.bukkit.inventory.MohistSpecialIngredient;
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.world.item.crafting.Ingredient;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.recipe.CookingBookCategory;
 import org.bukkit.inventory.recipe.CraftingBookCategory;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public interface CraftRecipe extends Recipe {
 
     void addToCraftingManager();
@@ -25,38 +23,44 @@
             stack = new Ingredient(((RecipeChoice.MaterialChoice) bukkit).getChoices().stream().map((mat) -> new net.minecraft.world.item.crafting.Ingredient.ItemValue(CraftItemStack.asNMSCopy(new ItemStack(mat)))));
         } else if (bukkit instanceof RecipeChoice.ExactChoice) {
             stack = new Ingredient(((RecipeChoice.ExactChoice) bukkit).getChoices().stream().map((mat) -> new net.minecraft.world.item.crafting.Ingredient.ItemValue(CraftItemStack.asNMSCopy(mat))));
-            stack.banner$setExact(true);
+            stack.exact = true;
+        }else if (bukkit instanceof MohistSpecialIngredient mohistSpecialIngredient) {
+            stack = mohistSpecialIngredient.ingredient();
         } else {
             throw new IllegalArgumentException("Unknown recipe stack instance " + bukkit);
         }
 
         stack.getItems();
-        if (requireNotEmpty) {
-            Preconditions.checkArgument(stack.itemStacks.length != 0, "Recipe requires at least one non-air choice");
-        }
-
-        return stack;
+        if (stack.isVanilla() && requireNotEmpty && stack.getItems().length == 0) {
+            throw new IllegalArgumentException("Recipe requires at least one non-air choice!");
+        } else {
+            return stack;
+        }
     }
 
     public static RecipeChoice toBukkit(Ingredient list) {
         list.getItems();
+        if (!list.isVanilla()) {
+            return new MohistSpecialIngredient(list);
+        }
 
-        if (list.itemStacks.length == 0) {
+        net.minecraft.world.item.ItemStack[] items = list.getItems();
+        if (items.length == 0) {
             return null;
         }
 
-        if (list.bridge$exact()) {
-            List<org.bukkit.inventory.ItemStack> choices = new ArrayList<>(list.itemStacks.length);
-            for (net.minecraft.world.item.ItemStack i : list.itemStacks) {
+        if (list.exact) {
+            List<org.bukkit.inventory.ItemStack> choices = new ArrayList<>(items.length);
+            for (net.minecraft.world.item.ItemStack i : items) {
                 choices.add(CraftItemStack.asBukkitCopy(i));
             }
 
             return new RecipeChoice.ExactChoice(choices);
         } else {
 
-            List<org.bukkit.Material> choices = new ArrayList<>(list.itemStacks.length);
-            for (net.minecraft.world.item.ItemStack i : list.itemStacks) {
-                choices.add(CraftMagicNumbers.getMaterial(i.getItem()));
+            List<org.bukkit.Material> choices = new ArrayList<>(items.length);
+            for (net.minecraft.world.item.ItemStack i : items) {
+                choices.add(CraftItemType.minecraftToBukkit(i.getItem()));
             }
 
             return new RecipeChoice.MaterialChoice(choices);
Index: src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java b/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 public interface CrossbowMeta extends ItemMeta {
 
     /**
Index: src/main/java/org/bukkit/inventory/meta/BookMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.inventory.meta;
 
+import java.util.List;
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Material;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Represents a book ({@link Material#WRITABLE_BOOK} or {@link
  * Material#WRITTEN_BOOK}) that can have a title, an author, and pages.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapedRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapedRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapedRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapedRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapedRecipe.java	(date 1703956060000)
@@ -1,17 +1,18 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.util.Map;
+import java.util.Optional;
 import net.minecraft.core.NonNullList;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.RecipeHolder;
+import net.minecraft.world.item.crafting.ShapedRecipePattern;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.ShapedRecipe;
 
-import java.util.Map;
-
 public class CraftShapedRecipe extends ShapedRecipe implements CraftRecipe {
     // TODO: Could eventually use this to add a matches() method or some such
     private net.minecraft.world.item.crafting.ShapedRecipe recipe;
@@ -58,6 +59,6 @@
             }
         }
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapedRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), width, shape.length, data, CraftItemStack.asNMSCopy(this.getResult()))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapedRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), new ShapedRecipePattern(width, shape.length, data, Optional.empty()), CraftItemStack.asNMSCopy(this.getResult()))));
     }
 }
Index: src/main/java/org/bukkit/inventory/meta/ItemMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java	(date 1703956060000)
@@ -1,6 +1,10 @@
 package org.bukkit.inventory.meta;
 
 import com.google.common.collect.Multimap;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -12,11 +16,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 /**
  * This type represents the storage mechanism for auxiliary item data.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapelessRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapelessRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapelessRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapelessRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftShapelessRecipe.java	(date 1703956060000)
@@ -1,7 +1,8 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.util.List;
 import net.minecraft.core.NonNullList;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -10,8 +11,6 @@
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.ShapelessRecipe;
 
-import java.util.List;
-
 public class CraftShapelessRecipe extends ShapelessRecipe implements CraftRecipe {
     // TODO: Could eventually use this to add a matches() method or some such
     private net.minecraft.world.item.crafting.ShapelessRecipe recipe;
@@ -46,6 +45,6 @@
             data.set(i, toNMS(ingred.get(i), true));
         }
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapelessRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), CraftItemStack.asNMSCopy(this.getResult()), data)));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapelessRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), CraftItemStack.asNMSCopy(this.getResult()), data)));
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEntityTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEntityTag.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEntityTag.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEntityTag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEntityTag.java	(date 1703956060000)
@@ -2,14 +2,13 @@
 
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
+import java.util.Map;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 
-import java.util.Map;
-import java.util.Set;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaEntityTag extends CraftMetaItem {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaFirework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaFirework.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaFirework.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaFirework.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaFirework.java	(date 1703956060000)
@@ -3,6 +3,10 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap.Builder;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import org.bukkit.Color;
@@ -16,11 +20,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.FireworkMeta;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     /*
@@ -199,7 +198,7 @@
 
         List<FireworkEffect> effects = this.effects;
         if (effects == null) {
-            effects = this.effects = new ArrayList<FireworkEffect>();
+            effects = this.effects = new ArrayList<>();
         }
 
         for (Object obj : collection) {
Index: src/main/java/org/bukkit/inventory/ItemFlag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/ItemFlag.java b/src/main/java/org/bukkit/inventory/ItemFlag.java
--- a/src/main/java/org/bukkit/inventory/ItemFlag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/ItemFlag.java	(date 1703956060000)
@@ -31,11 +31,12 @@
      */
     HIDE_POTION_EFFECTS,
     /**
-     * Setting to show/hide dyes from colored leather armor.
+     * Setting to show/hide dyes from colored leather armour
      */
     HIDE_DYE,
     /**
      * Setting to show/hide armor trim from leather armor.
      */
+
     HIDE_ARMOR_TRIM;
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaItem.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaItem.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaItem.java	(date 1703956060000)
@@ -11,13 +11,42 @@
 import com.google.common.collect.Multimap;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import com.mohistmc.mohist.api.ItemAPI;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.NoSuchElementException;
+import java.util.Objects;
+import java.util.Set;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtAccounter;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.world.item.BlockItem;
 import org.apache.commons.lang3.EnumUtils;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.Material;
@@ -29,8 +58,9 @@
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.craftbukkit.v1_20_R3.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.v1_20_R3.Overridden;
+import org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttribute;
 import org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttributeInstance;
-import org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttributeMap;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.ItemMetaKey.Specific;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.tags.DeprecatedCustomTagContainer;
@@ -51,34 +81,6 @@
 import org.bukkit.persistence.PersistentDataContainer;
 import org.spigotmc.ValidateUtils;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collection;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.NoSuchElementException;
-import java.util.Objects;
-import java.util.Set;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 /**
  * Children must include the following:
  *
@@ -291,8 +293,9 @@
     private int version = CraftMagicNumbers.INSTANCE.getDataVersion(); // Internal use only
 
     private static final Set<String> EXTEND_TAGS = ImmutableSet.of(
+            "Name",
             "Items",
-            "instrument",
+            "Schedule",
             "map_is_scaling",
             "map",
             "CustomPotionEffects",
@@ -335,7 +338,7 @@
         this.customModelData = meta.customModelData;
         this.blockData = meta.blockData;
 
-        if (meta.enchantments != null) { // Spigot
+        if (meta.enchantments != null) {
             this.enchantments = new LinkedHashMap<>(meta.enchantments);
         }
 
@@ -356,6 +359,11 @@
         }
 
         this.version = meta.version;
+
+        CompoundTag forgeCaps = meta.getForgeCaps();
+        if (forgeCaps != null) {
+            this.forgeCaps = forgeCaps.copy();
+        }
     }
 
     CraftMetaItem(CompoundTag tag) {
@@ -422,6 +430,16 @@
         }
     }
 
+    private CompoundTag forgeCaps;
+
+    public void setForgeCaps(CompoundTag forgeCaps) {
+        this.forgeCaps = forgeCaps;
+    }
+
+    public CompoundTag getForgeCaps() {
+        return forgeCaps;
+    }
+
     public void offerUnhandledTags(CompoundTag nbt) {
         if (getClass().equals(CraftMetaItem.class)) {
             for (String s : nbt.getAllKeys()) {
@@ -487,7 +505,7 @@
                 continue;
             }
 
-            Attribute attribute = CraftAttributeMap.fromMinecraft(attributeName);
+            Attribute attribute = CraftAttribute.stringToBukkit(attributeName);
             if (attribute == null) {
                 continue;
             }
@@ -533,7 +551,7 @@
             setCustomModelData(customModelData);
         }
 
-        Map blockData = SerializableMeta.getObject(Map.class, map, BLOCK_DATA.BUKKIT, true);
+        Object blockData = SerializableMeta.getObject(Object.class, map, BLOCK_DATA.BUKKIT, true);
         if (blockData != null) {
             this.blockData = (CompoundTag) CraftNBTTagConfigSerializer.deserialize(blockData);
         }
@@ -573,7 +591,7 @@
         if (internal != null) {
             ByteArrayInputStream buf = new ByteArrayInputStream(Base64.getDecoder().decode(internal));
             try {
-                internalTag = NbtIo.readCompressed(buf);
+                internalTag = NbtIo.readCompressed(buf, NbtAccounter.unlimitedHeap());
                 deserializeInternal(internalTag, map);
                 Set<String> keys = internalTag.getAllKeys();
                 for (String key : keys) {
@@ -586,10 +604,14 @@
             }
         }
 
-        Map nbtMap = SerializableMeta.getObject(Map.class, map, BUKKIT_CUSTOM_TAG.BUKKIT, true);
+        Object nbtMap = SerializableMeta.getObject(Object.class, map, BUKKIT_CUSTOM_TAG.BUKKIT, true); // We read both legacy maps and potential modern snbt strings here
         if (nbtMap != null) {
             this.persistentDataContainer.putAll((CompoundTag) CraftNBTTagConfigSerializer.deserialize(nbtMap));
         }
+        if (map.containsKey("forgeCaps")) {
+            Object forgeCaps = map.get("forgeCaps");
+            this.forgeCaps = ItemAPI.deserializeNbt(forgeCaps.toString());
+        }
     }
 
     private boolean forceDeserializeInternalTags(Set<String> handledTags, Object key) {
@@ -730,7 +752,7 @@
     }
 
     static void applyEnchantments(Map<Enchantment, Integer> enchantments, CompoundTag tag, ItemMetaKey key) {
-        if (enchantments == null /*|| enchantments.size() == 0*/) { // Spigot - remove size check
+        if (enchantments == null) {
             return;
         }
 
@@ -798,6 +820,9 @@
 
     @Overridden
     boolean isEmpty() {
+        if (this.getForgeCaps() != null && !this.getForgeCaps().isEmpty()) {
+            return false;
+        }
         return !(hasDisplayName() || hasLocalizedName() || hasEnchants() || (lore != null) || hasCustomModelData() || hasBlockData() || hasRepairCost() || !unhandledTags.isEmpty() || !persistentDataContainer.isEmpty() || hideFlag != 0 || isUnbreakable() || hasDamage() || hasAttributeModifiers());
     }
 
@@ -879,13 +904,12 @@
     @Override
     public boolean removeEnchant(Enchantment ench) {
         Preconditions.checkArgument(ench != null, "Enchantment cannot be null");
-        // Spigot start
-        boolean b = hasEnchants() && enchantments.remove(ench) != null;
-        if (enchantments != null && enchantments.isEmpty()) {
-            this.enchantments = null;
+        boolean enchantmentRemoved = hasEnchants() && enchantments.remove(ench) != null;
+        // If we no longer have any enchantments, then clear enchantment tag
+        if (enchantmentRemoved && enchantments.isEmpty()) {
+            enchantments = null;
         }
-        return b;
-        // Spigot end
+        return enchantmentRemoved;
     }
 
     @Override
@@ -931,8 +955,8 @@
         return (this.hideFlag & bitModifier) == bitModifier;
     }
 
-    private byte getBitModifier(ItemFlag hideFlag) {
-        return (byte) (1 << hideFlag.ordinal());
+    private int getBitModifier(ItemFlag hideFlag) {
+        return 1 << hideFlag.ordinal();
     }
 
     @Override
@@ -977,8 +1001,8 @@
 
     @Override
     public BlockData getBlockData(Material material) {
-        net.minecraft.world.level.block.state.BlockState defaultData = CraftMagicNumbers.getBlock(material).defaultBlockState();
-        return CraftBlockData.fromData((hasBlockData()) ? BukkitExtraConstants.getBlockState(defaultData, blockData) : defaultData);
+        net.minecraft.world.level.block.state.BlockState defaultData = CraftBlockType.bukkitToMinecraft(material).defaultBlockState();
+        return CraftBlockData.fromData((hasBlockData()) ? BlockItem.getBlockState(defaultData, blockData) : defaultData);
     }
 
     @Override
@@ -1192,6 +1216,13 @@
      */
     @Overridden
     boolean equalsCommon(CraftMetaItem that) {
+        CompoundTag forgeCaps = that.getForgeCaps();
+        boolean ret;
+        if (this.getForgeCaps() == null)
+            ret = forgeCaps != null && forgeCaps.size() != 0;
+        else
+            ret = forgeCaps == null ? this.getForgeCaps().size() != 0 : !this.getForgeCaps().equals(forgeCaps);
+        if (ret) return false;
         return ((this.hasDisplayName() ? that.hasDisplayName() && this.displayName.equals(that.displayName) : !that.hasDisplayName()))
                 && (this.hasLocalizedName() ? that.hasLocalizedName() && this.locName.equals(that.locName) : !that.hasLocalizedName())
                 && (this.hasEnchants() ? that.hasEnchants() && this.enchantments.equals(that.enchantments) : !that.hasEnchants())
@@ -1240,6 +1271,7 @@
         hash = 61 * hash + (hasDamage() ? this.damage : 0);
         hash = 61 * hash + (hasAttributeModifiers() ? this.attributeModifiers.hashCode() : 0);
         hash = 61 * hash + version;
+        hash = 61 * hash + (this.forgeCaps != null ? this.forgeCaps.hashCode() : 0);
         return hash;
     }
 
@@ -1266,6 +1298,9 @@
             clone.version = this.version;
             if (this.getUnhandledTags() != null)
                 clone.setUnhandledTags(getUnhandledTags());
+
+            if (this.getForgeCaps() != null)
+                clone.setForgeCaps(this.getForgeCaps().copy());
             return clone;
         } catch (CloneNotSupportedException e) {
             throw new Error(e);
@@ -1343,6 +1378,16 @@
             builder.put(BUKKIT_CUSTOM_TAG.BUKKIT, persistentDataContainer.serialize());
         }
 
+        if (this.forgeCaps != null) {
+            try {
+                ByteArrayOutputStream buf = new ByteArrayOutputStream();
+                NbtIo.writeCompressed(this.forgeCaps, buf);
+                builder.put("forgeCaps", Base64.getEncoder().encodeToString(buf.toByteArray()));
+            } catch (IOException e) {
+                Logger.getLogger(CraftMetaItem.class.getName()).log(Level.SEVERE, null, e);
+            }
+        }
+
         return builder;
     }
 
@@ -1498,4 +1543,4 @@
             return HANDLED_TAGS;
         }
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaKnowledgeBook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaKnowledgeBook.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaKnowledgeBook.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaKnowledgeBook.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaKnowledgeBook.java	(date 1703956060000)
@@ -1,6 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.collect.ImmutableMap.Builder;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
@@ -11,11 +15,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.inventory.meta.KnowledgeBookMeta;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBookMeta {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaLeatherArmor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaLeatherArmor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaLeatherArmor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaLeatherArmor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaLeatherArmor.java	(date 1703956060000)
@@ -2,19 +2,17 @@
 
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
+import java.util.Map;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.IntTag;
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemFactory.DEFAULT_LEATHER_COLOR;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.LeatherArmorMeta;
 
-import java.util.Map;
-import java.util.Set;
-
-import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemFactory.DEFAULT_LEATHER_COLOR;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMap.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMap.java	(date 1703956060000)
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.IntTag;
 import net.minecraft.nbt.StringTag;
@@ -14,8 +15,6 @@
 import org.bukkit.inventory.meta.MapMeta;
 import org.bukkit.map.MapView;
 
-import java.util.Map;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaMap extends CraftMetaItem implements MapMeta {
     static final ItemMetaKey MAP_SCALING = new ItemMetaKey("map_is_scaling", "scaling");
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMusicInstrument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMusicInstrument.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMusicInstrument.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMusicInstrument.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaMusicInstrument.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import org.bukkit.Material;
 import org.bukkit.MusicInstrument;
@@ -9,8 +10,6 @@
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.inventory.meta.MusicInstrumentMeta;
 
-import java.util.Map;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaMusicInstrument extends CraftMetaItem implements MusicInstrumentMeta {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaPotion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaPotion.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaPotion.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaPotion.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaPotion.java	(date 1703956060000)
@@ -4,6 +4,11 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import org.bukkit.Color;
@@ -11,6 +16,7 @@
 import org.bukkit.NamespacedKey;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.SerializableMeta;
+import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionType;
 import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.PotionMeta;
@@ -18,12 +24,7 @@
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import org.jetbrains.annotations.NotNull;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
@@ -47,7 +48,7 @@
 
     // Having an initial "state" in ItemMeta seems bit dirty but the UNCRAFTABLE potion type
     // is treated as the empty form of the meta because it represents an empty potion with no effect
-    private PotionData type = new PotionData(PotionType.UNCRAFTABLE, false, false);
+    private PotionType type = PotionType.UNCRAFTABLE;
     private List<PotionEffect> customEffects;
     private Color color;
 
@@ -66,7 +67,10 @@
     CraftMetaPotion(CompoundTag tag) {
         super(tag);
         if (tag.contains(DEFAULT_POTION.NBT)) {
-            type = CraftPotionUtil.toBukkit(tag.getString(DEFAULT_POTION.NBT));
+            type = CraftPotionType.stringToBukkit(tag.getString(DEFAULT_POTION.NBT));
+            if (type == null) {
+                type = PotionType.UNCRAFTABLE;
+            }
         }
         if (tag.contains(POTION_COLOR.NBT)) {
             try {
@@ -100,7 +104,13 @@
 
     CraftMetaPotion(Map<String, Object> map) {
         super(map);
-        type = CraftPotionUtil.toBukkit(SerializableMeta.getString(map, DEFAULT_POTION.BUKKIT, true));
+        String typeString = SerializableMeta.getString(map, DEFAULT_POTION.BUKKIT, true);
+        if (typeString != null) {
+            type = CraftPotionType.stringToBukkit(typeString);
+        }
+        if (type == null) {
+            type = PotionType.UNCRAFTABLE;
+        }
 
         Color color = SerializableMeta.getObject(Color.class, map, POTION_COLOR.BUKKIT, true);
         if (color != null) {
@@ -114,7 +124,6 @@
 
         for (Object obj : rawEffectList) {
             Preconditions.checkArgument(obj instanceof PotionEffect, "Object (%s) in effect list is not valid", obj.getClass());
-
             addCustomEffect((PotionEffect) obj, true);
         }
     }
@@ -123,7 +132,7 @@
     void applyToItem(CompoundTag tag) {
         super.applyToItem(tag);
 
-        tag.putString(DEFAULT_POTION.NBT, CraftPotionUtil.fromBukkit(type));
+        tag.putString(DEFAULT_POTION.NBT, CraftPotionType.bukkitToString(type));
 
         if (hasColor()) {
             tag.putInt(POTION_COLOR.NBT, color.asRGB());
@@ -152,7 +161,7 @@
     }
 
     boolean isPotionEmpty() {
-        return (type.getType() == PotionType.UNCRAFTABLE) && !(hasCustomEffects() || hasColor());
+        return (type == PotionType.UNCRAFTABLE) && !(hasCustomEffects() || hasColor());
     }
 
     @Override
@@ -173,11 +182,25 @@
     @Override
     public void setBasePotionData(PotionData data) {
         Preconditions.checkArgument(data != null, "PotionData cannot be null");
-        this.type = data;
+        this.type = CraftPotionUtil.fromBukkit(data);
     }
 
     @Override
     public PotionData getBasePotionData() {
+        return CraftPotionUtil.toBukkit(type);
+    }
+
+    @Override
+    public void setBasePotionType(@NotNull PotionType potionType) {
+        // TODO: 10/6/23 Change PotionType.UNCRAFTABLE to PotionType.EMPTY in error message
+        Preconditions.checkArgument(potionType != null, "PotionType cannot be null use PotionType.UNCRAFTABLE to represent no effect instead.");
+
+        type = potionType;
+    }
+
+    @NotNull
+    @Override
+    public PotionType getBasePotionType() {
         return type;
     }
 
@@ -301,7 +324,7 @@
     int applyHash() {
         final int original;
         int hash = original = super.applyHash();
-        if (type.getType() != PotionType.UNCRAFTABLE) {
+        if (type != PotionType.UNCRAFTABLE) {
             hash = 73 * hash + type.hashCode();
         }
         if (hasColor()) {
@@ -336,8 +359,8 @@
     @Override
     Builder<String, Object> serialize(Builder<String, Object> builder) {
         super.serialize(builder);
-        if (type.getType() != PotionType.UNCRAFTABLE) {
-            builder.put(DEFAULT_POTION.BUKKIT, CraftPotionUtil.fromBukkit(type));
+        if (type != PotionType.UNCRAFTABLE) {
+            builder.put(DEFAULT_POTION.BUKKIT, CraftPotionType.bukkitToString(type));
         }
 
         if (hasColor()) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBook.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBook.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBook.java	(date 1703956060000)
@@ -4,6 +4,12 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Lists;
+import java.util.AbstractList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.chat.ComponentSerializer;
 import net.minecraft.nbt.CompoundTag;
@@ -19,13 +25,6 @@
 import org.bukkit.inventory.meta.BookMeta;
 import org.spigotmc.ValidateUtils;
 
-import java.util.AbstractList;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     static final ItemMetaKey BOOK_TITLE = new ItemMetaKey("title");
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBookSigned.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBookSigned.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBookSigned.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBookSigned.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBookSigned.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.collect.ImmutableMap.Builder;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
@@ -8,8 +9,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage;
 import org.bukkit.inventory.meta.BookMeta;
 
-import java.util.Map;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
 
Index: src/main/java/org/bukkit/inventory/MerchantRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/MerchantRecipe.java b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
--- a/src/main/java/org/bukkit/inventory/MerchantRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/MerchantRecipe.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.List;
 import org.bukkit.Material;
 import org.bukkit.entity.Villager;
 import org.bukkit.potion.PotionEffectType;
@@ -8,9 +10,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Represents a merchant's trade.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBundle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBundle.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBundle.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBundle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBundle.java	(date 1703956060000)
@@ -3,6 +3,9 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import org.bukkit.Material;
@@ -11,10 +14,6 @@
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.BundleMeta;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCharge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCharge.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCharge.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCharge.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCharge.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.collect.ImmutableMap.Builder;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import org.bukkit.FireworkEffect;
 import org.bukkit.Material;
@@ -8,8 +9,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.FireworkEffectMeta;
 
-import java.util.Map;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
     static final ItemMetaKey EXPLOSION = new ItemMetaKey("Explosion", "firework-effect");
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaColorableArmor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaColorableArmor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaColorableArmor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaColorableArmor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaColorableArmor.java	(date 1703956060000)
@@ -2,16 +2,14 @@
 
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
+import java.util.Map;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
-import org.bukkit.inventory.meta.ColorableArmorMeta;
-
-import java.util.Map;
-import java.util.Set;
-
 import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemFactory.DEFAULT_LEATHER_COLOR;
+import org.bukkit.inventory.meta.ColorableArmorMeta;
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaColorableArmor extends CraftMetaArmor implements ColorableArmorMeta {
Index: src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java b/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java
--- a/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java	(date 1703956060000)
@@ -1,11 +1,15 @@
 package org.bukkit.inventory;
 
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.block.ChiseledBookshelf;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Nullable;
 
 /**
  * Interface to the inventory of a chiseled bookshelf.
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public interface ChiseledBookshelfInventory extends Inventory {
 
     @Nullable
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCompass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCompass.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCompass.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCompass.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCompass.java	(date 1703956060000)
@@ -2,13 +2,15 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap.Builder;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.serialization.DataResult;
+import java.util.Map;
+import java.util.Optional;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -17,9 +19,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
 import org.bukkit.inventory.meta.CompassMeta;
 
-import java.util.Map;
-import java.util.Optional;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
 
@@ -131,7 +130,7 @@
             return null;
         }
         Optional<ResourceKey<net.minecraft.world.level.Level>> key = net.minecraft.world.level.Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, lodestoneWorld).result();
-        ServerLevel worldServer = key.isPresent() ? BukkitExtraConstants.getServer().getLevel(key.get()) : null;
+        ServerLevel worldServer = key.isPresent() ? MinecraftServer.getServer().getLevel(key.get()) : null;
         World world = worldServer != null ? worldServer.getWorld() : null;
         return new Location(world, lodestoneX, lodestoneY, lodestoneZ); // world may be null here, if the referenced world is not loaded
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCrossbow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCrossbow.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCrossbow.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCrossbow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaCrossbow.java	(date 1703956060000)
@@ -3,6 +3,9 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.item.ArrowItem;
@@ -12,10 +15,6 @@
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.CrossbowMeta;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
 
@@ -137,7 +136,7 @@
     @Override
     public void addChargedProjectile(ItemStack item) {
         Preconditions.checkArgument(item != null, "item");
-        Preconditions.checkArgument(item.getType() == Material.FIREWORK_ROCKET || CraftMagicNumbers.getItem(item.getType()) instanceof ArrowItem, "Item %s is not an arrow or firework rocket", item);
+        Preconditions.checkArgument(item.getType() == Material.FIREWORK_ROCKET || CraftItemType.bukkitToMinecraft(item.getType()) instanceof ArrowItem, "Item %s is not an arrow or firework rocket", item);
 
         if (chargedProjectiles == null) {
             chargedProjectiles = new ArrayList<>();
Index: src/main/java/org/bukkit/inventory/SmithingInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/SmithingInventory.java b/src/main/java/org/bukkit/inventory/SmithingInventory.java
--- a/src/main/java/org/bukkit/inventory/SmithingInventory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/SmithingInventory.java	(date 1703956060000)
@@ -1,10 +1,14 @@
 package org.bukkit.inventory;
 
+import org.bukkit.MinecraftExperimental;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Nullable;
 
 /**
  * Interface to the inventory of a Smithing table.
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public interface SmithingInventory extends Inventory {
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEnchantedBook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEnchantedBook.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEnchantedBook.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEnchantedBook.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaEnchantedBook.java	(date 1703956060000)
@@ -2,6 +2,8 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMap.Builder;
+import java.util.LinkedHashMap;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
@@ -9,9 +11,6 @@
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorageMeta {
     static final ItemMetaKey STORED_ENCHANTMENTS = new ItemMetaKey("StoredEnchantments", "stored-enchants");
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchant.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchant.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchant.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchant.java	(date 1703956060000)
@@ -2,15 +2,14 @@
 
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
+import java.util.Collections;
+import java.util.List;
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.Merchant;
 import org.bukkit.inventory.MerchantRecipe;
 
-import java.util.Collections;
-import java.util.List;
-
 public class CraftMerchant implements Merchant {
 
     protected final net.minecraft.world.item.trading.Merchant merchant;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantCustom.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantCustom.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantCustom.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantCustom.java	(date 1703956060000)
@@ -59,6 +59,22 @@
             return this.trades;
         }
 
+        // Paper start
+        @Override
+        public void processTrade(MerchantOffer merchantRecipe, @javax.annotation.Nullable io.papermc.paper.event.player.PlayerPurchaseEvent event) { // The MerchantRecipe passed in here is the one set by the PlayerPurchaseEvent
+            /** Based on {@link net.minecraft.world.entity.npc.AbstractVillager#processTrade(MerchantOffer, io.papermc.paper.event.player.PlayerPurchaseEvent)} */
+            if (getTradingPlayer() instanceof net.minecraft.server.level.ServerPlayer) {
+                if (event == null || event.willIncreaseTradeUses()) {
+                    merchantRecipe.increaseUses();
+                }
+                if (event == null || event.isRewardingExp()) {
+                    this.tradingPlayer.level().addFreshEntity(new net.minecraft.world.entity.ExperienceOrb(this.tradingPlayer.level(), this.tradingPlayer.getX(), this.tradingPlayer.getY(), this.tradingPlayer.getZ(), merchantRecipe.getXp(), org.bukkit.entity.ExperienceOrb.SpawnReason.VILLAGER_TRADE, this.tradingPlayer, null));
+                }
+            }
+            this.notifyTrade(merchantRecipe);
+        }
+        // Paper end
+
         @Override
         public void notifyTrade(MerchantOffer merchantrecipe) {
             // increase recipe's uses
@@ -66,7 +82,7 @@
         }
 
         @Override
-        public void notifyTradeUpdated(ItemStack p_45308_) {
+        public void notifyTradeUpdated(ItemStack itemstack) {
 
         }
 
Index: src/main/java/org/bukkit/inventory/RecipeChoice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java	(date 1703956060000)
@@ -1,16 +1,15 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import org.bukkit.Material;
-import org.bukkit.Tag;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Predicate;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a potential item match within a recipe. All choices within a
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMerchantRecipe.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.List;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.MerchantRecipe;
 
-import java.util.List;
-
 public class CraftMerchantRecipe extends MerchantRecipe {
 
-    private net.minecraft.world.item.trading.MerchantOffer handle;
+    private final net.minecraft.world.item.trading.MerchantOffer handle;
 
     public CraftMerchantRecipe(net.minecraft.world.item.trading.MerchantOffer merchantRecipe) {
         super(CraftItemStack.asBukkitCopy(merchantRecipe.result), 0);
@@ -24,7 +23,6 @@
 
     public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, int demand, int specialPrice) {
         super(result, uses, maxUses, experienceReward, experience, priceMultiplier, demand, specialPrice);
-        /**
         this.handle = new net.minecraft.world.item.trading.MerchantOffer(
                 net.minecraft.world.item.ItemStack.EMPTY,
                 net.minecraft.world.item.ItemStack.EMPTY,
@@ -35,7 +33,7 @@
                 priceMultiplier,
                 demand,
                 this
-        );*/
+        );
         this.setSpecialPrice(specialPrice);
         this.setExperienceReward(experienceReward);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmor.java	(date 1703956060000)
@@ -2,6 +2,10 @@
 
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -12,11 +16,6 @@
 import org.bukkit.inventory.meta.trim.TrimMaterial;
 import org.bukkit.inventory.meta.trim.TrimPattern;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaArmor extends CraftMetaItem implements ArmorMeta {
 
Index: src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
--- a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.Collections;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collections;
-
 /**
  * Represents a Stonecutting recipe.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmorStand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmorStand.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmorStand.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmorStand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaArmorStand.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.collect.ImmutableMap.Builder;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 
-import java.util.Map;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaArmorStand extends CraftMetaItem {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaAxolotlBucket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaAxolotlBucket.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaAxolotlBucket.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaAxolotlBucket.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaAxolotlBucket.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 import net.minecraft.nbt.CompoundTag;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
@@ -8,8 +9,6 @@
 import org.bukkit.entity.Axolotl;
 import org.bukkit.inventory.meta.AxolotlBucketMeta;
 
-import java.util.Map;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBucketMeta {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBanner.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBanner.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBanner.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBanner.java	(date 1703956060000)
@@ -4,6 +4,10 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Sets;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import org.bukkit.DyeColor;
@@ -14,11 +18,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BannerMeta;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
Index: src/main/java/org/bukkit/inventory/ItemFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java
--- a/src/main/java/org/bukkit/inventory/ItemFactory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/ItemFactory.java	(date 1703956060000)
@@ -3,7 +3,9 @@
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.Server;
+import org.bukkit.World;
 import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.inventory.meta.ItemMeta;
@@ -161,7 +163,6 @@
     @NotNull
     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;
 
-
     /**
      * Gets a {@link Material} representing the spawn egg for the provided
      * {@link EntityType}. <br>
@@ -172,4 +173,45 @@
      */
     @Nullable
     Material getSpawnEgg(@NotNull EntityType type);
+
+    /**
+     * Enchants the given item at the provided level.
+     * <br>
+     * If an item that is air is passed through an error is thrown.
+     *
+     * @param entity the entity to use as a source of randomness
+     * @param item the item to enchant
+     * @param level the level to use, which is the level in the enchantment table
+     * @param allowTreasures allows treasure enchants, e.g. mending, if true.
+     * @return the modified ItemStack, or a copy if the ItemStack cannot be enchanted directly
+     */
+    @NotNull
+    ItemStack enchantItem(@NotNull final Entity entity, @NotNull final ItemStack item, final int level, final boolean allowTreasures);
+    /**
+     * Enchants the given item at the provided level.
+     * <br>
+     * If an item that is air is passed through an error is thrown.
+     *
+     * @param world the world to use as a source of randomness
+     * @param item the item to enchant
+     * @param level the level to use, which is the level in the enchantment table
+     * @param allowTreasures allow the treasure enchants, e.g. mending, if true.
+     * @return the modified ItemStack, or a copy if the ItemStack cannot be
+     * enchanted directly
+     */
+    @NotNull
+    ItemStack enchantItem(@NotNull final World world, @NotNull final ItemStack item, final int level, final boolean allowTreasures);
+    /**
+     * Enchants the given item at the provided level.
+     * <br>
+     * If an item that is air is passed through an error is thrown.
+     *
+     * @param item the item to enchant
+     * @param level the level to use, which is the level in the enchantment table
+     * @param allowTreasures allow treasure enchantments, e.g. mending, if true.
+     * @return the modified ItemStack, or a copy if the ItemStack cannot be
+     * enchanted directly
+     */
+    @NotNull
+    ItemStack enchantItem(@NotNull final ItemStack item, final int level, final boolean allowTreasures);
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBlockState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBlockState.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBlockState.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBlockState.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftMetaBlockState.java	(date 1703956060000)
@@ -4,6 +4,8 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Sets;
+import java.util.Map;
+import java.util.Set;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.Material;
@@ -14,9 +16,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BlockStateMeta;
 
-import java.util.Map;
-import java.util.Set;
-
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta {
 
@@ -274,6 +273,7 @@
     @Override
     public void setBlockState(org.bukkit.block.BlockState blockState) {
         Preconditions.checkArgument(blockState != null, "blockState must not be null");
+
         Material stateMaterial = (material != Material.SHIELD) ? material : shieldToBannerHack(blockEntityTag);
         Class<?> blockStateType = CraftBlockStates.getBlockStateType(stateMaterial);
         Preconditions.checkArgument(blockStateType == blockState.getClass() && blockState instanceof CraftBlockEntityState, "Invalid blockState for " + material);
Index: src/main/java/org/bukkit/inventory/ShapedRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Represents a shaped (ie normal) crafting recipe.
  */
@@ -218,4 +217,4 @@
     public String[] getShape() {
         return rows.clone();
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryPlayer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryPlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryPlayer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryPlayer.java	(date 1703956060000)
@@ -4,7 +4,6 @@
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.world.entity.player.Inventory;
 import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.EntityEquipment;
@@ -174,7 +173,7 @@
 
     @Override
     public void setHeldItemSlot(int slot) {
-        Preconditions.checkArgument(slot >= 0 && slot < Inventory.getSelectionSize(), "Slot (%s) is not between 0 and %s inclusive", slot, Inventory.getSelectionSize() - 1);
+        Preconditions.checkArgument(slot >= 0 && slot < net.minecraft.world.entity.player.Inventory.getSelectionSize(), "Slot (%s) is not between 0 and %s inclusive", slot, net.minecraft.world.entity.player.Inventory.getSelectionSize() - 1);
         this.getInventory().selected = slot;
         ((CraftPlayer) this.getHolder()).getHandle().connection.send(new ClientboundSetCarriedItemPacket(slot));
     }
@@ -248,7 +247,7 @@
         if (items == null) {
             items = new ItemStack[length];
         }
-        Preconditions.checkArgument(items.length <= length, "items.length must be < %s", length);
+        Preconditions.checkArgument(items.length <= length, "items.length must be <= %s", length);
 
         for (int i = 0; i < length; i++) {
             if (i >= items.length) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventorySmithing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventorySmithing.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventorySmithing.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventorySmithing.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventorySmithing.java	(date 1703956060000)
@@ -2,6 +2,7 @@
 
 import net.minecraft.world.Container;
 import net.minecraft.world.inventory.ResultContainer;
+import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.Location;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
@@ -38,7 +39,7 @@
 
     @Override
     public Recipe getRecipe() {
-        net.minecraft.world.item.crafting.RecipeHolder recipe = getResultInventory().getRecipeUsed();
+        RecipeHolder<?> recipe = getResultInventory().getRecipeUsed();
         return (recipe == null) ? null : recipe.toBukkitRecipe();
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryView.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryView.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryView.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryView.java	(date 1703956060000)
@@ -1,7 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitContainer;
+import com.mohistmc.mohist.bukkit.inventory.MohistModsInventory;
 import net.minecraft.network.protocol.game.ClientboundOpenScreenPacket;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.inventory.AbstractContainerMenu;
@@ -30,11 +30,9 @@
         this.container = container;
         this.originalTitle = CraftChatMessage.fromComponent(container.getTitle());
         this.title = originalTitle;
-        // Banner - fix NPE
         if (container.slots.size() > this.countSlots()) {
-            this.viewing = BukkitContainer.createInv(((CraftHumanEntity) player).getHandle(), container);
+            this.viewing = new CraftInventory(new MohistModsInventory(container, ((CraftHumanEntity) player).getHandle()));
         }
-        // Banner - end
     }
 
     @Override
@@ -95,11 +93,18 @@
         this.title = title;
     }
 
+    public boolean isInTop(int rawSlot) {
+        return rawSlot < viewing.getSize();
+    }
+
+    public AbstractContainerMenu getHandle() {
+        return container;
+    }
+
     public static void sendInventoryTitleChange(InventoryView view, String title) {
         Preconditions.checkArgument(view != null, "InventoryView cannot be null");
         Preconditions.checkArgument(title != null, "Title cannot be null");
         Preconditions.checkArgument(view.getPlayer() instanceof Player, "NPCs are not currently supported for this function");
-        Preconditions.checkArgument(view.getTopInventory().getType().isCreatable(), "Only creatable inventories can have their title changed");
 
         final ServerPlayer entityPlayer = (ServerPlayer) ((CraftHumanEntity) view.getPlayer()).getHandle();
         final int containerId = entityPlayer.containerMenu.containerId;
@@ -107,12 +112,4 @@
         entityPlayer.connection.send(new ClientboundOpenScreenPacket(containerId, windowType, CraftChatMessage.fromString(title)[0]));
         ((Player) view.getPlayer()).updateInventory();
     }
-
-    public boolean isInTop(int rawSlot) {
-        return rawSlot < viewing.getSize();
-    }
-
-    public AbstractContainerMenu getHandle() {
-        return container;
-    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemFactory.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemFactory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemFactory.java	(date 1703956060000)
@@ -6,14 +6,19 @@
 import net.minecraft.commands.arguments.item.ItemParser;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.util.RandomSource;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.SpawnEggItem;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import org.bukkit.Color;
 import org.bukkit.Material;
+import org.bukkit.World;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
+import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntity;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntityType;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLegacy;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
@@ -22,6 +27,7 @@
 public final class CraftItemFactory implements ItemFactory {
     static final Color DEFAULT_LEATHER_COLOR = Color.fromRGB(0xA06540);
     private static final CraftItemFactory instance;
+    private static final RandomSource randomSource = RandomSource.create();
 
     static {
         instance = new CraftItemFactory();
@@ -159,6 +165,7 @@
         case BAT_SPAWN_EGG:
         case BEE_SPAWN_EGG:
         case BLAZE_SPAWN_EGG:
+        case BREEZE_SPAWN_EGG:
         case CAT_SPAWN_EGG:
         case CAMEL_SPAWN_EGG:
         case CAVE_SPIDER_SPAWN_EGG:
@@ -334,6 +341,8 @@
         case DECORATED_POT:
         case SUSPICIOUS_SAND:
         case SUSPICIOUS_GRAVEL:
+        case CRAFTER:
+        case TRIAL_SPAWNER:
             return new CraftMetaBlockState(meta, material);
         case TROPICAL_FISH_BUCKET:
             return meta instanceof CraftMetaTropicalFishBucket ? meta : new CraftMetaTropicalFishBucket(meta);
@@ -407,9 +416,6 @@
     public ItemMeta asMetaFor(ItemMeta meta, Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(meta instanceof CraftMetaItem, "ItemMeta of %s not created by %s", (meta != null ? meta.getClass().toString() : "null"), CraftItemFactory.class.getName());
-        if (!(meta instanceof CraftMetaItem)) {
-            throw new IllegalArgumentException("Meta of " + (meta != null ? meta.getClass().toString() : "null") + " not created by " + CraftItemFactory.class.getName());
-        }
         return getItemMeta(material, (CraftMetaItem) meta);
     }
 
@@ -442,19 +448,43 @@
         return ((CraftMetaItem) meta).updateMaterial(material);
     }
 
-
     @Override
     public Material getSpawnEgg(EntityType type) {
         if (type == EntityType.UNKNOWN) {
             return null;
         }
-        net.minecraft.world.entity.EntityType<?> nmsType = BuiltInRegistries.ENTITY_TYPE.get(CraftNamespacedKey.toMinecraft(type.getKey()));
+        net.minecraft.world.entity.EntityType<?> nmsType = CraftEntityType.bukkitToMinecraft(type);
         Item nmsItem = SpawnEggItem.byId(nmsType);
 
         if (nmsItem == null) {
             return null;
         }
 
-        return CraftMagicNumbers.getMaterial(nmsItem);
+        return CraftItemType.minecraftToBukkit(nmsItem);
+    }
+
+    @Override
+    public ItemStack enchantItem(Entity entity, ItemStack itemStack, int level, boolean allowTreasures) {
+        Preconditions.checkArgument(entity != null, "The entity must not be null");
+        return enchantItem(((CraftEntity) entity).getHandle().random, itemStack, level, allowTreasures);
+    }
+    @Override
+    public ItemStack enchantItem(final World world, final ItemStack itemStack, final int level, final boolean allowTreasures) {
+        Preconditions.checkArgument(world != null, "The world must not be null");
+        return enchantItem(((CraftWorld) world).getHandle().random, itemStack, level, allowTreasures);
+    }
+    @Override
+    public ItemStack enchantItem(final ItemStack itemStack, final int level, final boolean allowTreasures) {
+        return enchantItem(randomSource, itemStack, level, allowTreasures);
+    }
+    private static ItemStack enchantItem(RandomSource source, ItemStack itemStack, int level, boolean allowTreasures) {
+        Preconditions.checkArgument(itemStack != null, "ItemStack must not be null");
+        Preconditions.checkArgument(!itemStack.getType().isAir(), "ItemStack must not be air");
+        if (!(itemStack instanceof CraftItemStack)) {
+            itemStack = CraftItemStack.asCraftCopy(itemStack);
+        }
+        CraftItemStack craft = (CraftItemStack) itemStack;
+        EnchantmentHelper.enchantItem(source, craft.handle, level, allowTreasures);
+        return craft;
     }
 }
Index: src/main/java/org/bukkit/inventory/ItemStack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
--- a/src/main/java/org/bukkit/inventory/ItemStack.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java	(date 1703956060000)
@@ -2,6 +2,8 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.LinkedHashMap;
+import java.util.Map;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Translatable;
@@ -14,9 +16,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-
 /**
  * Represents a stack of items.
  * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemStack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemStack.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemStack.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftItemStack.java	(date 1703956060000)
@@ -2,15 +2,19 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import java.util.Objects;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
-import org.apache.commons.lang3.Validate;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.v1_20_R3.enchantments.CraftEnchantment;
+import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.ENCHANTMENTS;
+import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.ENCHANTMENTS_ID;
+import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.ENCHANTMENTS_LVL;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLegacy;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -19,12 +23,6 @@
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.material.MaterialData;
 
-import java.util.Map;
-
-import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.ENCHANTMENTS;
-import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.ENCHANTMENTS_ID;
-import static org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaItem.ENCHANTMENTS_LVL;
-
 @DelegateDeserialization(ItemStack.class)
 public final class CraftItemStack extends ItemStack {
 
@@ -63,7 +61,7 @@
         if (original.isEmpty()) {
             return new ItemStack(Material.AIR);
         }
-        ItemStack stack = new ItemStack(CraftMagicNumbers.getMaterial(original.getItem()), original.getCount());
+        ItemStack stack = new ItemStack(CraftItemType.minecraftToBukkit(original.getItem()), original.getCount());
         if (hasItemMeta(original)) {
             stack.setItemMeta(getItemMeta(original));
         }
@@ -75,8 +73,7 @@
     }
 
     public static CraftItemStack asCraftCopy(ItemStack original) {
-        if (original instanceof CraftItemStack) {
-            CraftItemStack stack = (CraftItemStack) original;
+        if (original instanceof CraftItemStack stack) {
             return new CraftItemStack(stack.handle == null ? null : stack.handle.copy());
         }
         return new CraftItemStack(original);
@@ -87,10 +84,10 @@
     }
 
     public static CraftItemStack asNewCraftStack(Item item, int amount) {
-        return new CraftItemStack(CraftMagicNumbers.getMaterial(item), amount, (short) 0, null);
+        return new CraftItemStack(CraftItemType.minecraftToBukkit(item), amount, (short) 0, null);
     }
 
-    public net.minecraft.world.item.ItemStack handle;
+    public net.minecraft.world.item.ItemStack handle; // Paper add public
 
     /**
      * Mirror
@@ -117,7 +114,7 @@
 
     @Override
     public Material getType() {
-        return handle != null ? CraftMagicNumbers.getMaterial(handle.getItem()) : Material.AIR;
+        return handle != null ? CraftItemType.minecraftToBukkit(handle.getItem()) : Material.AIR;
     }
 
     @Override
@@ -126,12 +123,12 @@
             return;
         } else if (type == Material.AIR) {
             handle = null;
-        } else if (CraftMagicNumbers.getItem(type) == null) { // :(
+        } else if (CraftItemType.bukkitToMinecraft(type) == null) { // :(
             handle = null;
         } else if (handle == null) {
-            handle = new net.minecraft.world.item.ItemStack(CraftMagicNumbers.getItem(type), 1);
+            handle = new net.minecraft.world.item.ItemStack(CraftItemType.bukkitToMinecraft(type), 1);
         } else {
-            handle.setItem(CraftMagicNumbers.getItem(type));
+            handle.setItem(CraftItemType.bukkitToMinecraft(type));
             if (hasItemMeta()) {
                 // This will create the appropriate item meta, which will contain all the data we intend to keep
                 setItemMeta(handle, getItemMeta(handle));
@@ -230,12 +227,12 @@
         if (handle == null) {
             return 0;
         }
-        return EnchantmentHelper.getItemEnchantmentLevel(CraftEnchantment.getRaw(ench), handle);
+        return EnchantmentHelper.getItemEnchantmentLevel(CraftEnchantment.bukkitToMinecraft(ench), handle);
     }
 
     @Override
     public int removeEnchantment(Enchantment ench) {
-        Validate.notNull(ench, "Cannot remove null enchantment");
+        Preconditions.checkArgument(ench != null, "Enchantment cannot be null");
 
         ListTag list = getEnchantmentList(handle), listCopy;
         if (list == null) {
@@ -324,9 +321,15 @@
     }
 
     public static ItemMeta getItemMeta(net.minecraft.world.item.ItemStack item) {
+
         if (item == null || item == net.minecraft.world.item.ItemStack.EMPTY)
             return null;
 
+        if (item.getTag() == null) {
+            ItemMeta meta = CraftItemFactory.instance().getItemMeta(getType(item));
+            ((CraftMetaItem) meta).setForgeCaps(item.getForgeCaps());
+            return meta;
+        }
         CraftMetaItem meta = switch (getType(item)) {
             case WRITTEN_BOOK -> new CraftMetaBookSigned(item.getTag());
             case WRITABLE_BOOK -> new CraftMetaBook(item.getTag());
@@ -344,12 +347,12 @@
             case ENCHANTED_BOOK -> new CraftMetaEnchantedBook(item.getTag());
             case BLACK_BANNER, BLACK_WALL_BANNER, BLUE_BANNER, BLUE_WALL_BANNER, BROWN_BANNER, BROWN_WALL_BANNER, CYAN_BANNER, CYAN_WALL_BANNER, GRAY_BANNER, GRAY_WALL_BANNER, GREEN_BANNER, GREEN_WALL_BANNER, LIGHT_BLUE_BANNER, LIGHT_BLUE_WALL_BANNER, LIGHT_GRAY_BANNER, LIGHT_GRAY_WALL_BANNER, LIME_BANNER, LIME_WALL_BANNER, MAGENTA_BANNER, MAGENTA_WALL_BANNER, ORANGE_BANNER, ORANGE_WALL_BANNER, PINK_BANNER, PINK_WALL_BANNER, PURPLE_BANNER, PURPLE_WALL_BANNER, RED_BANNER, RED_WALL_BANNER, WHITE_BANNER, WHITE_WALL_BANNER, YELLOW_BANNER, YELLOW_WALL_BANNER ->
                     new CraftMetaBanner(item.getTag());
-            case ALLAY_SPAWN_EGG, AXOLOTL_SPAWN_EGG, BAT_SPAWN_EGG, BEE_SPAWN_EGG, BLAZE_SPAWN_EGG, CAT_SPAWN_EGG, CAMEL_SPAWN_EGG, CAVE_SPIDER_SPAWN_EGG, CHICKEN_SPAWN_EGG, COD_SPAWN_EGG, COW_SPAWN_EGG, CREEPER_SPAWN_EGG, DOLPHIN_SPAWN_EGG, DONKEY_SPAWN_EGG, DROWNED_SPAWN_EGG, ELDER_GUARDIAN_SPAWN_EGG, ENDER_DRAGON_SPAWN_EGG, ENDERMAN_SPAWN_EGG, ENDERMITE_SPAWN_EGG, EVOKER_SPAWN_EGG, FOX_SPAWN_EGG, FROG_SPAWN_EGG, GHAST_SPAWN_EGG, GLOW_SQUID_SPAWN_EGG, GOAT_SPAWN_EGG, GUARDIAN_SPAWN_EGG, HOGLIN_SPAWN_EGG, HORSE_SPAWN_EGG, HUSK_SPAWN_EGG, IRON_GOLEM_SPAWN_EGG, LLAMA_SPAWN_EGG, MAGMA_CUBE_SPAWN_EGG, MOOSHROOM_SPAWN_EGG, MULE_SPAWN_EGG, OCELOT_SPAWN_EGG, PANDA_SPAWN_EGG, PARROT_SPAWN_EGG, PHANTOM_SPAWN_EGG, PIGLIN_BRUTE_SPAWN_EGG, PIGLIN_SPAWN_EGG, PIG_SPAWN_EGG, PILLAGER_SPAWN_EGG, POLAR_BEAR_SPAWN_EGG, PUFFERFISH_SPAWN_EGG, RABBIT_SPAWN_EGG, RAVAGER_SPAWN_EGG, SALMON_SPAWN_EGG, SHEEP_SPAWN_EGG, SHULKER_SPAWN_EGG, SILVERFISH_SPAWN_EGG, SKELETON_HORSE_SPAWN_EGG, SKELETON_SPAWN_EGG, SLIME_SPAWN_EGG, SNIFFER_SPAWN_EGG, SNOW_GOLEM_SPAWN_EGG, SPIDER_SPAWN_EGG, SQUID_SPAWN_EGG, STRAY_SPAWN_EGG, STRIDER_SPAWN_EGG, TADPOLE_SPAWN_EGG, TRADER_LLAMA_SPAWN_EGG, TROPICAL_FISH_SPAWN_EGG, TURTLE_SPAWN_EGG, VEX_SPAWN_EGG, VILLAGER_SPAWN_EGG, VINDICATOR_SPAWN_EGG, WANDERING_TRADER_SPAWN_EGG, WARDEN_SPAWN_EGG, WITCH_SPAWN_EGG, WITHER_SKELETON_SPAWN_EGG, WITHER_SPAWN_EGG, WOLF_SPAWN_EGG, ZOGLIN_SPAWN_EGG, ZOMBIE_HORSE_SPAWN_EGG, ZOMBIE_SPAWN_EGG, ZOMBIE_VILLAGER_SPAWN_EGG, ZOMBIFIED_PIGLIN_SPAWN_EGG ->
+            case ALLAY_SPAWN_EGG, AXOLOTL_SPAWN_EGG, BAT_SPAWN_EGG, BEE_SPAWN_EGG, BLAZE_SPAWN_EGG, BREEZE_SPAWN_EGG, CAT_SPAWN_EGG, CAMEL_SPAWN_EGG, CAVE_SPIDER_SPAWN_EGG, CHICKEN_SPAWN_EGG, COD_SPAWN_EGG, COW_SPAWN_EGG, CREEPER_SPAWN_EGG, DOLPHIN_SPAWN_EGG, DONKEY_SPAWN_EGG, DROWNED_SPAWN_EGG, ELDER_GUARDIAN_SPAWN_EGG, ENDER_DRAGON_SPAWN_EGG, ENDERMAN_SPAWN_EGG, ENDERMITE_SPAWN_EGG, EVOKER_SPAWN_EGG, FOX_SPAWN_EGG, FROG_SPAWN_EGG, GHAST_SPAWN_EGG, GLOW_SQUID_SPAWN_EGG, GOAT_SPAWN_EGG, GUARDIAN_SPAWN_EGG, HOGLIN_SPAWN_EGG, HORSE_SPAWN_EGG, HUSK_SPAWN_EGG, IRON_GOLEM_SPAWN_EGG, LLAMA_SPAWN_EGG, MAGMA_CUBE_SPAWN_EGG, MOOSHROOM_SPAWN_EGG, MULE_SPAWN_EGG, OCELOT_SPAWN_EGG, PANDA_SPAWN_EGG, PARROT_SPAWN_EGG, PHANTOM_SPAWN_EGG, PIGLIN_BRUTE_SPAWN_EGG, PIGLIN_SPAWN_EGG, PIG_SPAWN_EGG, PILLAGER_SPAWN_EGG, POLAR_BEAR_SPAWN_EGG, PUFFERFISH_SPAWN_EGG, RABBIT_SPAWN_EGG, RAVAGER_SPAWN_EGG, SALMON_SPAWN_EGG, SHEEP_SPAWN_EGG, SHULKER_SPAWN_EGG, SILVERFISH_SPAWN_EGG, SKELETON_HORSE_SPAWN_EGG, SKELETON_SPAWN_EGG, SLIME_SPAWN_EGG, SNIFFER_SPAWN_EGG, SNOW_GOLEM_SPAWN_EGG, SPIDER_SPAWN_EGG, SQUID_SPAWN_EGG, STRAY_SPAWN_EGG, STRIDER_SPAWN_EGG, TADPOLE_SPAWN_EGG, TRADER_LLAMA_SPAWN_EGG, TROPICAL_FISH_SPAWN_EGG, TURTLE_SPAWN_EGG, VEX_SPAWN_EGG, VILLAGER_SPAWN_EGG, VINDICATOR_SPAWN_EGG, WANDERING_TRADER_SPAWN_EGG, WARDEN_SPAWN_EGG, WITCH_SPAWN_EGG, WITHER_SKELETON_SPAWN_EGG, WITHER_SPAWN_EGG, WOLF_SPAWN_EGG, ZOGLIN_SPAWN_EGG, ZOMBIE_HORSE_SPAWN_EGG, ZOMBIE_SPAWN_EGG, ZOMBIE_VILLAGER_SPAWN_EGG, ZOMBIFIED_PIGLIN_SPAWN_EGG ->
                     new CraftMetaSpawnEgg(item.getTag());
             case ARMOR_STAND -> new CraftMetaArmorStand(item.getTag());
             case KNOWLEDGE_BOOK -> new CraftMetaKnowledgeBook(item.getTag());
-            case FURNACE, CHEST, TRAPPED_CHEST, JUKEBOX, DISPENSER, DROPPER, ACACIA_HANGING_SIGN, ACACIA_SIGN, ACACIA_WALL_HANGING_SIGN, ACACIA_WALL_SIGN, BAMBOO_HANGING_SIGN, BAMBOO_SIGN, BAMBOO_WALL_HANGING_SIGN, BAMBOO_WALL_SIGN, BIRCH_HANGING_SIGN, BIRCH_SIGN, BIRCH_WALL_HANGING_SIGN, BIRCH_WALL_SIGN, CHERRY_HANGING_SIGN, CHERRY_SIGN, CHERRY_WALL_HANGING_SIGN, CHERRY_WALL_SIGN, CRIMSON_HANGING_SIGN, CRIMSON_SIGN, CRIMSON_WALL_HANGING_SIGN, CRIMSON_WALL_SIGN, DARK_OAK_HANGING_SIGN, DARK_OAK_SIGN, DARK_OAK_WALL_HANGING_SIGN, DARK_OAK_WALL_SIGN, JUNGLE_HANGING_SIGN, JUNGLE_SIGN, JUNGLE_WALL_HANGING_SIGN, JUNGLE_WALL_SIGN, MANGROVE_HANGING_SIGN, MANGROVE_SIGN, MANGROVE_WALL_HANGING_SIGN, MANGROVE_WALL_SIGN, OAK_HANGING_SIGN, OAK_SIGN, OAK_WALL_HANGING_SIGN, OAK_WALL_SIGN, SPRUCE_HANGING_SIGN, SPRUCE_SIGN, SPRUCE_WALL_HANGING_SIGN, SPRUCE_WALL_SIGN, WARPED_HANGING_SIGN, WARPED_SIGN, WARPED_WALL_HANGING_SIGN, WARPED_WALL_SIGN, SPAWNER, BREWING_STAND, ENCHANTING_TABLE, COMMAND_BLOCK, REPEATING_COMMAND_BLOCK, CHAIN_COMMAND_BLOCK, BEACON, DAYLIGHT_DETECTOR, HOPPER, COMPARATOR, SHIELD, STRUCTURE_BLOCK, SHULKER_BOX, WHITE_SHULKER_BOX, ORANGE_SHULKER_BOX, MAGENTA_SHULKER_BOX, LIGHT_BLUE_SHULKER_BOX, YELLOW_SHULKER_BOX, LIME_SHULKER_BOX, PINK_SHULKER_BOX, GRAY_SHULKER_BOX, LIGHT_GRAY_SHULKER_BOX, CYAN_SHULKER_BOX, PURPLE_SHULKER_BOX, BLUE_SHULKER_BOX, BROWN_SHULKER_BOX, GREEN_SHULKER_BOX, RED_SHULKER_BOX, BLACK_SHULKER_BOX, ENDER_CHEST, BARREL, BELL, BLAST_FURNACE, CAMPFIRE, SOUL_CAMPFIRE, JIGSAW, LECTERN, SMOKER, BEEHIVE, BEE_NEST, SCULK_CATALYST, SCULK_SHRIEKER, SCULK_SENSOR, CALIBRATED_SCULK_SENSOR, CHISELED_BOOKSHELF, DECORATED_POT, SUSPICIOUS_SAND, SUSPICIOUS_GRAVEL ->
-                    new CraftMetaBlockState(item.getTag(), CraftMagicNumbers.getMaterial(item.getItem()));
+            case FURNACE, CHEST, TRAPPED_CHEST, JUKEBOX, DISPENSER, DROPPER, ACACIA_HANGING_SIGN, ACACIA_SIGN, ACACIA_WALL_HANGING_SIGN, ACACIA_WALL_SIGN, BAMBOO_HANGING_SIGN, BAMBOO_SIGN, BAMBOO_WALL_HANGING_SIGN, BAMBOO_WALL_SIGN, BIRCH_HANGING_SIGN, BIRCH_SIGN, BIRCH_WALL_HANGING_SIGN, BIRCH_WALL_SIGN, CHERRY_HANGING_SIGN, CHERRY_SIGN, CHERRY_WALL_HANGING_SIGN, CHERRY_WALL_SIGN, CRIMSON_HANGING_SIGN, CRIMSON_SIGN, CRIMSON_WALL_HANGING_SIGN, CRIMSON_WALL_SIGN, DARK_OAK_HANGING_SIGN, DARK_OAK_SIGN, DARK_OAK_WALL_HANGING_SIGN, DARK_OAK_WALL_SIGN, JUNGLE_HANGING_SIGN, JUNGLE_SIGN, JUNGLE_WALL_HANGING_SIGN, JUNGLE_WALL_SIGN, MANGROVE_HANGING_SIGN, MANGROVE_SIGN, MANGROVE_WALL_HANGING_SIGN, MANGROVE_WALL_SIGN, OAK_HANGING_SIGN, OAK_SIGN, OAK_WALL_HANGING_SIGN, OAK_WALL_SIGN, SPRUCE_HANGING_SIGN, SPRUCE_SIGN, SPRUCE_WALL_HANGING_SIGN, SPRUCE_WALL_SIGN, WARPED_HANGING_SIGN, WARPED_SIGN, WARPED_WALL_HANGING_SIGN, WARPED_WALL_SIGN, SPAWNER, BREWING_STAND, ENCHANTING_TABLE, COMMAND_BLOCK, REPEATING_COMMAND_BLOCK, CHAIN_COMMAND_BLOCK, BEACON, DAYLIGHT_DETECTOR, HOPPER, COMPARATOR, SHIELD, STRUCTURE_BLOCK, SHULKER_BOX, WHITE_SHULKER_BOX, ORANGE_SHULKER_BOX, MAGENTA_SHULKER_BOX, LIGHT_BLUE_SHULKER_BOX, YELLOW_SHULKER_BOX, LIME_SHULKER_BOX, PINK_SHULKER_BOX, GRAY_SHULKER_BOX, LIGHT_GRAY_SHULKER_BOX, CYAN_SHULKER_BOX, PURPLE_SHULKER_BOX, BLUE_SHULKER_BOX, BROWN_SHULKER_BOX, GREEN_SHULKER_BOX, RED_SHULKER_BOX, BLACK_SHULKER_BOX, ENDER_CHEST, BARREL, BELL, BLAST_FURNACE, CAMPFIRE, SOUL_CAMPFIRE, JIGSAW, LECTERN, SMOKER, BEEHIVE, BEE_NEST, SCULK_CATALYST, SCULK_SHRIEKER, SCULK_SENSOR, CALIBRATED_SCULK_SENSOR, CHISELED_BOOKSHELF, DECORATED_POT, SUSPICIOUS_SAND, SUSPICIOUS_GRAVEL, CRAFTER, TRIAL_SPAWNER ->
+                    new CraftMetaBlockState(item.getTag(), CraftItemType.minecraftToBukkit(item.getItem()));
             case TROPICAL_FISH_BUCKET -> new CraftMetaTropicalFishBucket(item.getTag());
             case AXOLOTL_BUCKET -> new CraftMetaAxolotlBucket(item.getTag());
             case CROSSBOW -> new CraftMetaCrossbow(item.getTag());
@@ -364,11 +367,12 @@
         CompoundTag tag = item.getTag();
         if (tag != null)
             meta.offerUnhandledTags(tag);
+        meta.setForgeCaps(item.getForgeCaps());
         return meta;
     }
 
     static Material getType(net.minecraft.world.item.ItemStack item) {
-        return item == null ? Material.AIR : CraftMagicNumbers.getMaterial(item.getItem());
+        return item == null ? Material.AIR : CraftItemType.minecraftToBukkit(item.getItem());
     }
 
     @Override
@@ -392,7 +396,7 @@
         if (itemMeta == null) return true;
 
         Item oldItem = item.getItem();
-        Item newItem = CraftMagicNumbers.getItem(CraftItemFactory.instance().updateMaterial(itemMeta, CraftMagicNumbers.getMaterial(oldItem)));
+        Item newItem = CraftItemType.bukkitToMinecraft(CraftItemFactory.instance().updateMaterial(itemMeta, CraftItemType.minecraftToBukkit(oldItem)));
         if (oldItem != newItem) {
             item.setItem(newItem);
         }
@@ -402,6 +406,9 @@
 
         ((CraftMetaItem) itemMeta).applyToItem(tag);
         item.convertStack(((CraftMetaItem) itemMeta).getVersion());
+        CompoundTag forgeCaps = ((CraftMetaItem) itemMeta).getForgeCaps();
+        if (forgeCaps != null)
+            item.setForgeCaps(forgeCaps.copy());
         // SpigotCraft#463 this is required now by the Vanilla client, so mimic ItemStack constructor in ensuring it
         if (item.getItem() != null && item.getItem().canBeDepleted()) {
             item.setDamageValue(item.getDamageValue());
@@ -418,11 +425,10 @@
         if (stack == this) {
             return true;
         }
-        if (!(stack instanceof CraftItemStack)) {
+        if (!(stack instanceof CraftItemStack that)) {
             return stack.getClass() == ItemStack.class && stack.isSimilar(this);
         }
 
-        CraftItemStack that = (CraftItemStack) stack;
         if (handle == that.handle) {
             return true;
         }
@@ -433,7 +439,7 @@
         if (!(comparisonType == getType() && getDurability() == that.getDurability())) {
             return false;
         }
-        return hasItemMeta() ? that.hasItemMeta() && handle.getTag().equals(that.handle.getTag()) : !that.hasItemMeta();
+        return hasItemMeta() ? (that.hasItemMeta() && Objects.equals(handle.getTag(), that.handle.getTag()) && Objects.equals(handle.getForgeCaps(), that.handle.getForgeCaps())) : !that.hasItemMeta();
     }
 
     @Override
@@ -442,6 +448,10 @@
     }
 
     static boolean hasItemMeta(net.minecraft.world.item.ItemStack item) {
+        if (item != null) {
+            CompoundTag forgeCaps = item.getForgeCaps();
+            if (forgeCaps != null && !forgeCaps.isEmpty()) return true;
+        }
         return !(item == null || item.getTag() == null || item.getTag().isEmpty());
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryDoubleChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryDoubleChest.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryDoubleChest.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryDoubleChest.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryDoubleChest.java	(date 1703956060000)
@@ -3,6 +3,7 @@
 import com.google.common.base.Preconditions;
 import net.minecraft.world.CompoundContainer;
 import net.minecraft.world.MenuProvider;
+import net.minecraft.world.level.block.ChestBlock;
 import org.bukkit.Location;
 import org.bukkit.block.DoubleChest;
 import org.bukkit.inventory.DoubleChestInventory;
@@ -14,7 +15,7 @@
     private final CraftInventory left;
     private final CraftInventory right;
 
-    public CraftInventoryDoubleChest(com.mohistmc.banner.bukkit.DoubleChestInventory block) {
+    public CraftInventoryDoubleChest(ChestBlock.DoubleInventory block) {
         super(block.inventorylargechest);
         this.tile = block;
         this.left = new CraftInventory(block.inventorylargechest.container1);
Index: src/main/java/org/bukkit/inventory/ShapelessRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.material.MaterialData;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a shapeless recipe, where the arrangement of the ingredients on
@@ -264,4 +263,4 @@
         }
         return result;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryLectern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryLectern.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryLectern.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryLectern.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryLectern.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import net.minecraft.world.Container;
+import net.minecraft.world.level.block.entity.LecternBlockEntity;
 import org.bukkit.block.Lectern;
 import org.bukkit.inventory.LecternInventory;
 
@@ -10,11 +11,9 @@
 
     public CraftInventoryLectern(Container inventory) {
         super(inventory);
-
-        /**
-        if (inventory instanceof BannerLecternInventory) {
-            this.tile = ((BannerLecternInventory) inventory).getLectern();
-        }*/
+        if (inventory instanceof LecternBlockEntity.LecternInventory) {
+            this.tile = ((LecternBlockEntity.LecternInventory) inventory).getLectern();
+        }
     }
 
     @Override
Index: src/main/java/org/bukkit/inventory/Inventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
--- a/src/main/java/org/bukkit/inventory/Inventory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/Inventory.java	(date 1703956060000)
@@ -1,5 +1,8 @@
 package org.bukkit.inventory;
 
+import java.util.HashMap;
+import java.util.List;
+import java.util.ListIterator;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.entity.HumanEntity;
@@ -8,10 +11,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.ListIterator;
-
 /**
  * Interface to the various inventories. Behavior relating to {@link
  * Material#AIR} is unspecified.
Index: src/main/java/org/bukkit/inventory/Merchant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/Merchant.java b/src/main/java/org/bukkit/inventory/Merchant.java
--- a/src/main/java/org/bukkit/inventory/Merchant.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/Merchant.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.inventory;
 
+import java.util.List;
 import org.bukkit.entity.HumanEntity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Represents a merchant. A merchant is a special type of inventory which can
  * facilitate custom trades between items.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryAnvil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryAnvil.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryAnvil.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryAnvil.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryAnvil.java	(date 1703956060000)
@@ -49,12 +49,12 @@
 
     @Override
     public int getMaximumRepairCost() {
-        return container.bridge$maximumRepairCost();
+        return container.maximumRepairCost;
     }
 
     @Override
     public void setMaximumRepairCost(int levels) {
         Preconditions.checkArgument(levels >= 0, "Maximum repair cost must be positive (or 0)");
-        container.banner$setMaximumRepairCost(levels);
+        container.maximumRepairCost = levels;
     }
 }
Index: src/main/java/org/bukkit/inventory/SmithingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/SmithingRecipe.java b/src/main/java/org/bukkit/inventory/SmithingRecipe.java
--- a/src/main/java/org/bukkit/inventory/SmithingRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/SmithingRecipe.java	(date 1703956060000)
@@ -21,12 +21,7 @@
      * @param result The item you want the recipe to create.
      * @param base The base ingredient
      * @param addition The addition ingredient
-     * @deprecated as of Minecraft 1.20, smithing recipes are now separated into two
-     * distinct recipe types, {@link SmithingTransformRecipe} and {@link SmithingTrimRecipe}.
-     * This class now acts as a base class to these two classes and will do nothing when
-     * added to the server.
      */
-    @Deprecated
     public SmithingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice base, @NotNull RecipeChoice addition) {
         this.key = key;
         this.result = result;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCrafting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCrafting.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCrafting.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCrafting.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCrafting.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.Arrays;
+import java.util.List;
 import net.minecraft.world.Container;
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
 
-import java.util.Arrays;
-import java.util.List;
-
 public class CraftInventoryCrafting extends CraftInventory implements CraftingInventory {
     private final Container resultInventory;
 
@@ -115,7 +114,7 @@
 
     @Override
     public Recipe getRecipe() {
-        net.minecraft.world.item.crafting.RecipeHolder recipe = getInventory().getCurrentRecipe();
+        net.minecraft.world.item.crafting.RecipeHolder<?> recipe = getInventory().getCurrentRecipe();
         return recipe == null ? null : recipe.toBukkitRecipe();
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCustom.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCustom.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCustom.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventoryCustom.java	(date 1703956060000)
@@ -1,6 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
 import net.minecraft.core.NonNullList;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
@@ -10,10 +13,6 @@
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryHolder;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
 public class CraftInventoryCustom extends CraftInventory {
     public CraftInventoryCustom(InventoryHolder owner, InventoryType type) {
         super(new MinecraftInventory(owner, type));
@@ -27,15 +26,26 @@
         super(new MinecraftInventory(owner, size));
     }
 
+    // Paper start
+    public CraftInventoryCustom(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
+        super(new MinecraftInventory(owner, size, title));
+    }
+    // Paper end
+
     public CraftInventoryCustom(InventoryHolder owner, int size, String title) {
         super(new MinecraftInventory(owner, size, title));
     }
 
+    public CraftInventoryCustom(InventoryHolder owner, NonNullList<ItemStack> items) {
+        super(new MinecraftInventory(owner, items));
+    }
+
     static class MinecraftInventory implements Container {
         private final NonNullList<ItemStack> items;
-        private int maxStack = 64;
+        private int maxStack = MAX_STACK;
         private final List<HumanEntity> viewers;
         private final String title;
+        private final net.kyori.adventure.text.Component adventure$title; // Paper
         private InventoryType type;
         private final InventoryHolder owner;
 
@@ -57,11 +67,33 @@
             Preconditions.checkArgument(title != null, "title cannot be null");
             this.items = NonNullList.withSize(size, ItemStack.EMPTY);
             this.title = title;
+            this.adventure$title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(title);
             this.viewers = new ArrayList<HumanEntity>();
             this.owner = owner;
             this.type = InventoryType.CHEST;
         }
 
+        public MinecraftInventory(InventoryHolder owner, NonNullList<ItemStack> items) {
+            this.items = items;
+            this.title = "Chest";
+            this.adventure$title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(this.title);
+            this.viewers = new ArrayList<>();
+            this.owner = owner;
+            this.type = InventoryType.CHEST;
+        }
+
+        // Paper start
+        public MinecraftInventory(final InventoryHolder owner, final int size, final net.kyori.adventure.text.Component title) {
+            Preconditions.checkArgument(title != null, "Title cannot be null");
+            this.items = NonNullList.withSize(size, ItemStack.EMPTY);
+            this.title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(title);
+            this.adventure$title = title;
+            this.viewers = new ArrayList<HumanEntity>();
+            this.owner = owner;
+            this.type = InventoryType.CHEST;
+        }
+        // Paper end
+
         @Override
         public int getContainerSize() {
             return items.size();
@@ -183,6 +215,12 @@
             return null;
         }
 
+        // Paper start
+        public net.kyori.adventure.text.Component title() {
+            return this.adventure$title;
+        }
+        // Paper end
+
         public String getTitle() {
             return title;
         }
Index: src/main/java/org/bukkit/inventory/CookingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/CookingRecipe.java b/src/main/java/org/bukkit/inventory/CookingRecipe.java
--- a/src/main/java/org/bukkit/inventory/CookingRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/CookingRecipe.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.Collections;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.recipe.CookingBookCategory;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collections;
-
 /**
  * Represents a cooking recipe.
  * @param <T> type of recipe
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftBlastingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftBlastingRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftBlastingRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftBlastingRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftBlastingRecipe.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -27,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.BlastingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.BlastingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
     }
 }
Index: src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java b/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java
--- a/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java	(date 1703956060000)
@@ -1,12 +1,16 @@
 package org.bukkit.inventory;
 
 import org.bukkit.Material;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a smithing trim recipe.
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public class SmithingTrimRecipe extends SmithingRecipe implements ComplexRecipe {
 
     private final RecipeChoice template;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftCampfireRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftCampfireRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftCampfireRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftCampfireRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftCampfireRecipe.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -27,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.CampfireCookingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.CampfireCookingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftComplexRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftComplexRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftComplexRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftComplexRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftComplexRecipe.java	(date 1703956060000)
@@ -1,7 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.CustomRecipe;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
@@ -31,6 +31,6 @@
 
     @Override
     public void addToCraftingManager() {
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(key), recipe));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(key), recipe));
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftContainer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftContainer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftContainer.java	(date 1703956060000)
@@ -8,6 +8,7 @@
 import net.minecraft.world.inventory.BrewingStandMenu;
 import net.minecraft.world.inventory.CartographyTableMenu;
 import net.minecraft.world.inventory.ChestMenu;
+import net.minecraft.world.inventory.CrafterMenu;
 import net.minecraft.world.inventory.CraftingMenu;
 import net.minecraft.world.inventory.DispenserMenu;
 import net.minecraft.world.inventory.EnchantmentMenu;
@@ -47,6 +48,7 @@
 
     public CraftContainer(final Inventory inventory, final net.minecraft.world.entity.player.Player player, int id) {
         this(new InventoryView() {
+
             private final String originalTitle = (inventory instanceof CraftInventoryCustom) ? ((CraftInventoryCustom.MinecraftInventory) ((CraftInventory) inventory).getInventory()).getTitle() : inventory.getType().getDefaultTitle();
             private String title = originalTitle;
             @Override
@@ -156,6 +158,8 @@
             case CRAFTING:
             case MERCHANT:
                 throw new IllegalArgumentException("Can't open a " + inventory.getType() + " inventory!");
+            case CRAFTER:
+                return MenuType.CRAFTER_3x3;
             default:
                 // TODO: If it reaches the default case, should we throw an error?
                 return MenuType.GENERIC_9x3;
@@ -194,7 +198,6 @@
                 delegate = new HopperMenu(windowId, bottom, top);
                 break;
             case ANVIL:
-            case SMITHING:
                 setupAnvil(top, bottom); // SPIGOT-6783 - manually set up slots so we can use the delegated inventory and not the automatically created one
                 break;
             case BEACON:
@@ -207,7 +210,7 @@
                 delegate = new BlastFurnaceMenu(windowId, bottom, top, new SimpleContainerData(4));
                 break;
             case LECTERN:
-                delegate = new LecternMenu(windowId);
+                delegate = new LecternMenu(windowId, top, new SimpleContainerData(1), bottom);
                 break;
             case SMOKER:
                 delegate = new SmokerMenu(windowId, bottom, top, new SimpleContainerData(4));
@@ -227,9 +230,13 @@
             case MERCHANT:
                 delegate = new MerchantMenu(windowId, bottom);
                 break;
+            case SMITHING:
             case SMITHING_NEW:
                 setupSmithing(top, bottom); // SPIGOT-6783 - manually set up slots so we can use the delegated inventory and not the automatically created one
                 break;
+            case CRAFTER:
+                delegate = new CrafterMenu(windowId, bottom);
+                break;
         }
 
         if (delegate != null) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftFurnaceRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftFurnaceRecipe.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftFurnaceRecipe.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftFurnaceRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftFurnaceRecipe.java	(date 1703956060000)
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
@@ -27,6 +27,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitExtraConstants.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmeltingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmeltingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), getExperience(), getCookingTime())));
     }
 }
Index: src/main/java/org/bukkit/inventory/FurnaceRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
--- a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.inventory;
 
+import java.util.Collections;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collections;
-
 /**
  * Represents a furnace recipe.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventory.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/inventory/CraftInventory.java	(date 1703956060000)
@@ -1,7 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.inventory;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BannerLecternInventory;
+import java.util.HashMap;
+import java.util.List;
+import java.util.ListIterator;
 import net.minecraft.world.Container;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.MerchantContainer;
@@ -11,9 +13,9 @@
 import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
 import net.minecraft.world.level.block.entity.BarrelBlockEntity;
 import net.minecraft.world.level.block.entity.BlastFurnaceBlockEntity;
-import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BrewingStandBlockEntity;
 import net.minecraft.world.level.block.entity.ChiseledBookShelfBlockEntity;
+import net.minecraft.world.level.block.entity.CrafterBlockEntity;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.level.block.entity.DropperBlockEntity;
 import net.minecraft.world.level.block.entity.LecternBlockEntity;
@@ -28,10 +30,6 @@
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.ListIterator;
-
 public class CraftInventory implements Inventory {
     protected final Container inventory;
 
@@ -453,14 +451,13 @@
 
     @Override
     public InventoryType getType() {
-        // Banner start
-        if (inventory.getClass().getDeclaringClass() == LecternBlockEntity.class) {
-            return InventoryType.LECTERN;
-        }
-        // Banner end
         // Thanks to Droppers extending Dispensers, Blast Furnaces & Smokers extending Furnace, order is important.
         if (inventory instanceof CraftingContainer) {
-            return inventory.getContainerSize() >= 9 ? InventoryType.WORKBENCH : InventoryType.CRAFTING;
+            if (inventory instanceof CrafterBlockEntity) {
+                return InventoryType.CRAFTER;
+            } else {
+                return inventory.getContainerSize() >= 9 ? InventoryType.WORKBENCH : InventoryType.CRAFTING;
+            }
         } else if (inventory instanceof net.minecraft.world.entity.player.Inventory) {
             return InventoryType.PLAYER;
         } else if (inventory instanceof DropperBlockEntity) {
@@ -495,7 +492,7 @@
             return InventoryType.SHULKER_BOX;
         } else if (inventory instanceof BarrelBlockEntity) {
             return InventoryType.BARREL;
-        } else if (inventory instanceof BannerLecternInventory) {
+        } else if (inventory instanceof LecternBlockEntity.LecternInventory) {
             return InventoryType.LECTERN;
         } else if (inventory instanceof ChiseledBookShelfBlockEntity) {
             return InventoryType.CHISELED_BOOKSHELF;
@@ -543,16 +540,6 @@
 
     @Override
     public Location getLocation() {
-        // Banner start - handle modded blockentity location
-        try {
-            return inventory.getLocation();
-        } catch (AbstractMethodError e) {
-            if (inventory instanceof BlockEntity tileEntity) {
-                return new Location(tileEntity.getLevel().getWorld(), tileEntity.getBlockPos().getX(), tileEntity.getBlockPos().getY(), tileEntity.getBlockPos().getZ());
-            }else {
-                return null;
-            }
-            // Banner end
-        }
+        return inventory.getLocation();
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftChunkData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftChunkData.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftChunkData.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftChunkData.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.generator;
 
 import com.google.common.base.Preconditions;
+import java.lang.ref.WeakReference;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.EntityBlock;
@@ -10,14 +11,13 @@
 import org.bukkit.World;
 import org.bukkit.block.Biome;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBiome;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.material.MaterialData;
 
-import java.lang.ref.WeakReference;
-
 /**
  * Data to be used for the block types and data in a newly generated chunk.
  */
@@ -60,7 +60,7 @@
 
     @Override
     public Biome getBiome(int x, int y, int z) {
-        return CraftBlock.biomeBaseToBiome(getHandle().bridge$biomeRegistry(), getHandle().getNoiseBiome(x >> 2, y >> 2, z >> 2));
+        return CraftBiome.minecraftHolderToBukkit(getHandle().getNoiseBiome(x >> 2, y >> 2, z >> 2));
     }
 
     @Override
@@ -95,7 +95,7 @@
 
     @Override
     public Material getType(int x, int y, int z) {
-        return CraftMagicNumbers.getMaterial(getTypeId(x, y, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(getTypeId(x, y, z).getBlock());
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftLimitedRegion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftLimitedRegion.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftLimitedRegion.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftLimitedRegion.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftLimitedRegion.java	(date 1703956060000)
@@ -1,6 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.generator;
 
 import com.google.common.base.Preconditions;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.nbt.CompoundTag;
@@ -25,14 +32,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Random;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-
 public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRegion {
 
     private final WeakReference<WorldGenLevel> weakAccess;
@@ -87,7 +86,7 @@
                 for (CompoundTag compound : chunk.getEntities()) {
                     net.minecraft.world.entity.EntityType.loadEntityRecursive(compound, access.getMinecraftWorld(), (entity) -> {
                         if (region.contains(entity.getX(), entity.getY(), entity.getZ())) {
-                            entity.banner$setGeneration(true);
+                            entity.generation = true;
                             entities.add(entity);
                         } else {
                             outsideEntities.add(entity);
@@ -116,11 +115,11 @@
             if (entity.isAlive()) {
                 // check if entity is still in region or if it got teleported outside it
                 Preconditions.checkState(region.contains(entity.getX(), entity.getY(), entity.getZ()), "Entity %s is not in the region", entity);
-                access.addFreshEntity(entity);
+                access.addFreshEntityWithPassengers(entity);
             }
         }
         for (net.minecraft.world.entity.Entity entity : outsideEntities) {
-            access.addFreshEntity(entity);
+            access.addFreshEntityWithPassengers(entity);
         }
     }
 
@@ -227,13 +226,13 @@
     }
 
     @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType, Consumer<BlockState> consumer) {
+    public boolean generateTree(Location location, Random random, TreeType treeType, Consumer<? super BlockState> consumer) {
         Preconditions.checkArgument(isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
         return super.generateTree(location, random, treeType, consumer);
     }
 
     @Override
-    public boolean generateTree(@NotNull Location location, @NotNull Random random, @NotNull TreeType type, @Nullable Predicate<BlockState> statePredicate) {
+    public boolean generateTree(@NotNull Location location, @NotNull Random random, @NotNull TreeType type, @Nullable Predicate<? super BlockState> statePredicate) {
         return false;
     }
 
@@ -245,7 +244,7 @@
     }
 
     @Override
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
+    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<? super T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         Preconditions.checkArgument(isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
         return super.spawn(location, clazz, function, reason);
     }
@@ -254,4 +253,9 @@
     public void addEntityToWorld(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason) {
         entities.add(entity);
     }
+
+    @Override
+    public void addEntityWithPassengers(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason) {
+        entities.add(entity);
+    }
 }
Index: src/main/java/org/bukkit/event/inventory/InventoryEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 
 package org.bukkit.event.inventory;
 
+import java.util.List;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
@@ -8,8 +9,6 @@
 import org.bukkit.inventory.InventoryView;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Represents a player related inventory event
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftWorldInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftWorldInfo.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftWorldInfo.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftWorldInfo.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CraftWorldInfo.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.generator;
 
+import com.mohistmc.mohist.util.Level2LevelStem;
+import java.util.UUID;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.PrimaryLevelData;
@@ -8,8 +10,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.WorldUUID;
 import org.bukkit.generator.WorldInfo;
 
-import java.util.UUID;
-
 public class CraftWorldInfo implements WorldInfo {
 
     private final String name;
@@ -19,11 +19,11 @@
     private final int minHeight;
     private final int maxHeight;
 
-    public CraftWorldInfo(ServerLevelData serverLevelDataCB, LevelStorageSource.LevelStorageAccess session, World.Environment environment, DimensionType dimensionManager) {
-        this.name = serverLevelDataCB.getLevelName();
-        this.uuid = WorldUUID.getUUID(session.levelDirectory.path().toFile());
+    public CraftWorldInfo(ServerLevelData K, LevelStorageSource.LevelStorageAccess session, World.Environment environment, DimensionType dimensionManager) {
+        this.name = K.getLevelName();
+        this.uuid = WorldUUID.getUUID(Level2LevelStem.checkPath(session.levelDirectory.path()).toFile());
         this.environment = environment;
-        this.seed = ((PrimaryLevelData) serverLevelDataCB).worldGenOptions().seed();
+        this.seed = ((PrimaryLevelData) K).worldGenOptions().seed();
         this.minHeight = dimensionManager.minY();
         this.maxHeight = dimensionManager.minY() + dimensionManager.height();
     }
Index: src/main/java/org/bukkit/event/inventory/PrepareInventoryResultEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareInventoryResultEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareInventoryResultEvent.java
--- a/src/main/java/org/bukkit/event/inventory/PrepareInventoryResultEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/PrepareInventoryResultEvent.java	(date 1703956060000)
@@ -48,4 +48,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomChunkGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomChunkGenerator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomChunkGenerator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomChunkGenerator.java	(date 1703956060000)
@@ -2,6 +2,10 @@
 
 import com.google.common.base.Preconditions;
 import com.mojang.serialization.Codec;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.RegistryAccess;
@@ -31,17 +35,12 @@
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import org.bukkit.block.Biome;
 import org.bukkit.craftbukkit.v1_20_R3.CraftHeightMap;
-import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBiome;
 import org.bukkit.craftbukkit.v1_20_R3.util.RandomSourceWrapper;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.generator.ChunkGenerator.BiomeGrid;
 import org.bukkit.generator.ChunkGenerator.ChunkData;
 
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
-
 public class CustomChunkGenerator extends InternalChunkGenerator {
 
     private final net.minecraft.world.level.chunk.ChunkGenerator delegate;
@@ -74,13 +73,13 @@
 
         @Override
         public Biome getBiome(int x, int y, int z) {
-            return CraftBlock.biomeBaseToBiome(biome.bridge$biomeRegistry(), biome.getNoiseBiome(x >> 2, y >> 2, z >> 2));
+            return CraftBiome.minecraftHolderToBukkit(biome.getNoiseBiome(x >> 2, y >> 2, z >> 2));
         }
 
         @Override
         public void setBiome(int x, int y, int z, Biome bio) {
             Preconditions.checkArgument(bio != Biome.CUSTOM, "Cannot set the biome to %s", bio);
-            biome.setBiome(x >> 2, y >> 2, z >> 2, CraftBlock.biomeToBiomeBase(biome.bridge$biomeRegistry(), bio));
+            biome.setBiome(x >> 2, y >> 2, z >> 2, CraftBiome.bukkitToMinecraftHolder(bio));
         }
     }
 
Index: src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
--- a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java	(date 1703956060000)
@@ -2,6 +2,9 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
 import org.bukkit.Location;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.entity.Player;
@@ -14,10 +17,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
-
 /**
  * This event is called when the player drags an item in their cursor across
  * the inventory. The ItemStack is distributed across the slots the
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomWorldChunkManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomWorldChunkManager.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomWorldChunkManager.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomWorldChunkManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/CustomWorldChunkManager.java	(date 1703956060000)
@@ -2,18 +2,17 @@
 
 import com.google.common.base.Preconditions;
 import com.mojang.serialization.Codec;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Stream;
 import net.minecraft.core.Holder;
 import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.biome.Climate;
 import org.bukkit.block.Biome;
-import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBiome;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.WorldInfo;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.stream.Stream;
-
 public class CustomWorldChunkManager extends BiomeSource {
 
     private final WorldInfo worldInfo;
@@ -25,7 +24,7 @@
 
         for (Biome biome : biomes) {
             Preconditions.checkArgument(biome != Biome.CUSTOM, "Cannot use the biome %s", biome);
-            biomeBases.add(CraftBlock.biomeToBiomeBase(registry, biome));
+            biomeBases.add(CraftBiome.bukkitToMinecraftHolder(biome));
         }
 
         return biomeBases;
@@ -47,7 +46,7 @@
         Biome biome = biomeProvider.getBiome(worldInfo, x << 2, y << 2, z << 2, CraftBiomeParameterPoint.createBiomeParameterPoint(sampler, sampler.sample(x, y, z)));
         Preconditions.checkArgument(biome != Biome.CUSTOM, "Cannot set the biome to %s", biome);
 
-        return CraftBlock.biomeToBiomeBase(registry, biome);
+        return CraftBiome.bukkitToMinecraftHolder(biome);
     }
 
     @Override
Index: src/main/java/org/bukkit/event/inventory/PrepareGrindstoneEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareGrindstoneEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareGrindstoneEvent.java
--- a/src/main/java/org/bukkit/event/inventory/PrepareGrindstoneEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/PrepareGrindstoneEvent.java	(date 1703956060000)
@@ -34,4 +34,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/InternalChunkGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/InternalChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/InternalChunkGenerator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/InternalChunkGenerator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/InternalChunkGenerator.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.generator;
 
+import java.util.function.Function;
 import net.minecraft.core.Holder;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeGenerationSettings;
 import net.minecraft.world.level.biome.BiomeSource;
 
-import java.util.function.Function;
-
 // Do not implement functions to this class, add to NormalChunkGenerator
 public abstract class InternalChunkGenerator extends net.minecraft.world.level.chunk.ChunkGenerator {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/OldCraftChunkData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/OldCraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/OldCraftChunkData.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/OldCraftChunkData.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/generator/OldCraftChunkData.java	(date 1703956060000)
@@ -1,19 +1,19 @@
 package org.bukkit.craftbukkit.v1_20_R3.generator;
 
+import java.util.HashSet;
+import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import org.bukkit.Material;
 import org.bukkit.block.Biome;
 import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.material.MaterialData;
 
-import java.util.HashSet;
-import java.util.Set;
-
 /**
  * Data to be used for the block types and data in a newly generated chunk.
  */
@@ -80,7 +80,7 @@
 
     @Override
     public Material getType(int x, int y, int z) {
-        return CraftMagicNumbers.getMaterial(getTypeId(x, y, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(getTypeId(x, y, z).getBlock());
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/metadata/BlockMetadataStore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/metadata/BlockMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/metadata/BlockMetadataStore.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/metadata/BlockMetadataStore.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/metadata/BlockMetadataStore.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.metadata;
 
 import com.google.common.base.Preconditions;
+import java.util.List;
 import org.bukkit.World;
 import org.bukkit.block.Block;
 import org.bukkit.metadata.MetadataStore;
@@ -8,8 +9,6 @@
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 
-import java.util.List;
-
 /**
  * A BlockMetadataStore stores metadata values for {@link Block} objects.
  */
Index: src/main/java/org/bukkit/event/inventory/InventoryType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.event.inventory;
 
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.inventory.InventoryHolder;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -82,7 +84,7 @@
      */
     ANVIL(3, "Repairing"),
     /**
-     * A smithing inventory, with 3 CRAFTING slots and 1 RESULT slot
+     * A smithing inventory, with 3 CRAFTING slots and 1 RESULT slot.
      */
     SMITHING(4, "Upgrade Gear"),
     /**
@@ -143,6 +145,12 @@
      */
     JUKEBOX(1, "Jukebox", false),
     /**
+     * A crafter inventory, with 9 CRAFTING slots.
+     */
+    @MinecraftExperimental
+    @ApiStatus.Experimental
+    CRAFTER(9, "Crafter"),
+    /**
      * The new smithing inventory, with 3 CRAFTING slots and 1 RESULT slot.
      *
      * @deprecated use {@link #SMITHING}
@@ -154,6 +162,7 @@
     private final int size;
     private final String title;
     private final boolean isCreatable;
+    private boolean isMods;
 
     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {
         this(defaultSize, defaultTitle, true);
@@ -163,6 +172,7 @@
         size = defaultSize;
         title = defaultTitle;
         this.isCreatable = isCreatable;
+        this.isMods = false;
     }
 
     public int getDefaultSize() {
@@ -184,6 +194,14 @@
         return isCreatable;
     }
 
+    public boolean isMods() {
+        return isMods;
+    }
+
+    public void setMods(boolean isMods) {
+        this.isMods = isMods;
+    }
+
     public enum SlotType {
         /**
          * A result slot in a furnace or crafting inventory.
Index: src/main/java/org/bukkit/event/inventory/BrewEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/BrewEvent.java b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
--- a/src/main/java/org/bukkit/event/inventory/BrewEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/BrewEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.inventory;
 
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
@@ -8,8 +9,6 @@
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when the brewing of the contents inside the Brewing Stand is
  * complete.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeInstance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeInstance.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeInstance.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeInstance.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeInstance.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.craftbukkit.v1_20_R3.attribute;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeInstance;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.inventory.EquipmentSlot;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
 public class CraftAttributeInstance implements AttributeInstance {
 
     private final net.minecraft.world.entity.ai.attributes.AttributeInstance handle;
@@ -51,18 +50,10 @@
         handle.addPermanentModifier(convert(modifier));
     }
 
-    // Paper start - Transient modifier API
-    @Override
-    public void addTransientModifier(AttributeModifier modifier) {
-        Preconditions.checkArgument(modifier != null, "modifier");
-        this.handle.addTransientModifier(CraftAttributeInstance.convert(modifier));
-    }
-    // Paper end
-
     @Override
     public void removeModifier(AttributeModifier modifier) {
         Preconditions.checkArgument(modifier != null, "modifier");
-        handle.removeModifier(convert(modifier).getId());
+        handle.removeModifier(convert(modifier));
     }
 
     @Override
@@ -80,10 +71,10 @@
     }
 
     public static AttributeModifier convert(net.minecraft.world.entity.ai.attributes.AttributeModifier nms) {
-        return new AttributeModifier(nms.getId(), nms.getName(), nms.getAmount(), AttributeModifier.Operation.values()[nms.getOperation().ordinal()]);
+        return new AttributeModifier(nms.getId(), nms.name, nms.getAmount(), AttributeModifier.Operation.values()[nms.getOperation().ordinal()]);
     }
 
     public static AttributeModifier convert(net.minecraft.world.entity.ai.attributes.AttributeModifier nms, EquipmentSlot slot) {
-        return new AttributeModifier(nms.getId(), nms.getName(), nms.getAmount(), AttributeModifier.Operation.values()[nms.getOperation().ordinal()], slot);
+        return new AttributeModifier(nms.getId(), nms.name, nms.getAmount(), AttributeModifier.Operation.values()[nms.getOperation().ordinal()], slot);
     }
 }
Index: src/main/java/org/bukkit/event/inventory/ClickType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/ClickType.java b/src/main/java/org/bukkit/event/inventory/ClickType.java
--- a/src/main/java/org/bukkit/event/inventory/ClickType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/ClickType.java	(date 1703956060000)
@@ -75,7 +75,7 @@
      * @return true if this ClickType represents the pressing of a key
      */
     public boolean isKeyboardClick() {
-        return (this == ClickType.NUMBER_KEY) || (this == ClickType.DROP) || (this == ClickType.CONTROL_DROP);
+        return (this == ClickType.NUMBER_KEY) || (this == ClickType.DROP) || (this == ClickType.CONTROL_DROP) || (this == ClickType.SWAP_OFFHAND);
     }
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeMap.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeMap.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/attribute/CraftAttributeMap.java	(date 1703956060000)
@@ -1,12 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.attribute;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.registries.BuiltInRegistries;
-import org.bukkit.Registry;
 import org.bukkit.attribute.Attributable;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeInstance;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 
 public class CraftAttributeMap implements Attributable {
 
@@ -19,16 +16,8 @@
     @Override
     public AttributeInstance getAttribute(Attribute attribute) {
         Preconditions.checkArgument(attribute != null, "attribute");
-        net.minecraft.world.entity.ai.attributes.AttributeInstance nms = handle.getInstance(toMinecraft(attribute));
+        net.minecraft.world.entity.ai.attributes.AttributeInstance nms = handle.getInstance(CraftAttribute.bukkitToMinecraft(attribute));
 
         return (nms == null) ? null : new CraftAttributeInstance(nms, attribute);
     }
-
-    public static net.minecraft.world.entity.ai.attributes.Attribute toMinecraft(Attribute attribute) {
-        return BuiltInRegistries.ATTRIBUTE.get(CraftNamespacedKey.toMinecraft(attribute.getKey()));
-    }
-
-    public static Attribute fromMinecraft(String nms) {
-        return Registry.ATTRIBUTE.get(CraftNamespacedKey.fromString(nms));
-    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftRemoteConsoleCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftRemoteConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftRemoteConsoleCommandSender.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftRemoteConsoleCommandSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftRemoteConsoleCommandSender.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.command;
 
+import java.net.SocketAddress;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.rcon.RconConsoleSource;
 import org.bukkit.command.RemoteConsoleCommandSender;
 
-import java.net.SocketAddress;
-
 public class CraftRemoteConsoleCommandSender extends ServerCommandSender implements RemoteConsoleCommandSender {
 
     private final RconConsoleSource listener;
@@ -14,18 +13,18 @@
         this.listener = listener;
     }
 
-    @Override
-    public void sendMessage(String message) {
-        listener.sendSystemMessage(Component.literal(message + "\n")); // Send a newline after each message, to preserve formatting.
-    }
-
     public RconConsoleSource getListener() {
         return listener;
     }
 
     @Override
     public SocketAddress getAddress() {
-        return listener.bridge$socketAddress();
+        return listener.socketAddress;
+    }
+
+    @Override
+    public void sendMessage(String message) {
+        listener.sendSystemMessage(Component.literal(message + "\n")); // Send a newline after each message, to preserve formatting.
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ProxiedNativeCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ProxiedNativeCommandSender.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ProxiedNativeCommandSender.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ProxiedNativeCommandSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ProxiedNativeCommandSender.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.command;
 
+import java.util.Set;
+import java.util.UUID;
 import net.minecraft.commands.CommandSourceStack;
 import org.bukkit.Server;
 import org.bukkit.command.CommandSender;
@@ -9,9 +11,6 @@
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
-import java.util.Set;
-import java.util.UUID;
-
 public class ProxiedNativeCommandSender implements ProxiedCommandSender {
 
     private final CommandSourceStack orig;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ServerCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ServerCommandSender.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ServerCommandSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ServerCommandSender.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.command;
 
+import java.util.Set;
+import java.util.UUID;
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.CommandSender;
@@ -9,22 +11,15 @@
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
-import java.util.Set;
-import java.util.UUID;
-
 public abstract class ServerCommandSender implements CommandSender {
-    private static PermissibleBase blockPermInst;
     private final PermissibleBase perm;
 
-    public ServerCommandSender() {
-        if (this instanceof CraftBlockCommandSender) {
-            if (blockPermInst == null) {
-                blockPermInst = new PermissibleBase(this);
-            }
-            this.perm = blockPermInst;
-        } else {
-            this.perm = new PermissibleBase(this);
-        }
+    protected ServerCommandSender() {
+        this.perm = new PermissibleBase(this);
+    }
+
+    protected ServerCommandSender(PermissibleBase perm) {
+        this.perm = perm;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/VanillaCommandWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/VanillaCommandWrapper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/VanillaCommandWrapper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/VanillaCommandWrapper.java	(date 1703956060000)
@@ -4,6 +4,9 @@
 import com.google.common.base.Preconditions;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.tree.CommandNode;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
@@ -20,10 +23,6 @@
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.minecart.CommandMinecart;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
 public final class VanillaCommandWrapper extends BukkitCommand {
 
     private final Commands dispatcher;
@@ -41,7 +40,7 @@
         if (!testPermission(sender)) return true;
 
         CommandSourceStack icommandlistener = getListener(sender);
-        dispatcher.performPrefixedCommand(icommandlistener, toDispatcher(args, commandLabel));// Banner - use vanilla command handle
+        dispatcher.performPrefixedCommand(icommandlistener, toDispatcher(args, getName()), toDispatcher(args, commandLabel));
         return true;
     }
 
@@ -73,11 +72,8 @@
         if (sender instanceof BlockCommandSender) {
             return ((CraftBlockCommandSender) sender).getWrapper();
         }
-        if (sender instanceof CommandMinecart) {
-            return ((MinecartCommandBlock) ((CraftMinecartCommand) sender).getHandle()).getCommandBlock().createCommandSourceStack();
-        }
         if (sender instanceof RemoteConsoleCommandSender) {
-            return ((CraftRemoteConsoleCommandSender) sender).getListener().createCommandSourceStack();
+            return  ((CraftRemoteConsoleCommandSender) sender).getListener().createCommandSourceStack();
         }
         if (sender instanceof ConsoleCommandSender) {
             return ((CraftServer) sender.getServer()).getServer().createCommandSourceStack();
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerProfile.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerProfile.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerProfile.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerProfile.java	(date 1703956060000)
@@ -5,19 +5,7 @@
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
 import com.mojang.authlib.properties.PropertyMap;
-import net.minecraft.Util;
-import net.minecraft.server.dedicated.DedicatedServer;
-import net.minecraft.world.level.block.entity.SkullBlockEntity;
-import org.apache.commons.lang3.StringUtils;
-import org.bukkit.Bukkit;
-import org.bukkit.configuration.serialization.SerializableAs;
-import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
-import org.bukkit.craftbukkit.v1_20_R3.configuration.ConfigSerializationUtil;
-import org.bukkit.profile.PlayerProfile;
-import org.bukkit.profile.PlayerTextures;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import com.mojang.authlib.yggdrasil.ProfileResult;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
@@ -26,8 +14,18 @@
 import java.util.Objects;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
 import java.util.stream.Collectors;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import net.minecraft.Util;
+import net.minecraft.server.dedicated.DedicatedServer;
+import org.apache.commons.lang3.StringUtils;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.serialization.SerializableAs;
+import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
+import org.bukkit.craftbukkit.v1_20_R3.configuration.ConfigSerializationUtil;
+import org.bukkit.profile.PlayerProfile;
+import org.bukkit.profile.PlayerTextures;
 
 @SerializableAs("PlayerProfile")
 public final class CraftPlayerProfile implements PlayerProfile {
@@ -55,8 +53,8 @@
 
     public CraftPlayerProfile(UUID uniqueId, String name) {
         Preconditions.checkArgument((uniqueId != null) || !StringUtils.isBlank(name), "uniqueId is null or name is blank");
-        this.uniqueId = uniqueId;
-        this.name = name;
+        this.uniqueId = (uniqueId == null) ? Util.NIL_UUID : uniqueId;
+        this.name = (name == null) ? "" : name;;
     }
 
     // The Map of properties of the given GameProfile is not immutable. This captures a snapshot of the properties of
@@ -74,12 +72,12 @@
 
     @Override
     public UUID getUniqueId() {
-        return uniqueId;
+        return (uniqueId.equals(Util.NIL_UUID)) ? null : uniqueId;
     }
 
     @Override
     public String getName() {
-        return name;
+        return (name.isEmpty()) ? null : name;
     }
 
     @Nullable
@@ -119,7 +117,7 @@
 
     @Override
     public boolean isComplete() {
-        return (uniqueId != null) && (name != null) && !textures.isEmpty();
+        return (getUniqueId() != null) && (getName() != null) && !textures.isEmpty();
     }
 
     @Override
@@ -132,20 +130,15 @@
         GameProfile profile = this.buildGameProfile();
 
         // If missing, look up the uuid by name:
-        if (profile.getId() == null) {
+        if (profile.getId().equals(Util.NIL_UUID)) {
             profile = server.getProfileCache().get(profile.getName()).orElse(profile);
         }
 
         // Look up properties such as the textures:
-        if (profile.getId() != null) {
-            GameProfile newProfile;
-            try {
-                newProfile = SkullBlockEntity.fillProfileTextures(profile).get().orElse(null); // TODO: replace with CompletableFuture
-            } catch (InterruptedException | ExecutionException ex) {
-                throw new RuntimeException("Exception filling profile textures", ex);
-            }
+        if (!profile.getId().equals(Util.NIL_UUID)) {
+            ProfileResult newProfile = server.getSessionService().fetchProfile(profile.getId(), true);
             if (newProfile != null) {
-                profile = newProfile;
+                profile = newProfile.profile();
             }
         }
 
@@ -157,7 +150,7 @@
     @Nonnull
     public GameProfile buildGameProfile() {
         rebuildDirtyProperties();
-        GameProfile profile = new CraftGameProfile(uniqueId, name);
+        GameProfile profile = new GameProfile(uniqueId, name);
         profile.getProperties().putAll(properties);
         return profile;
     }
@@ -245,11 +238,11 @@
     @Override
     public Map<String, Object> serialize() {
         Map<String, Object> map = new LinkedHashMap<>();
-        if (uniqueId != null) {
-            map.put("uniqueId", uniqueId.toString());
+        if (getUniqueId() != null) {
+            map.put("uniqueId", getUniqueId().toString());
         }
-        if (name != null) {
-            map.put("name", name);
+        if (getName() != null) {
+            map.put("name", getName());
         }
         rebuildDirtyProperties();
         if (!properties.isEmpty()) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerTextures.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerTextures.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerTextures.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerTextures.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftPlayerTextures.java	(date 1703956060000)
@@ -5,15 +5,14 @@
 import com.google.gson.JsonPrimitive;
 import com.mojang.authlib.minecraft.MinecraftProfileTexture;
 import com.mojang.authlib.properties.Property;
-import org.bukkit.craftbukkit.v1_20_R3.util.JsonHelper;
-import org.bukkit.profile.PlayerTextures;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Locale;
 import java.util.Objects;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import org.bukkit.craftbukkit.v1_20_R3.util.JsonHelper;
+import org.bukkit.profile.PlayerTextures;
 
 final class CraftPlayerTextures implements PlayerTextures {
 
@@ -252,7 +251,7 @@
         // This produces a new textures property that does not contain any attributes that are specific to official
         // GameProfiles (such as the property signature, timestamp, profileId, playerName, etc.).
         // Information on the format of the textures property:
-        // * https://minecraft.fandom.com/wiki/Head#Item_data
+        // * https://minecraft.wiki/w/Head#Item_data
         // * https://wiki.vg/Mojang_API#UUID_to_Profile_and_Skin.2FCape
         // The order of Json object elements is important.
         JsonObject propertyData = new JsonObject();
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftProfileProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftProfileProperty.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftProfileProperty.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftProfileProperty.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/profile/CraftProfileProperty.java	(date 1703956060000)
@@ -10,16 +10,15 @@
 import com.mojang.authlib.yggdrasil.ServicesKeySet;
 import com.mojang.authlib.yggdrasil.ServicesKeyType;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-import org.bukkit.craftbukkit.v1_20_R3.configuration.ConfigSerializationUtil;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import java.net.Proxy;
 import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import org.bukkit.craftbukkit.v1_20_R3.configuration.ConfigSerializationUtil;
 
 final class CraftProfileProperty {
 
Index: src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
--- a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.server;
 
+import java.util.Set;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Event triggered for server broadcast messages such as from
  * {@link org.bukkit.Server#broadcast(String, String)}.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionEffectType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionEffectType.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionEffectType.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionEffectType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionEffectType.java	(date 1703956060000)
@@ -1,21 +1,37 @@
 package org.bukkit.craftbukkit.v1_20_R3.potion;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.Registry;
-import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.effect.MobEffect;
 import org.bukkit.Color;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
 import org.bukkit.craftbukkit.v1_20_R3.CraftRegistry;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
+import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftPotionEffectType extends PotionEffectType {
+
+    private final NamespacedKey key;
     private final MobEffect handle;
+    private final int id;
 
-    public CraftPotionEffectType(MobEffect handle) {
-        super(BuiltInRegistries.MOB_EFFECT.getId(handle) + 1, CraftNamespacedKey.fromMinecraft(BuiltInRegistries.MOB_EFFECT.getKey(handle)));
+    public CraftPotionEffectType(NamespacedKey key, MobEffect handle) {
+        this.key = key;
         this.handle = handle;
+        this.id = CraftRegistry.getMinecraftRegistry(Registries.MOB_EFFECT).getId(handle) + 1;
+    }
+
+    public MobEffect getHandle() {
+        return handle;
+    }
+
+    @NotNull
+    @Override
+    public NamespacedKey getKey() {
+        return key;
     }
 
     @Override
@@ -23,82 +39,55 @@
         return 1.0D;
     }
 
-    public MobEffect getHandle() {
-        return handle;
+    @Override
+    public int getId() {
+        return id;
     }
 
     @Override
     public String getName() {
-        switch (getId()) {
-        case 1:
-            return "SPEED";
-        case 2:
-            return "SLOW";
-        case 3:
-            return "FAST_DIGGING";
-        case 4:
-            return "SLOW_DIGGING";
-        case 5:
-            return "INCREASE_DAMAGE";
-        case 6:
-            return "HEAL";
-        case 7:
-            return "HARM";
-        case 8:
-            return "JUMP";
-        case 9:
-            return "CONFUSION";
-        case 10:
-            return "REGENERATION";
-        case 11:
-            return "DAMAGE_RESISTANCE";
-        case 12:
-            return "FIRE_RESISTANCE";
-        case 13:
-            return "WATER_BREATHING";
-        case 14:
-            return "INVISIBILITY";
-        case 15:
-            return "BLINDNESS";
-        case 16:
-            return "NIGHT_VISION";
-        case 17:
-            return "HUNGER";
-        case 18:
-            return "WEAKNESS";
-        case 19:
-            return "POISON";
-        case 20:
-            return "WITHER";
-        case 21:
-            return "HEALTH_BOOST";
-        case 22:
-            return "ABSORPTION";
-        case 23:
-            return "SATURATION";
-        case 24:
-            return "GLOWING";
-        case 25:
-            return "LEVITATION";
-        case 26:
-            return "LUCK";
-        case 27:
-            return "UNLUCK";
-        case 28:
-            return "SLOW_FALLING";
-        case 29:
-            return "CONDUIT_POWER";
-        case 30:
-            return "DOLPHINS_GRACE";
-        case 31:
-            return "BAD_OMEN";
-        case 32:
-            return "HERO_OF_THE_VILLAGE";
-        case 33:
-            return "DARKNESS";
-        default:
-            return "UNKNOWN_EFFECT_TYPE_" + getId();
-        }
+        return switch (getId()) {
+            case 1 -> "SPEED";
+            case 2 -> "SLOW";
+            case 3 -> "FAST_DIGGING";
+            case 4 -> "SLOW_DIGGING";
+            case 5 -> "INCREASE_DAMAGE";
+            case 6 -> "HEAL";
+            case 7 -> "HARM";
+            case 8 -> "JUMP";
+            case 9 -> "CONFUSION";
+            case 10 -> "REGENERATION";
+            case 11 -> "DAMAGE_RESISTANCE";
+            case 12 -> "FIRE_RESISTANCE";
+            case 13 -> "WATER_BREATHING";
+            case 14 -> "INVISIBILITY";
+            case 15 -> "BLINDNESS";
+            case 16 -> "NIGHT_VISION";
+            case 17 -> "HUNGER";
+            case 18 -> "WEAKNESS";
+            case 19 -> "POISON";
+            case 20 -> "WITHER";
+            case 21 -> "HEALTH_BOOST";
+            case 22 -> "ABSORPTION";
+            case 23 -> "SATURATION";
+            case 24 -> "GLOWING";
+            case 25 -> "LEVITATION";
+            case 26 -> "LUCK";
+            case 27 -> "UNLUCK";
+            case 28 -> "SLOW_FALLING";
+            case 29 -> "CONDUIT_POWER";
+            case 30 -> "DOLPHINS_GRACE";
+            case 31 -> "BAD_OMEN";
+            case 32 -> "HERO_OF_THE_VILLAGE";
+            case 33 -> "DARKNESS";
+            default -> getKey().toString();
+        };
+    }
+
+    @NotNull
+    @Override
+    public PotionEffect createEffect(int duration, int amplifier) {
+        return new PotionEffect(this, isInstant() ? 1 : (int) (duration * getDurationModifier()), amplifier);
     }
 
     @Override
@@ -111,12 +100,34 @@
         return Color.fromRGB(handle.getColor());
     }
 
+    @Override
+    public boolean equals(Object other) {
+        if (this == other) {
+            return true;
+        }
+
+        if (!(other instanceof PotionEffectType)) {
+            return false;
+        }
+
+        return getKey().equals(((PotionEffectType) other).getKey());
+    }
+
+    @Override
+    public int hashCode() {
+        return getKey().hashCode();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftPotionEffectType[" + getKey() + "]";
+    }
 
     public static PotionEffectType minecraftToBukkit(MobEffect minecraft) {
         Preconditions.checkArgument(minecraft != null);
 
-        Registry<MobEffect> registry = CraftRegistry.getMinecraftRegistry(Registries.MOB_EFFECT);
-        PotionEffectType bukkit = PotionEffectType.getByKey(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+        net.minecraft.core.Registry<MobEffect> registry = CraftRegistry.getMinecraftRegistry(Registries.MOB_EFFECT);
+        PotionEffectType bukkit = Registry.EFFECT.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
 
         Preconditions.checkArgument(bukkit != null);
 
@@ -126,7 +137,6 @@
     public static MobEffect bukkitToMinecraft(PotionEffectType bukkit) {
         Preconditions.checkArgument(bukkit != null);
 
-        return CraftRegistry.getMinecraftRegistry(Registries.MOB_EFFECT)
-                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        return ((CraftPotionEffectType) bukkit).getHandle();
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionUtil.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionUtil.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionUtil.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionUtil.java	(date 1703956060000)
@@ -3,8 +3,6 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.BiMap;
 import com.google.common.collect.ImmutableBiMap;
-import java.util.HashMap;
-import java.util.Map;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import org.bukkit.potion.PotionData;
@@ -14,83 +12,53 @@
 
 public class CraftPotionUtil {
 
-    public static Map<PotionType, String> mods = new HashMap<>();
-
-    private static final BiMap<PotionType, String> regular = ImmutableBiMap.<PotionType, String>builder()
-            .put(PotionType.UNCRAFTABLE, "empty")
-            .put(PotionType.WATER, "water")
-            .put(PotionType.MUNDANE, "mundane")
-            .put(PotionType.THICK, "thick")
-            .put(PotionType.AWKWARD, "awkward")
-            .put(PotionType.NIGHT_VISION, "night_vision")
-            .put(PotionType.INVISIBILITY, "invisibility")
-            .put(PotionType.JUMP, "leaping")
-            .put(PotionType.FIRE_RESISTANCE, "fire_resistance")
-            .put(PotionType.SPEED, "swiftness")
-            .put(PotionType.SLOWNESS, "slowness")
-            .put(PotionType.WATER_BREATHING, "water_breathing")
-            .put(PotionType.INSTANT_HEAL, "healing")
-            .put(PotionType.INSTANT_DAMAGE, "harming")
-            .put(PotionType.POISON, "poison")
-            .put(PotionType.REGEN, "regeneration")
-            .put(PotionType.STRENGTH, "strength")
-            .put(PotionType.WEAKNESS, "weakness")
-            .put(PotionType.LUCK, "luck")
-            .put(PotionType.TURTLE_MASTER, "turtle_master")
-            .put(PotionType.SLOW_FALLING, "slow_falling")
-            .build();
-    private static final BiMap<PotionType, String> upgradeable = ImmutableBiMap.<PotionType, String>builder()
-            .put(PotionType.JUMP, "strong_leaping")
-            .put(PotionType.SPEED, "strong_swiftness")
-            .put(PotionType.INSTANT_HEAL, "strong_healing")
-            .put(PotionType.INSTANT_DAMAGE, "strong_harming")
-            .put(PotionType.POISON, "strong_poison")
-            .put(PotionType.REGEN, "strong_regeneration")
-            .put(PotionType.STRENGTH, "strong_strength")
-            .put(PotionType.SLOWNESS, "strong_slowness")
-            .put(PotionType.TURTLE_MASTER, "strong_turtle_master")
+    private static final BiMap<PotionType, PotionType> upgradeable = ImmutableBiMap.<PotionType, PotionType>builder()
+            .put(PotionType.JUMP, PotionType.STRONG_LEAPING)
+            .put(PotionType.SPEED, PotionType.STRONG_SWIFTNESS)
+            .put(PotionType.INSTANT_HEAL, PotionType.STRONG_HEALING)
+            .put(PotionType.INSTANT_DAMAGE, PotionType.STRONG_HARMING)
+            .put(PotionType.POISON, PotionType.STRONG_POISON)
+            .put(PotionType.REGEN, PotionType.STRONG_REGENERATION)
+            .put(PotionType.STRENGTH, PotionType.STRONG_STRENGTH)
+            .put(PotionType.SLOWNESS, PotionType.STRONG_SLOWNESS)
+            .put(PotionType.TURTLE_MASTER, PotionType.STRONG_TURTLE_MASTER)
             .build();
-    private static final BiMap<PotionType, String> extendable = ImmutableBiMap.<PotionType, String>builder()
-            .put(PotionType.NIGHT_VISION, "long_night_vision")
-            .put(PotionType.INVISIBILITY, "long_invisibility")
-            .put(PotionType.JUMP, "long_leaping")
-            .put(PotionType.FIRE_RESISTANCE, "long_fire_resistance")
-            .put(PotionType.SPEED, "long_swiftness")
-            .put(PotionType.SLOWNESS, "long_slowness")
-            .put(PotionType.WATER_BREATHING, "long_water_breathing")
-            .put(PotionType.POISON, "long_poison")
-            .put(PotionType.REGEN, "long_regeneration")
-            .put(PotionType.STRENGTH, "long_strength")
-            .put(PotionType.WEAKNESS, "long_weakness")
-            .put(PotionType.TURTLE_MASTER, "long_turtle_master")
-            .put(PotionType.SLOW_FALLING, "long_slow_falling")
+    private static final BiMap<PotionType, PotionType> extendable = ImmutableBiMap.<PotionType, PotionType>builder()
+            .put(PotionType.NIGHT_VISION, PotionType.LONG_NIGHT_VISION)
+            .put(PotionType.INVISIBILITY, PotionType.LONG_INVISIBILITY)
+            .put(PotionType.JUMP, PotionType.LONG_LEAPING)
+            .put(PotionType.FIRE_RESISTANCE, PotionType.LONG_FIRE_RESISTANCE)
+            .put(PotionType.SPEED, PotionType.LONG_SWIFTNESS)
+            .put(PotionType.SLOWNESS, PotionType.LONG_SLOWNESS)
+            .put(PotionType.WATER_BREATHING, PotionType.LONG_WATER_BREATHING)
+            .put(PotionType.POISON, PotionType.LONG_POISON)
+            .put(PotionType.REGEN, PotionType.LONG_REGENERATION)
+            .put(PotionType.STRENGTH, PotionType.LONG_STRENGTH)
+            .put(PotionType.WEAKNESS, PotionType.LONG_WEAKNESS)
+            .put(PotionType.TURTLE_MASTER, PotionType.LONG_TURTLE_MASTER)
+            .put(PotionType.SLOW_FALLING, PotionType.LONG_SLOW_FALLING)
             .build();
 
-    public static String fromBukkit(PotionData data) {
-        if (mods.containsKey(data.getType())) {
-            return mods.get(data.getType());
-        }
-        String type;
+    public static PotionType fromBukkit(PotionData data) {
+        PotionType type;
         if (data.isUpgraded()) {
             type = upgradeable.get(data.getType());
         } else if (data.isExtended()) {
             type = extendable.get(data.getType());
         } else {
-            type = regular.get(data.getType());
+            type = data.getType();
         }
         Preconditions.checkNotNull(type, "Unknown potion type from data " + data);
 
-        return "minecraft:" + type;
+        return type;
     }
 
-    public static PotionData toBukkit(String type) {
+    public static PotionData toBukkit(PotionType type) {
         if (type == null) {
             return new PotionData(PotionType.UNCRAFTABLE, false, false);
         }
-        if (type.startsWith("minecraft:")) {
-            type = type.substring(10);
-        }
-        PotionType potionType = null;
+
+        PotionType potionType;
         potionType = extendable.inverse().get(type);
         if (potionType != null) {
             return new PotionData(potionType, true, false);
@@ -99,18 +67,8 @@
         if (potionType != null) {
             return new PotionData(potionType, false, true);
         }
-        potionType = regular.inverse().get(type);
-        if (potionType != null) {
-            return new PotionData(potionType, false, false);
-        }
-        if (mods.containsValue(type)) {
-            for (Map.Entry<PotionType, String> map : mods.entrySet()) {
-                if (map.getValue().equals(type)) {
-                    return new PotionData(map.getKey(), false, false);
-                }
-            }
-        }
-        return new PotionData(PotionType.UNCRAFTABLE, false, false);
+
+        return new PotionData(type, false, false);
     }
 
     public static MobEffectInstance fromBukkit(PotionEffect effect) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/BukkitCommandWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/BukkitCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/BukkitCommandWrapper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/BukkitCommandWrapper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/BukkitCommandWrapper.java	(date 1703956060000)
@@ -10,17 +10,16 @@
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.brigadier.suggestion.SuggestionsBuilder;
 import com.mojang.brigadier.tree.LiteralCommandNode;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.function.Predicate;
+import java.util.logging.Level;
 import net.minecraft.commands.CommandSourceStack;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 
-import java.util.List;
-import java.util.concurrent.CompletableFuture;
-import java.util.function.Predicate;
-import java.util.logging.Level;
-
 public class BukkitCommandWrapper implements com.mojang.brigadier.Command<CommandSourceStack>, Predicate<CommandSourceStack>, SuggestionProvider<CommandSourceStack> {
 
     private final CraftServer server;
@@ -40,12 +39,12 @@
 
     @Override
     public boolean test(CommandSourceStack wrapper) {
-        return command.testPermissionSilent(wrapper.banner$getBukkitSender());
+        return command.testPermissionSilent(wrapper.getBukkitSender());
     }
 
     @Override
     public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
-        CommandSender sender = context.getSource().banner$getBukkitSender();
+        CommandSender sender = context.getSource().getBukkitSender();
 
         try {
             return server.dispatchCommand(sender, context.getInput()) ? 1 : 0;
@@ -58,7 +57,7 @@
 
     @Override
     public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
-        List<String> results = server.tabComplete(context.getSource().banner$getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
+        List<String> results = server.tabComplete(context.getSource().getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
 
         // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
         builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ColouredConsoleSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ColouredConsoleSender.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ColouredConsoleSender.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ColouredConsoleSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ColouredConsoleSender.java	(date 1703956060000)
@@ -1,6 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.command;
 
-import net.minecrell.terminalconsole.TerminalConsoleAppender;
+import java.awt.Color;
+import java.util.EnumMap;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -9,16 +13,9 @@
 import org.fusesource.jansi.Ansi;
 import org.fusesource.jansi.Ansi.Attribute;
 
-import java.awt.*;
-import java.util.EnumMap;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
 public class ColouredConsoleSender extends CraftConsoleCommandSender {
     private final Map<ChatColor, String> replacements = new EnumMap<ChatColor, String>(ChatColor.class);
     private final ChatColor[] colors = ChatColor.values();
-    private final boolean jansiPassthrough;
     private static final char ANSI_ESC_CHAR = '\u001B';
     private static final String RGB_STRING = String.valueOf(ANSI_ESC_CHAR) + "[38;2;%d;%d;%dm";
     private static final Pattern RBG_TRANSLATE = Pattern.compile(String.valueOf(ChatColor.COLOR_CHAR) + "x(" + String.valueOf(ChatColor.COLOR_CHAR) + "[A-F0-9]){6}", Pattern.CASE_INSENSITIVE);
@@ -26,7 +23,6 @@
 
     protected ColouredConsoleSender() {
         super();
-        this.jansiPassthrough = Boolean.getBoolean("jansi.passthrough");
 
         replacements.put(ChatColor.BLACK, Ansi.ansi().a(Attribute.RESET).fg(Ansi.Color.BLACK).boldOff().toString());
         replacements.put(ChatColor.DARK_BLUE, Ansi.ansi().a(Attribute.RESET).fg(Ansi.Color.BLUE).boldOff().toString());
@@ -54,21 +50,8 @@
 
     @Override
     public void sendMessage(String message) {
-        // support jansi passthrough VM option when jansi doesn't detect an ANSI supported terminal
-        if (jansiPassthrough || TerminalConsoleAppender.isAnsiSupported()) {
-            if (!conversationTracker.isConversingModaly()) {
-                String result = convertRGBColors(message);
-                for (ChatColor color : colors) {
-                    if (replacements.containsKey(color)) {
-                        result = result.replaceAll("(?i)" + color.toString(), replacements.get(color));
-                    } else {
-                        result = result.replaceAll("(?i)" + color.toString(), "");
-                    }
-                }
-                LOGGER.info(result + Ansi.ansi().reset().toString());
-            }
-        } else {
-            super.sendMessage(message);
+        if (!this.conversationTracker.isConversingModaly()) {
+            LOGGER.info(message);
         }
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ConsoleCommandCompleter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ConsoleCommandCompleter.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ConsoleCommandCompleter.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ConsoleCommandCompleter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/ConsoleCommandCompleter.java	(date 1703956060000)
@@ -1,15 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.command;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
-import jline.console.completer.Completer;
-import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
-import org.bukkit.craftbukkit.v1_20_R3.util.Waitable;
-import org.bukkit.event.server.TabCompleteEvent;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.logging.Level;
+import jline.console.completer.Completer;
+import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
+import org.bukkit.craftbukkit.v1_20_R3.util.Waitable;
+import org.bukkit.event.server.TabCompleteEvent;
 
 public class ConsoleCommandCompleter implements Completer {
     private final CraftServer server;
@@ -31,7 +29,7 @@
                 return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
             }
         };
-        BukkitExtraConstants.bridge$processQueue.add(waitable);
+        this.server.getServer().processQueue.add(waitable);
         try {
             List<String> offers = waitable.get();
             if (offers == null) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftBlockCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftBlockCommandSender.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftBlockCommandSender.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftBlockCommandSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftBlockCommandSender.java	(date 1703956060000)
@@ -7,16 +7,32 @@
 import org.bukkit.command.BlockCommandSender;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage;
+import org.bukkit.permissions.PermissibleBase;
+import org.bukkit.permissions.ServerOperator;
 
 /**
  * Represents input from a command block
  */
 public class CraftBlockCommandSender extends ServerCommandSender implements BlockCommandSender {
+
+    // For performance reasons, use one PermissibleBase for all command blocks.
+    private static final PermissibleBase SHARED_PERM = new PermissibleBase(new ServerOperator() {
+
+        @Override
+        public boolean isOp() {
+            return true;
+        }
+
+        @Override
+        public void setOp(boolean value) {
+            throw new UnsupportedOperationException("Cannot change operator status of a block");
+        }
+    });
     private final CommandSourceStack block;
     private final BlockEntity tile;
 
     public CraftBlockCommandSender(CommandSourceStack commandBlockListenerAbstract, BlockEntity tile) {
-        super();
+        super(SHARED_PERM);
         this.block = commandBlockListenerAbstract;
         this.tile = tile;
     }
@@ -47,12 +63,12 @@
 
     @Override
     public boolean isOp() {
-        return true;
+        return SHARED_PERM.isOp();
     }
 
     @Override
     public void setOp(boolean value) {
-        throw new UnsupportedOperationException("Cannot change operator status of a block");
+        SHARED_PERM.setOp(value);
     }
 
     public CommandSourceStack getWrapper() {
Index: src/main/java/org/bukkit/event/inventory/HopperInventorySearchEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/HopperInventorySearchEvent.java b/src/main/java/org/bukkit/event/inventory/HopperInventorySearchEvent.java
--- a/src/main/java/org/bukkit/event/inventory/HopperInventorySearchEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/HopperInventorySearchEvent.java	(date 1703956060000)
@@ -92,4 +92,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftCommandMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftCommandMap.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftCommandMap.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftCommandMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftCommandMap.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.command;
 
+import java.util.Map;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.SimpleCommandMap;
 
-import java.util.Map;
-
 public class CraftCommandMap extends SimpleCommandMap {
 
     public CraftCommandMap(Server server) {
Index: src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
--- a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java	(date 1703956060000)
@@ -10,14 +10,7 @@
  */
 public class FurnaceSmeltEvent extends BlockCookEvent {
 
-    @Deprecated // Paper
     public FurnaceSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final ItemStack result) {
         super(furnace, source, result);
     }
-
-    // Paper start
-    public FurnaceSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable org.bukkit.inventory.CookingRecipe<?> recipe) {
-        super(furnace, source, result, recipe);
-    }
-    // Paper end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftConsoleCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftConsoleCommandSender.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftConsoleCommandSender.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/command/CraftConsoleCommandSender.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.command;
 
+import java.util.UUID;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.ChatColor;
@@ -9,8 +10,6 @@
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
 import org.bukkit.craftbukkit.v1_20_R3.conversations.ConversationTracker;
 
-import java.util.UUID;
-
 /**
  * Represents CLI input from a console
  */
Index: src/main/java/org/bukkit/event/server/ServerListPingEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.event.server;
 
 import com.google.common.base.Preconditions;
+import java.net.InetAddress;
+import java.util.Iterator;
 import org.bukkit.Bukkit;
 import org.bukkit.UndefinedNullability;
 import org.bukkit.entity.Player;
@@ -8,9 +10,6 @@
 import org.bukkit.util.CachedServerIcon;
 import org.jetbrains.annotations.NotNull;
 
-import java.net.InetAddress;
-import java.util.Iterator;
-
 /**
  * Called when a server list ping is coming in. Displayed players can be
  * checked and removed by {@link #iterator() iterating} over this event.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/legacy/CraftLegacy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/legacy/CraftLegacy.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/legacy/CraftLegacy.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/legacy/CraftLegacy.java	(date 1703956060000)
@@ -1,9 +1,14 @@
 package org.bukkit.craftbukkit.v1_20_R3.legacy;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
-import com.mohistmc.banner.fabric.BukkitRegistry;
+import com.mohistmc.mohist.forge.ForgeInjectBukkit;
 import com.mojang.serialization.Dynamic;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
 import net.minecraft.SharedConstants;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
@@ -11,6 +16,7 @@
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.datafix.fixes.BlockStateData;
 import net.minecraft.util.datafix.fixes.ItemIdFix;
@@ -22,17 +28,11 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import org.bukkit.Material;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.entity.EntityType;
 import org.bukkit.material.MaterialData;
 
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-
 /**
  * This class may seem unnecessarily slow and complicated/repetitive however it
  * is able to handle a lot more edge cases and invertible transformations (many
@@ -72,7 +72,7 @@
         MaterialData mappedData;
 
         if (material.isBlock()) {
-            Block block = CraftMagicNumbers.getBlock(material);
+            Block block = CraftBlockType.bukkitToMinecraft(material);
             BlockState blockData = block.defaultBlockState();
 
             // Try exact match first
@@ -231,7 +231,7 @@
         } else {
             try {
                 Material material = Material.valueOf(name);
-                if (material != null && BukkitRegistry.isMods(material.getKey())) {
+                if (material != null && ForgeInjectBukkit.isMods(material.getKey())) {
                     return material;
                 } else {
                     return Material.valueOf(Material.LEGACY_PREFIX + name);
@@ -248,7 +248,7 @@
         } else {
             try {
                 Material material = Material.getMaterial(name);
-                if (material != null && BukkitRegistry.isMods(material.getKey())) {
+                if (material != null && ForgeInjectBukkit.isMods(material.getKey())) {
                     return material;
                 } else {
                     return Material.getMaterial(Material.LEGACY_PREFIX + name);
@@ -265,7 +265,7 @@
         } else {
             try {
                 Material material = Material.matchMaterial(name);
-                if (material != null && BukkitRegistry.isMods(material.getKey())) {
+                if (material != null && ForgeInjectBukkit.isMods(material.getKey())) {
                     return material;
                 } else {
                     return Material.matchMaterial(Material.LEGACY_PREFIX + name);
@@ -283,7 +283,7 @@
     }
 
     public static String name(Material material) {
-        if (material.isFabricBlock || material.isFabricItem) {
+        if (ForgeInjectBukkit.isMods(material.getKey())) {
             return material.name();
         } else {
             return material.name().substring(Material.LEGACY_PREFIX.length());
@@ -300,7 +300,7 @@
 
     static {
         System.err.println("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!");
-        if (BukkitExtraConstants.getServer() != null && BukkitExtraConstants.getServer().isDebugging()) {
+        if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isDebugging()) {
             new Exception().printStackTrace();
         }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionBrewer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionBrewer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionBrewer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/potion/CraftPotionBrewer.java	(date 1703956060000)
@@ -1,37 +1,21 @@
 package org.bukkit.craftbukkit.v1_20_R3.potion;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Maps;
-import net.minecraft.world.effect.MobEffectInstance;
+import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.Collection;
 import org.bukkit.potion.PotionBrewer;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-
 public class CraftPotionBrewer implements PotionBrewer {
-    private static final Map<PotionType, Collection<PotionEffect>> cache = Maps.newHashMap();
-
     @Override
-    public Collection<PotionEffect> getEffects(PotionType damage, boolean upgraded, boolean extended) {
-        if (cache.containsKey(damage))
-            return cache.get(damage);
-
-        List<MobEffectInstance> mcEffects = net.minecraft.world.item.alchemy.Potion.byName(CraftPotionUtil.fromBukkit(new PotionData(damage, extended, upgraded))).getEffects();
+    public Collection<PotionEffect> getEffects(PotionType type, boolean upgraded, boolean extended) {
+        Preconditions.checkArgument(!type.getKey().getKey().startsWith("strong_"), "Strong potion type cannot be used directly, got %s", type.getKey());
+        Preconditions.checkArgument(!type.getKey().getKey().startsWith("long_"), "Extended potion type cannot be used directly, got %s", type.getKey());
 
-        ImmutableList.Builder<PotionEffect> builder = new ImmutableList.Builder<PotionEffect>();
-        for (MobEffectInstance effect : mcEffects) {
-            builder.add(CraftPotionUtil.toBukkit(effect));
-        }
-
-        cache.put(damage, builder.build());
-
-        return cache.get(damage);
+        return CraftPotionUtil.fromBukkit(new PotionData(type, upgraded, extended)).getPotionEffects();
     }
 
     @Override
Index: src/main/java/org/bukkit/event/server/TabCompleteEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
--- a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.event.server;
 
 import com.google.common.base.Preconditions;
+import java.util.List;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
@@ -8,8 +9,6 @@
 import org.bukkit.event.player.PlayerCommandSendEvent;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when a {@link CommandSender} of any description (ie: player or
  * console) attempts to tab complete.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftWither.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftWither.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftWither.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftWither.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftWither.java	(date 1703956060000)
@@ -63,6 +63,7 @@
     @Override
     public void setInvulnerabilityTicks(int ticks) {
         Preconditions.checkArgument(ticks >= 0, "ticks must be >=0");
+
         getHandle().setInvulnerableTicks(ticks);
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTrident.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTrident.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTrident.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTrident.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTrident.java	(date 1703956060000)
@@ -18,12 +18,12 @@
 
     @Override
     public ItemStack getItem() {
-        return CraftItemStack.asBukkitCopy(getHandle().tridentItem);
+        return CraftItemStack.asBukkitCopy(getHandle().pickupItemStack);
     }
 
     @Override
     public void setItem(ItemStack itemStack) {
-        getHandle().tridentItem = CraftItemStack.asNMSCopy(itemStack);
+        getHandle().pickupItemStack = CraftItemStack.asNMSCopy(itemStack);
     }
 
     @Override
Index: src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.entity;
 
+import java.util.Collections;
+import java.util.List;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * Called when an entity is about to be replaced by another entity.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTropicalFish.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTropicalFish.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTropicalFish.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTropicalFish.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTropicalFish.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
+import java.util.HashMap;
+import java.util.Map;
 import org.bukkit.DyeColor;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.TropicalFish;
 
-import java.util.HashMap;
-import java.util.Map;
-
 public class CraftTropicalFish extends CraftFish implements TropicalFish {
 
     public CraftTropicalFish(CraftServer server, net.minecraft.world.entity.animal.TropicalFish entity) {
Index: src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java	(date 1703956060000)
@@ -4,18 +4,16 @@
 import com.google.common.base.Functions;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.EnumMap;
+import java.util.Map;
+import java.util.Objects;
 import org.bukkit.Material;
-import org.bukkit.WorldBorder;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.EnumMap;
-import java.util.Map;
-import java.util.Objects;
-
 /**
  * Stores data for damage events
  */
@@ -262,7 +260,6 @@
      */
     public enum DamageCause {
 
-
         /**
          * Damage caused by /kill command
          * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillager.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillager.java	(date 1703956060000)
@@ -1,24 +1,23 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
-import com.mohistmc.banner.fabric.BukkitRegistry;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.world.entity.monster.ZombieVillager;
 import net.minecraft.world.entity.npc.VillagerProfession;
+import net.minecraft.world.entity.npc.VillagerType;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import org.bukkit.Location;
-import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.bukkit.craftbukkit.v1_20_R3.CraftRegistry;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.entity.Villager;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 
-import java.util.Locale;
-
 public class CraftVillager extends CraftAbstractVillager implements Villager {
 
     public CraftVillager(CraftServer server, net.minecraft.world.entity.npc.Villager entity) {
@@ -44,24 +43,24 @@
 
     @Override
     public Profession getProfession() {
-        return CraftVillager.nmsToBukkitProfession(getHandle().getVillagerData().getProfession());
+        return CraftProfession.minecraftToBukkit(getHandle().getVillagerData().getProfession());
     }
 
     @Override
     public void setProfession(Profession profession) {
         Preconditions.checkArgument(profession != null, "Profession cannot be null");
-        getHandle().setVillagerData(getHandle().getVillagerData().setProfession(CraftVillager.bukkitToNmsProfession(profession)));
+        getHandle().setVillagerData(getHandle().getVillagerData().setProfession(CraftProfession.bukkitToMinecraft(profession)));
     }
 
     @Override
     public Type getVillagerType() {
-        return Type.valueOf(BuiltInRegistries.VILLAGER_TYPE.getKey(getHandle().getVillagerData().getType()).getPath().toUpperCase(Locale.ROOT));
+        return CraftType.minecraftToBukkit(getHandle().getVillagerData().getType());
     }
 
     @Override
     public void setVillagerType(Type type) {
         Preconditions.checkArgument(type != null, "Type cannot be null");
-        getHandle().setVillagerData(getHandle().getVillagerData().setType(BuiltInRegistries.VILLAGER_TYPE.get(CraftNamespacedKey.toMinecraft(type.getKey()))));
+        getHandle().setVillagerData(getHandle().getVillagerData().setType(CraftType.bukkitToMinecraft(type)));
     }
 
     @Override
@@ -93,7 +92,7 @@
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
         Preconditions.checkArgument(location.getWorld().equals(getWorld()), "Cannot sleep across worlds");
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot sleep during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot sleep during world generation");
 
         BlockPos position = CraftLocation.toBlockPosition(location);
         BlockState iblockdata = getHandle().level().getBlockState(position);
@@ -108,7 +107,7 @@
     @Override
     public void wakeup() {
         Preconditions.checkState(isSleeping(), "Cannot wakeup if not sleeping");
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot wakeup during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot wakeup during world generation");
 
         getHandle().stopSleeping();
     }
@@ -120,17 +119,49 @@
 
     @Override
     public org.bukkit.entity.ZombieVillager zombify() {
-        ZombieVillager entityzombievillager = BukkitExtraConstants.zombifyVillager(getHandle().level().getMinecraftWorld(), getHandle(), getHandle().blockPosition(), isSilent(), CreatureSpawnEvent.SpawnReason.CUSTOM);
+        ZombieVillager entityzombievillager = Zombie.zombifyVillager(getHandle().level().getMinecraftWorld(), getHandle(), getHandle().blockPosition(), isSilent(), CreatureSpawnEvent.SpawnReason.CUSTOM);
         return (entityzombievillager != null) ? (org.bukkit.entity.ZombieVillager) entityzombievillager.getBukkitEntity() : null;
     }
 
-    public static Profession nmsToBukkitProfession(VillagerProfession nms) {
-        return BuiltInRegistries.VILLAGER_PROFESSION.getKey(nms).getNamespace().equals(NamespacedKey.MINECRAFT)
-                ? Profession.valueOf(BuiltInRegistries.VILLAGER_PROFESSION.getKey(nms).getPath().toUpperCase(Locale.ROOT))
-                : Profession.valueOf(BukkitRegistry.normalizeName(BuiltInRegistries.VILLAGER_PROFESSION.getKey(nms).toString()));
+    public static class CraftType {
+
+        public static Type minecraftToBukkit(VillagerType minecraft) {
+            Preconditions.checkArgument(minecraft != null);
+
+            net.minecraft.core.Registry<VillagerType> registry = CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_TYPE);
+            Type bukkit = Registry.VILLAGER_TYPE.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+
+            Preconditions.checkArgument(bukkit != null);
+
+            return bukkit;
+        }
+
+        public static VillagerType bukkitToMinecraft(Type bukkit) {
+            Preconditions.checkArgument(bukkit != null);
+
+            return CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_TYPE)
+                    .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        }
     }
+
+    public static class CraftProfession {
+
+        public static Profession minecraftToBukkit(VillagerProfession minecraft) {
+            Preconditions.checkArgument(minecraft != null);
+
+            net.minecraft.core.Registry<VillagerProfession> registry = CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_PROFESSION);
+            Profession bukkit = Registry.VILLAGER_PROFESSION.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+
+            Preconditions.checkArgument(bukkit != null);
+
+            return bukkit;
+        }
 
-    public static VillagerProfession bukkitToNmsProfession(Profession bukkit) {
-        return !BukkitRegistry.profession.containsKey(bukkit) ? BuiltInRegistries.VILLAGER_PROFESSION.get(CraftNamespacedKey.toMinecraft(bukkit.getKey())) : BuiltInRegistries.VILLAGER_PROFESSION.get(BukkitRegistry.profession.get(bukkit));
+        public static VillagerProfession bukkitToMinecraft(Profession bukkit) {
+            Preconditions.checkArgument(bukkit != null);
+
+            return CraftRegistry.getMinecraftRegistry(Registries.VILLAGER_PROFESSION)
+                    .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        }
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillagerZombie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillagerZombie.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillagerZombie.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftVillagerZombie.java	(date 1703956060000)
@@ -1,18 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.effect.MobEffects;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.ZombieVillager;
 
-import java.util.Locale;
-
 public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
 
     public CraftVillagerZombie(CraftServer server, net.minecraft.world.entity.monster.ZombieVillager entity) {
@@ -31,24 +26,24 @@
 
     @Override
     public Villager.Profession getVillagerProfession() {
-        return Villager.Profession.valueOf(BuiltInRegistries.VILLAGER_PROFESSION.getKey(getHandle().getVillagerData().getProfession()).getPath().toUpperCase(Locale.ROOT));
+        return CraftVillager.CraftProfession.minecraftToBukkit(getHandle().getVillagerData().getProfession());
     }
 
     @Override
     public void setVillagerProfession(Villager.Profession profession) {
         Preconditions.checkArgument(profession != null, "Villager.Profession cannot be null");
-        getHandle().setVillagerData(getHandle().getVillagerData().setProfession(BuiltInRegistries.VILLAGER_PROFESSION.get(new ResourceLocation(profession.name().toLowerCase(Locale.ROOT)))));
+        getHandle().setVillagerData(getHandle().getVillagerData().setProfession(CraftVillager.CraftProfession.bukkitToMinecraft(profession)));
     }
 
     @Override
     public Villager.Type getVillagerType() {
-        return Villager.Type.valueOf(BuiltInRegistries.VILLAGER_TYPE.getKey(getHandle().getVillagerData().getType()).getPath().toUpperCase(Locale.ROOT));
+        return CraftVillager.CraftType.minecraftToBukkit(getHandle().getVillagerData().getType());
     }
 
     @Override
     public void setVillagerType(Villager.Type type) {
         Preconditions.checkArgument(type != null, "Villager.Type cannot be null");
-        getHandle().setVillagerData(getHandle().getVillagerData().setType(BuiltInRegistries.VILLAGER_TYPE.get(CraftNamespacedKey.toMinecraft(type.getKey()))));
+        getHandle().setVillagerData(getHandle().getVillagerData().setType(CraftVillager.CraftType.bukkitToMinecraft(type)));
     }
 
     @Override
Index: src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.entity;
 
+import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
@@ -7,8 +8,6 @@
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when an entity explodes
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTameableAnimal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTameableAnimal.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTameableAnimal.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTameableAnimal.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTameableAnimal.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
+import java.util.UUID;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.Creature;
 import org.bukkit.entity.Tameable;
 
-import java.util.UUID;
-
 public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creature {
     public CraftTameableAnimal(CraftServer server, net.minecraft.world.entity.TamableAnimal entity) {
         super(server, entity);
Index: src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
--- a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.entity;
 
+import java.util.List;
 import org.bukkit.entity.AreaEffectCloud;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when a lingering potion applies it's effects. Happens
  * once every 5 ticks
Index: src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java b/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
--- a/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java	(date 1703956060000)
@@ -21,4 +21,4 @@
     public CreatureSpawner getSpawner() {
         return spawner;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.event.entity;
 
 import com.google.common.base.Function;
+import java.util.Map;
 import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Map;
-
 /**
  * Called when an entity is damaged by an entity
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownExpBottle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownExpBottle.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownExpBottle.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownExpBottle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownExpBottle.java	(date 1703956060000)
@@ -17,5 +17,4 @@
     public String toString() {
         return "net.minecraft.world.entity.projectile.ThrownExperienceBottle";
     }
-
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownPotion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownPotion.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownPotion.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownPotion.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftThrownPotion.java	(date 1703956060000)
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import java.util.Collection;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.item.alchemy.PotionUtils;
 import org.bukkit.Material;
@@ -12,8 +13,6 @@
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 
-import java.util.Collection;
-
 public class CraftThrownPotion extends CraftThrowableProjectile implements ThrownPotion {
     public CraftThrownPotion(CraftServer server, net.minecraft.world.entity.projectile.ThrownPotion entity) {
         super(server, entity);
@@ -37,7 +36,6 @@
     public void setItem(ItemStack item) {
         Preconditions.checkArgument(item != null, "ItemStack cannot be null");
         Preconditions.checkArgument(item.getType() == Material.LINGERING_POTION || item.getType() == Material.SPLASH_POTION, "ItemStack material must be Material.LINGERING_POTION or Material.SPLASH_POTION but was Material.%s", item.getType());
-
         getHandle().setItem(CraftItemStack.asNMSCopy(item));
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTippedArrow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTippedArrow.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTippedArrow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTippedArrow.java	(date 1703956060000)
@@ -2,18 +2,20 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import java.util.List;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import org.bukkit.Color;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionEffectType;
+import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionType;
 import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
 import org.bukkit.entity.Arrow;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
-
-import java.util.List;
+import org.bukkit.potion.PotionType;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftTippedArrow extends CraftArrow implements Arrow {
 
@@ -47,14 +49,14 @@
             getHandle().effects.remove(existing);
         }
         getHandle().addEffect(CraftPotionUtil.fromBukkit(effect));
-        getHandle().refreshEffects();
+        getHandle().updateColor();
         return true;
     }
 
     @Override
     public void clearCustomEffects() {
         getHandle().effects.clear();
-        getHandle().refreshEffects();
+        getHandle().updateColor();
     }
 
     @Override
@@ -94,19 +96,32 @@
             return false;
         }
         getHandle().effects.remove(existing);
-        getHandle().refreshEffects();
+        getHandle().updateColor();
         return true;
     }
 
     @Override
     public void setBasePotionData(PotionData data) {
         Preconditions.checkArgument(data != null, "PotionData cannot be null");
-        getHandle().setPotionType(CraftPotionUtil.fromBukkit(data));
+        this.getHandle().potion = CraftPotionType.bukkitToMinecraft(CraftPotionUtil.fromBukkit(data));
     }
 
     @Override
     public PotionData getBasePotionData() {
-        return CraftPotionUtil.toBukkit(getHandle().getPotionType());
+        return CraftPotionUtil.toBukkit(CraftPotionType.minecraftToBukkit(getHandle().potion));
+    }
+
+    public void setBasePotionType(@NotNull PotionType potionType) {
+        // TODO: 10/6/23 Change PotionType.UNCRAFTABLE to PotionType.EMPTY in error message
+        Preconditions.checkArgument(potionType != null, "PotionType cannot be null use PotionType.UNCRAFTABLE to represent no effect instead.");
+
+        getHandle().potion = CraftPotionType.bukkitToMinecraft(potionType);
+    }
+
+    @NotNull
+    @Override
+    public PotionType getBasePotionType() {
+        return CraftPotionType.minecraftToBukkit(getHandle().potion);
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTNTPrimed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTNTPrimed.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTNTPrimed.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTNTPrimed.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftTNTPrimed.java	(date 1703956060000)
@@ -13,22 +13,22 @@
 
     @Override
     public float getYield() {
-       return getHandle().bridge$yield();
+        return getHandle().yield;
     }
 
     @Override
     public boolean isIncendiary() {
-       return getHandle().bridge$isIncendiary();
+        return getHandle().isIncendiary;
     }
 
     @Override
     public void setIsIncendiary(boolean isIncendiary) {
-       getHandle().banner$setIsIncendiary(isIncendiary);
+        getHandle().isIncendiary = isIncendiary;
     }
 
     @Override
     public void setYield(float yield) {
-        getHandle().banner$setYield(yield);
+        getHandle().yield = yield;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSnowman.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSnowman.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSnowman.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSnowman.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSnowman.java	(date 1703956060000)
@@ -3,7 +3,7 @@
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.Snowman;
 
-public class CraftSnowman extends CraftGolem implements Snowman, io.papermc.paper.entity.PaperShearable { // Paper
+public class CraftSnowman extends CraftGolem implements Snowman {
     public CraftSnowman(CraftServer server, net.minecraft.world.entity.animal.SnowGolem entity) {
         super(server, entity);
     }
Index: src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.entity;
 
 import com.google.common.base.Function;
+import java.util.Map;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * Called when an entity is damaged by a block
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftShulkerBullet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftShulkerBullet.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftShulkerBullet.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftShulkerBullet.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftShulkerBullet.java	(date 1703956060000)
@@ -14,7 +14,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return getHandle().bridge$projectileSource();
+        return getHandle().projectileSource;
     }
 
     @Override
@@ -24,7 +24,7 @@
         } else {
             getHandle().setOwner(null);
         }
-        getHandle().banner$setProjectileSource(shooter);
+        getHandle().projectileSource = shooter;
     }
 
     @Override
@@ -34,7 +34,7 @@
 
     @Override
     public void setTarget(org.bukkit.entity.Entity target) {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot set target during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot set target during world generation");
         getHandle().setTarget(target == null ? null : ((CraftEntity) target).getHandle());
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSlime.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSlime.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSlime.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSlime.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSlime.java	(date 1703956060000)
@@ -28,16 +28,4 @@
     public String toString() {
         return "CraftSlime";
     }
-
-    // Paper start
-    @Override
-    public boolean canWander() {
-        return getHandle().canWander();
-    }
-
-    @Override
-    public void setWander(boolean canWander) {
-        getHandle().setWander(canWander);
-    }
-    // Paper end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSniffer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSniffer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSniffer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSniffer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSniffer.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Collection;
+import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import org.bukkit.Location;
@@ -8,9 +10,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
 import org.bukkit.entity.Sniffer;
 
-import java.util.Collection;
-import java.util.stream.Collectors;
-
 public class CraftSniffer extends CraftAnimals implements Sniffer {
 
     public CraftSniffer(CraftServer server, net.minecraft.world.entity.animal.sniffer.Sniffer entity) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftProjectile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftProjectile.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftProjectile.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftProjectile.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftProjectile.java	(date 1703956060000)
@@ -12,7 +12,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return getHandle().bridge$projectileSource();
+        return getHandle().projectileSource;
     }
 
     @Override
@@ -22,7 +22,7 @@
         } else {
             getHandle().setOwner(null);
         }
-        getHandle().banner$setProjectileSource(shooter);
+        getHandle().projectileSource = shooter;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRabbit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRabbit.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRabbit.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRabbit.java	(date 1703956060000)
@@ -1,9 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
-import net.minecraft.world.entity.ai.goal.GoalSelector;
-import net.minecraft.world.level.Level;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
-import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
 import org.bukkit.entity.Rabbit;
 
 public class CraftRabbit extends CraftAnimals implements Rabbit {
@@ -29,17 +26,7 @@
 
     @Override
     public void setRabbitType(Type type) {
-        net.minecraft.world.entity.animal.Rabbit entity = getHandle();
-        if (getRabbitType() == Type.THE_KILLER_BUNNY) {
-            // Reset goals and target finders.
-            Level world = ((CraftWorld) this.getWorld()).getHandle();
-            entity.goalSelector = new GoalSelector(world.getProfilerSupplier());
-            entity.targetSelector = new GoalSelector(world.getProfilerSupplier());
-            entity.registerGoals();
-            entity.setSpeedModifier(0.0D);
-        }
-
-        entity.setVariant(net.minecraft.world.entity.animal.Rabbit.Variant.values()[type.ordinal()]);
+        getHandle().setVariant(net.minecraft.world.entity.animal.Rabbit.Variant.values()[type.ordinal()]);
     }
 
     private static class CraftMagicMapping {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRaider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRaider.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRaider.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRaider.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftRaider.java	(date 1703956060000)
@@ -106,6 +106,6 @@
 
     @Override
     public Sound getCelebrationSound() {
-        return CraftSound.getBukkit(getHandle().getCelebrateSound());
+        return CraftSound.minecraftToBukkit(getHandle().getCelebrateSound());
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSheep.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSheep.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSheep.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSheep.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftSheep.java	(date 1703956060000)
@@ -4,7 +4,7 @@
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.Sheep;
 
-public class CraftSheep extends CraftAnimals implements Sheep, io.papermc.paper.entity.PaperShearable { // Paper
+public class CraftSheep extends CraftAnimals implements Sheep {
     public CraftSheep(CraftServer server, net.minecraft.world.entity.animal.Sheep entity) {
         super(server, entity);
     }
Index: src/main/java/org/bukkit/event/entity/ExpBottleEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java b/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java
--- a/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java	(date 1703956060000)
@@ -1,8 +1,12 @@
 package org.bukkit.event.entity;
 
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.ThrownExpBottle;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Called when a ThrownExpBottle hits and releases experience.
@@ -12,8 +16,13 @@
     private int exp;
     private boolean showEffect = true;
 
+    @Deprecated
     public ExpBottleEvent(@NotNull final ThrownExpBottle bottle, final int exp) {
-        super(bottle);
+        this(bottle, null, null, null, exp);
+    }
+
+    public ExpBottleEvent(@NotNull final ThrownExpBottle bottle, @Nullable Entity hitEntity, @Nullable Block hitBlock, @Nullable BlockFace hitFace, final int exp) {
+        super(bottle, hitEntity, hitBlock, hitFace);
         this.exp = exp;
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPiglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPiglin.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPiglin.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPiglin.java	(date 1703956060000)
@@ -1,18 +1,17 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Collections;
+import java.util.Set;
+import java.util.stream.Collectors;
 import net.minecraft.world.item.Item;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventory;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.entity.Piglin;
 import org.bukkit.inventory.Inventory;
 
-import java.util.Collections;
-import java.util.Set;
-import java.util.stream.Collectors;
-
 public class CraftPiglin extends CraftPiglinAbstract implements Piglin {
 
     public CraftPiglin(CraftServer server, net.minecraft.world.entity.monster.piglin.Piglin entity) {
@@ -33,43 +32,42 @@
     public boolean addBarterMaterial(Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
-        Item item = CraftMagicNumbers.getItem(material);
-        return getHandle().bridge$allowedBarterItems().add(item);
-
+        Item item = CraftItemType.bukkitToMinecraft(material);
+        return getHandle().allowedBarterItems.add(item);
     }
 
     @Override
     public boolean removeBarterMaterial(Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
-        Item item = CraftMagicNumbers.getItem(material);
-        return getHandle().bridge$allowedBarterItems().remove(item);
+        Item item = CraftItemType.bukkitToMinecraft(material);
+        return getHandle().allowedBarterItems.remove(item);
     }
 
     @Override
     public boolean addMaterialOfInterest(Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
-        Item item = CraftMagicNumbers.getItem(material);
-        return getHandle().bridge$interestItems().add(item);
+        Item item = CraftItemType.bukkitToMinecraft(material);
+        return getHandle().interestItems.add(item);
     }
 
     @Override
     public boolean removeMaterialOfInterest(Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
-        Item item = CraftMagicNumbers.getItem(material);
-        return getHandle().bridge$interestItems().remove(item);
+        Item item = CraftItemType.bukkitToMinecraft(material);
+        return getHandle().interestItems.remove(item);
     }
 
     @Override
     public Set<Material> getInterestList() {
-        return Collections.unmodifiableSet(getHandle().bridge$interestItems().stream().map(CraftMagicNumbers::getMaterial).collect(Collectors.toSet()));
+        return Collections.unmodifiableSet(getHandle().interestItems.stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
     }
 
     @Override
     public Set<Material> getBarterList() {
-        return Collections.unmodifiableSet(getHandle().bridge$allowedBarterItems().stream().map(CraftMagicNumbers::getMaterial).collect(Collectors.toSet()));
+        return Collections.unmodifiableSet(getHandle().allowedBarterItems.stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
     }
 
     @Override
Index: src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java b/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
--- a/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.entity;
 
+import java.util.List;
 import org.bukkit.entity.Piglin;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Stores all data related to the bartering interaction with a piglin.
  *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPlayer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPlayer.java	(date 1703956060000)
@@ -7,19 +7,43 @@
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
+import java.util.UUID;
+import java.util.WeakHashMap;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import net.md_5.bungee.api.chat.BaseComponent;
-import net.md_5.bungee.chat.ComponentSerializer;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.SectionPos;
-import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
-import net.minecraft.network.protocol.common.ClientboundResourcePackPacket;
+import net.minecraft.network.protocol.common.ClientboundResourcePackPopPacket;
+import net.minecraft.network.protocol.common.ClientboundResourcePackPushPacket;
 import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
 import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
@@ -149,30 +173,6 @@
 import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
-import javax.annotation.Nullable;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.ref.WeakReference;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.WeakHashMap;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
     private long firstPlayed = 0;
@@ -189,8 +189,6 @@
     private CraftWorldBorder clientWorldBorder = null;
     private BorderChangeListener clientWorldBorderListener = createWorldBorderListener();
 
-    private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
-
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
 
@@ -201,6 +199,12 @@
         return getHandle().getGameProfile();
     }
 
+    @Override
+    public void remove() {
+        // Will lead to an inconsistent player state if we remove the player as any other entity.
+        throw new UnsupportedOperationException(String.format("Cannot remove player %s, use Player#kickPlayer(String) instead.", getName()));
+    }
+
     @Override
     public boolean isOp() {
         return server.getHandle().isOp(getProfile());
@@ -296,12 +300,12 @@
 
     @Override
     public String getDisplayName() {
-        return getHandle().bridge$displayName();
+        return getHandle().displayName;
     }
 
     @Override
     public void setDisplayName(final String name) {
-        getHandle().banner$setDisplayName(name == null ? getName() : name);
+        getHandle().displayName = name == null ? getName() : name;
     }
 
     @Override
@@ -314,7 +318,7 @@
         if (name == null) {
             name = getName();
         }
-        getHandle().banner$setListName(name.equals(getName()) ? null : CraftChatMessage.fromStringOrNull(name));
+        getHandle().setTabListDisplayName(name.equals(getName()) ? null : CraftChatMessage.fromStringOrNull(name));
         for (ServerPlayer player : (List<ServerPlayer>) server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.connection.send(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, getHandle()));
@@ -384,12 +388,14 @@
     @Override
     public void kickPlayer(String message) {
         if (getHandle().connection == null) return;
+
         getHandle().connection.disconnect(message == null ? "" : message);
     }
 
     @Override
     public void setCompassTarget(Location loc) {
         Preconditions.checkArgument(loc != null, "Location cannot be null");
+
         if (getHandle().connection == null) return;
 
         // Do not directly assign here, from the packethandler we'll assign it.
@@ -398,7 +404,7 @@
 
     @Override
     public Location getCompassTarget() {
-        return getHandle().bridge$compassTarget();
+        return getHandle().compassTarget;
     }
 
     @Override
@@ -416,6 +422,17 @@
         return server.dispatchCommand(this, command);
     }
 
+
+    // Mohist start
+    public static AtomicBoolean ignoreOp = new AtomicBoolean(false);
+    @Override
+    public boolean performOpCommand(String command) {
+        Preconditions.checkArgument(command != null, "command cannot be null");
+        ignoreOp.set(true); // Mohist
+        return server.dispatchCommand(this, command);
+    }
+    // Mohist end
+
     @Override
     public void playNote(Location loc, byte instrument, byte note) {
         playNote(loc, Instrument.getByType(instrument), new Note(note));
@@ -429,28 +446,11 @@
 
         if (getHandle().connection == null) return;
 
-        String instrumentName = switch (instrument.ordinal()) {
-            case 0 -> "harp";
-            case 1 -> "basedrum";
-            case 2 -> "snare";
-            case 3 -> "hat";
-            case 4 -> "bass";
-            case 5 -> "flute";
-            case 6 -> "bell";
-            case 7 -> "guitar";
-            case 8 -> "chime";
-            case 9 -> "xylophone";
-            case 10 -> "iron_xylophone";
-            case 11 -> "cow_bell";
-            case 12 -> "didgeridoo";
-            case 13 -> "bit";
-            case 14 -> "banjo";
-            case 15 -> "pling";
-            case 16 -> "xylophone";
-            default -> null;
-        };
-        float f = (float) Math.pow(2.0D, (note.getId() - 12.0D) / 12.0D);
-        getHandle().connection.send(new ClientboundSoundPacket(BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect("block.note_block." + instrumentName)), net.minecraft.sounds.SoundSource.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f, getHandle().getRandom().nextLong()));
+        Sound instrumentSound = instrument.getSound();
+        if (instrumentSound == null) return;
+
+        float pitch = note.getPitch();
+        getHandle().connection.send(new ClientboundSoundPacket(CraftSound.bukkitToMinecraftHolder(instrumentSound), net.minecraft.sounds.SoundSource.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, pitch, getHandle().getRandom().nextLong()));
     }
 
     @Override
@@ -465,36 +465,34 @@
 
     @Override
     public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
-        if (loc == null || sound == null || category == null || getHandle().connection == null) return;
-
-        playSound0(loc, BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect(sound)), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch);
+        playSound(loc, sound, category, volume, pitch, getHandle().random.nextLong());
     }
 
     @Override
     public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        playSound(loc, sound, category, volume, pitch, getHandle().random.nextLong());
+    }
+
+    @Override
+    public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
+        if (loc == null || sound == null || category == null || getHandle().connection == null) return;
+
+        playSound0(loc, CraftSound.bukkitToMinecraftHolder(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch, seed);
+    }
+
+    @Override
+    public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
         if (loc == null || sound == null || category == null || getHandle().connection == null) return;
 
-        playSound0(loc, Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch);
+        playSound0(loc, Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch, seed);
     }
 
-    private void playSound0(Location loc, Holder<SoundEvent> soundEffectHolder, net.minecraft.sounds.SoundSource categoryNMS, float volume, float pitch) {
+    private void playSound0(Location loc, Holder<SoundEvent> soundEffectHolder, net.minecraft.sounds.SoundSource categoryNMS, float volume, float pitch, long seed) {
         Preconditions.checkArgument(loc != null, "Location cannot be null");
 
         if (getHandle().connection == null) return;
 
-        ClientboundSoundPacket packet = new ClientboundSoundPacket(soundEffectHolder, categoryNMS, loc.getX(), loc.getY(), loc.getZ(), volume, pitch, getHandle().getRandom().nextLong());
-        getHandle().connection.send(packet);
-    }
-
-    private void playSound0(org.bukkit.entity.Entity entity, Holder<SoundEvent> soundEffectHolder, net.minecraft.sounds.SoundSource categoryNMS, float volume, float pitch) {
-        Preconditions.checkArgument(entity != null, "Entity cannot be null");
-        Preconditions.checkArgument(soundEffectHolder != null, "Holder of SoundEffect cannot be null");
-        Preconditions.checkArgument(categoryNMS != null, "SoundCategory cannot be null");
-
-        if (getHandle().connection == null) return;
-        if (!(entity instanceof CraftEntity craftEntity)) return;
-
-        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(soundEffectHolder, categoryNMS, craftEntity.getHandle(), volume, pitch, getHandle().getRandom().nextLong());
+        ClientboundSoundPacket packet = new ClientboundSoundPacket(soundEffectHolder, categoryNMS, loc.getX(), loc.getY(), loc.getZ(), volume, pitch, seed);
         getHandle().connection.send(packet);
     }
 
@@ -510,16 +508,36 @@
 
     @Override
     public void playSound(org.bukkit.entity.Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
-        if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || getHandle().connection == null) return;
-
-        playSound0(entity, BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect(sound)), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch);
+        playSound(entity, sound, category, volume, pitch, getHandle().random.nextLong());
     }
-
     @Override
     public void playSound(org.bukkit.entity.Entity entity, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        playSound(entity, sound, category, volume, pitch, getHandle().random.nextLong());
+    }
+    @Override
+    public void playSound(org.bukkit.entity.Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
         if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || getHandle().connection == null) return;
-
-        playSound0(entity, Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch);
+        playSound0(entity, CraftSound.bukkitToMinecraftHolder(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch, seed);
+    }
+
+    @Override
+    public void playSound(org.bukkit.entity.Entity entity, String sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
+        if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || getHandle().connection == null) return;
+
+        playSound0(entity, Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch, seed);
+    }
+
+    private void playSound0(org.bukkit.entity.Entity entity, Holder<SoundEvent> soundEffectHolder, net.minecraft.sounds.SoundSource categoryNMS, float volume, float pitch, long seed) {
+        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+        Preconditions.checkArgument(soundEffectHolder != null, "Holder of SoundEffect cannot be null");
+        Preconditions.checkArgument(categoryNMS != null, "SoundCategory cannot be null");
+
+         if (getHandle().connection == null) return;
+        if (!(entity instanceof CraftEntity craftEntity)) return;
+
+        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(soundEffectHolder, categoryNMS, craftEntity.getHandle(), volume, pitch, seed);
+
+        getHandle().connection.send(packet);
     }
 
     @Override
@@ -563,6 +581,8 @@
         Preconditions.checkArgument(effect != null, "Effect cannot be null");
         Preconditions.checkArgument(loc != null, "Location cannot be null");
 
+        if (getHandle().connection == null) return;
+
         int packetData = effect.getId();
         ClientboundLevelEventPacket packet = new ClientboundLevelEventPacket(packetData, CraftLocation.toBlockPosition(loc), data, false);
         getHandle().connection.send(packet);
@@ -574,7 +594,7 @@
         if (data != null) {
             Preconditions.checkArgument(effect.getData() != null, "Effect.%s does not have a valid Data", effect);
             Preconditions.checkArgument(effect.getData().isAssignableFrom(data.getClass()), "%s data cannot be used for the %s effect", data.getClass().getName(), effect);
-        }else {
+        } else {
             // Special case: the axis is optional for ELECTRIC_SPARK
             Preconditions.checkArgument(effect.getData() == null || effect == Effect.ELECTRIC_SPARK, "Wrong kind of data for the %s effect", effect);
         }
@@ -633,11 +653,8 @@
         // Construct the packets using the data allocated above and send then to the players
         for (Map.Entry<SectionPos, ChunkSectionChanges> entry : changes.entrySet()) {
             ChunkSectionChanges chunkChanges = entry.getValue();
-            // Banner start
-            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), null);
-            packet.putBukkitPacket(chunkChanges.blockData().toArray(net.minecraft.world.level.block.state.BlockState[]::new));
+            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), chunkChanges.blockData().toArray(net.minecraft.world.level.block.state.BlockState[]::new));
             getHandle().connection.send(packet);
-            // Banner end
         }
     }
 
@@ -879,24 +896,6 @@
         getHandle().connection.send(packet);
     }
 
-    // Paper start
-    @Override
-    public void showWinScreen() {
-        if (getHandle().connection == null) return;
-        var packet = new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, 1);
-        getHandle().connection.send(packet);
-    }
-
-    @Override
-    public boolean hasSeenWinScreen() {
-        return getHandle().seenCredits;
-    }
-
-    @Override
-    public void setHasSeenWinScreen(boolean hasSeenWinScreen) {
-        getHandle().seenCredits = hasSeenWinScreen;
-    }
-    // Paper end
     @Override
     public void setRotation(float yaw, float pitch) {
         throw new UnsupportedOperationException("Cannot set rotation of players. Consider teleporting instead.");
@@ -1004,13 +1003,13 @@
 
     @Override
     public void setSleepingIgnored(boolean isSleeping) {
-        getHandle().banner$setFauxSleeping(isSleeping);
+        getHandle().fauxSleeping = isSleeping;
         ((CraftWorld) getWorld()).getHandle().updateSleepingPlayerList();
     }
 
     @Override
     public boolean isSleepingIgnored() {
-        return getHandle().bridge$fauxSleeping();
+        return getHandle().fauxSleeping;
     }
 
     @Override
@@ -1065,12 +1064,12 @@
 
     @Override
     public void incrementStatistic(Statistic statistic) {
-        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic);
+        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, getHandle());
     }
 
     @Override
     public void decrementStatistic(Statistic statistic) {
-        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic);
+        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, getHandle());
     }
 
     @Override
@@ -1080,27 +1079,27 @@
 
     @Override
     public void incrementStatistic(Statistic statistic, int amount) {
-        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, amount);
+        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, amount, getHandle());
     }
 
     @Override
     public void decrementStatistic(Statistic statistic, int amount) {
-        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, amount);
+        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, amount, getHandle());
     }
 
     @Override
     public void setStatistic(Statistic statistic, int newValue) {
-        CraftStatistic.setStatistic(getHandle().getStats(), statistic, newValue);
+        CraftStatistic.setStatistic(getHandle().getStats(), statistic, newValue, getHandle());
     }
 
     @Override
     public void incrementStatistic(Statistic statistic, Material material) {
-        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, material);
+        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, material, getHandle());
     }
 
     @Override
     public void decrementStatistic(Statistic statistic, Material material) {
-        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, material);
+        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, material, getHandle());
     }
 
     @Override
@@ -1110,27 +1109,27 @@
 
     @Override
     public void incrementStatistic(Statistic statistic, Material material, int amount) {
-        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, material, amount);
+        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, material, amount, getHandle());
     }
 
     @Override
     public void decrementStatistic(Statistic statistic, Material material, int amount) {
-        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, material, amount);
+        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, material, amount, getHandle());
     }
 
     @Override
     public void setStatistic(Statistic statistic, Material material, int newValue) {
-        CraftStatistic.setStatistic(getHandle().getStats(), statistic, material, newValue);
+        CraftStatistic.setStatistic(getHandle().getStats(), statistic, material, newValue, getHandle());
     }
 
     @Override
     public void incrementStatistic(Statistic statistic, EntityType entityType) {
-        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, entityType);
+        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, entityType, getHandle());
     }
 
     @Override
     public void decrementStatistic(Statistic statistic, EntityType entityType) {
-        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, entityType);
+        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, entityType, getHandle());
     }
 
     @Override
@@ -1140,28 +1139,28 @@
 
     @Override
     public void incrementStatistic(Statistic statistic, EntityType entityType, int amount) {
-        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, entityType, amount);
+        CraftStatistic.incrementStatistic(getHandle().getStats(), statistic, entityType, amount, getHandle());
     }
 
     @Override
     public void decrementStatistic(Statistic statistic, EntityType entityType, int amount) {
-        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, entityType, amount);
+        CraftStatistic.decrementStatistic(getHandle().getStats(), statistic, entityType, amount, getHandle());
     }
 
     @Override
     public void setStatistic(Statistic statistic, EntityType entityType, int newValue) {
-        CraftStatistic.setStatistic(getHandle().getStats(), statistic, entityType, newValue);
+        CraftStatistic.setStatistic(getHandle().getStats(), statistic, entityType, newValue, getHandle());
     }
 
     @Override
     public void setPlayerTime(long time, boolean relative) {
-        getHandle().banner$setTimeOffset(time);
-        getHandle().banner$setRelativeTime(relative);
+        getHandle().timeOffset = time;
+        getHandle().relativeTime = relative;
     }
 
     @Override
     public long getPlayerTimeOffset() {
-        return getHandle().bridge$timeOffset();
+        return getHandle().timeOffset;
     }
 
     @Override
@@ -1171,7 +1170,7 @@
 
     @Override
     public boolean isPlayerTimeRelative() {
-        return getHandle().bridge$relativeTime();
+        return getHandle().relativeTime;
     }
 
     @Override
@@ -1189,11 +1188,6 @@
         return getHandle().getPlayerWeather();
     }
 
-    @Override
-    public void resetPlayerWeather() {
-        getHandle().resetPlayerWeather();
-    }
-
     @Override
     public int getExpCooldown() {
         return getHandle().takeXpDelay;
@@ -1204,6 +1198,11 @@
         getHandle().takeXpDelay = CraftEventFactory.callPlayerXpCooldownEvent(this.getHandle(), ticks, PlayerExpCooldownChangeEvent.ChangeReason.PLUGIN).getNewCooldown();
     }
 
+    @Override
+    public void resetPlayerWeather() {
+        getHandle().resetPlayerWeather();
+    }
+
     @Override
     public boolean isBanned() {
         return ((ProfileBanList) server.getBanList(BanList.Type.PROFILE)).isBanned(getPlayerProfile());
@@ -1297,6 +1296,39 @@
         return (previousGameMode == null) ? null : GameMode.getByValue(previousGameMode.getId());
     }
 
+    @Override
+    // Paper start
+    public int applyMending(int amount) {
+        ServerPlayer handle = this.getHandle();
+        // Logic copied from EntityExperienceOrb and remapped to unobfuscated methods/properties
+        final var stackEntry = net.minecraft.world.item.enchantment.EnchantmentHelper
+                .getRandomItemWith(net.minecraft.world.item.enchantment.Enchantments.MENDING, handle);
+        final net.minecraft.world.item.ItemStack itemstack = stackEntry != null ? stackEntry.getValue() : net.minecraft.world.item.ItemStack.EMPTY;
+        if (!itemstack.isEmpty() && itemstack.getItem().canBeDepleted()) {
+            net.minecraft.world.entity.ExperienceOrb orb = net.minecraft.world.entity.EntityType.EXPERIENCE_ORB.create(handle.level());
+            orb.value = amount;
+            orb.spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.CUSTOM;
+            orb.setPosRaw(handle.getX(), handle.getY(), handle.getZ());
+            int i = Math.min(orb.xpToDurability(amount), itemstack.getDamageValue());
+            org.bukkit.event.player.PlayerItemMendEvent event = org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callPlayerItemMendEvent(handle, orb, itemstack, stackEntry.getKey(), i, orb::durabilityToXp); // Paper
+            i = event.getRepairAmount();
+            orb.discard();
+            if (!event.isCancelled()) {
+                amount -= event.getDurabilityToXpOperation().applyAsInt(i); // Paper
+                itemstack.setDamageValue(itemstack.getDamageValue() - i);
+            }
+        }
+        return amount;
+    }
+    @Override
+    public void giveExp(int exp, boolean applyMending) {
+        if (applyMending) {
+            exp = this.applyMending(exp);
+        }
+        // Paper end
+        this.getHandle().giveExperiencePoints(exp);
+    }
+
     @Override
     public void giveExp(int exp) {
         getHandle().giveExperiencePoints(exp);
@@ -1385,7 +1417,7 @@
     }
 
     private void hideEntity0(@Nullable Plugin plugin, org.bukkit.entity.Entity entity) {
-        Preconditions.checkArgument(entity != null, "Entity hidden cannot be null");
+        Validate.notNull(entity, "hidden entity cannot be null");
         if (getHandle().connection == null) return;
         if (equals(entity)) return;
 
@@ -1430,7 +1462,7 @@
         // Remove the hidden entity from this player user list, if they're on it
         if (other instanceof ServerPlayer) {
             ServerPlayer otherPlayer = (ServerPlayer) other;
-            if (otherPlayer.bridge$sentListPacket()) {
+            if (otherPlayer.sentListPacket) {
                 getHandle().connection.send(new ClientboundPlayerInfoRemovePacket(List.of(otherPlayer.getUUID())));
             }
         }
@@ -1615,11 +1647,10 @@
 
             if (data.contains("newExp")) {
                 ServerPlayer handle = getHandle();
-                handle.banner$setNewExp(data.getInt("newExp"));
-                handle.banner$setNewTotalExp(data.getInt("newTotalExp"));
-                handle.banner$setNewLevel(data.getInt("newLevel"));
-                handle.banner$setExpToDrop(data.getInt("expToDrop"));
-                handle.banner$setKeepLevel(data.getBoolean("keepLevel"));
+                handle.newExp = data.getInt("newExp");
+                handle.newTotalExp = data.getInt("newTotalExp");
+                handle.newLevel = data.getInt("newLevel");
+                handle.keepLevel = data.getBoolean("keepLevel");
             }
         }
     }
@@ -1631,11 +1662,10 @@
 
         CompoundTag data = nbttagcompound.getCompound("bukkit");
         ServerPlayer handle = getHandle();
-        data.putInt("newExp", handle.bridge$newExp());
-        data.putInt("newTotalExp", handle.bridge$newTotalExp());
-        data.putInt("newLevel", handle.bridge$newLevel());
-        data.putInt("expToDrop", handle.bridge$expToDrop());
-        data.putBoolean("keepLevel", handle.bridge$keepLevel());
+        data.putInt("newExp", handle.newExp);
+        data.putInt("newTotalExp", handle.newTotalExp);
+        data.putInt("newLevel", handle.newLevel);
+        data.putBoolean("keepLevel", handle.keepLevel);
         data.putLong("firstPlayed", getFirstPlayed());
         data.putLong("lastPlayed", System.currentTimeMillis());
         data.putString("lastKnownName", handle.getScoreboardName());
@@ -1699,7 +1729,12 @@
 
     @Override
     public void setResourcePack(String url) {
-        setResourcePack(url);
+        setResourcePack(url, null);
+    }
+
+    @Override
+    public void setResourcePack(String url, byte[] hash) {
+        setResourcePack(url, hash, false);
     }
 
     @Override
@@ -1715,26 +1750,38 @@
     @Override
     public void setResourcePack(String url, byte[] hash, String prompt, boolean force) {
         Preconditions.checkArgument(url != null, "Resource pack URL cannot be null");
+
+        setResourcePack(UUID.nameUUIDFromBytes(url.getBytes(StandardCharsets.UTF_8)), url, hash, prompt, force);
+    }
+
+    @Override
+    public void setResourcePack(UUID id, String url, byte[] hash, String prompt, boolean force) {
+        Preconditions.checkArgument(url != null, "Resource pack URL cannot be null");
+
         if (hash != null) {
             Preconditions.checkArgument(hash.length == 20, "Resource pack hash should be 20 bytes long but was %s", hash.length);
 
-            getHandle().connection.send(new ClientboundResourcePackPacket(url, BaseEncoding.base16().lowerCase().encode(hash), force, CraftChatMessage.fromStringOrNull(prompt, true)));
+            getHandle().connection.send(new ClientboundResourcePackPushPacket(id, url, BaseEncoding.base16().lowerCase().encode(hash), force, CraftChatMessage.fromStringOrNull(prompt, true)));
         } else {
-            getHandle().connection.send(new ClientboundResourcePackPacket(url, "", force, CraftChatMessage.fromStringOrNull(prompt, true)));
+            getHandle().connection.send(new ClientboundResourcePackPushPacket(id, url, "", force, CraftChatMessage.fromStringOrNull(prompt, true)));
         }
     }
 
     @Override
-    public void setResourcePack(String url, byte[] hash) {
-        Validate.notNull(url, "Resource pack URL cannot be null");
-        Validate.notNull(hash, "Resource pack hash cannot be null");
-        Validate.isTrue(hash.length == 20, "Resource pack hash should be 20 bytes long but was " + hash.length);
+    public void removeResourcePack(UUID id) {
+        Preconditions.checkArgument(id != null, "Resource pack id cannot be null");
+        if (getHandle().connection == null) return;
+        getHandle().connection.send(new ClientboundResourcePackPopPacket(Optional.of(id)));
+    }
 
-        getHandle().connection.send(new ClientboundResourcePackPacket(url, BaseEncoding.base16().lowerCase().encode(hash), false, null));
+    @Override
+    public void removeResourcePacks() {
+        if (getHandle().connection == null) return;
+        getHandle().connection.send(new ClientboundResourcePackPopPacket(Optional.empty()));
     }
 
     public void addChannel(String channel) {
-        Preconditions.checkState(DISABLE_CHANNEL_LIMIT || channels.size() < 1024, "Cannot register channel '%s'. Too many channels registered!", channel);// Banner - Increase bukkit channels cap, original 128
+        // Preconditions.checkState(channels.size() < 1024, "Cannot register channel '%s'. Too many channels registered!", channel);
         channel = StandardMessenger.validateAndCorrectChannel(channel);
         if (channels.add(channel)) {
             server.getPluginManager().callEvent(new PlayerRegisterChannelEvent(this, channel));
@@ -1815,13 +1862,12 @@
 
     @Override
     public void setFlying(boolean value) {
-        boolean needsUpdate = getHandle().getAbilities().flying != value; // Paper - Only refresh abilities if needed
         if (!getAllowFlight()) {
             Preconditions.checkArgument(!value, "Player is not allowed to fly (check #getAllowFlight())");
         }
 
         getHandle().getAbilities().flying = value;
-        if (needsUpdate) this.getHandle().onUpdateAbilities(); // Paper - Only refresh abilities if needed
+        getHandle().onUpdateAbilities();
     }
 
     @Override
@@ -1908,9 +1954,6 @@
     public void setScoreboard(Scoreboard scoreboard) {
         Preconditions.checkArgument(scoreboard != null, "Scoreboard cannot be null");
         Preconditions.checkState(getHandle().connection != null, "Cannot set scoreboard yet (invalid player connection)");
-        if (getHandle().connection.isDisconnected()) {
-            // throw new IllegalStateException("Cannot set scoreboard for invalid CraftPlayer"); // Spigot - remove this as Mojang's semi asynchronous Netty implementation can lead to races
-        }
 
         this.server.getScoreboardManager().setPlayerBoard(this, scoreboard);
     }
@@ -1972,7 +2015,7 @@
         }
         getHandle().getEntityData().set(LivingEntity.DATA_HEALTH_ID, (float) getScaledHealth());
 
-        getHandle().banner$setMaxHealthCache(getMaxHealth());
+        getHandle().maxHealthCache = getMaxHealth();
     }
 
     @Override
@@ -1980,7 +2023,6 @@
         getHandle().connection.send(new ClientboundSetHealthPacket((float) health, foodLevel, saturation));
     }
 
-    @Override
     public void sendHealthUpdate() {
         FoodData foodData = getHandle().getFoodData();
         sendHealthUpdate(getScaledHealth(), foodData.getFoodLevel(), foodData.getSaturationLevel());
@@ -2048,6 +2090,11 @@
         getHandle().connection.send(packetReset);
     }
 
+    public void restore(CraftPlayer player) {
+        setDisplayName(player.getDisplayName());
+        player.setHandle(getHandle());
+    }
+
     @Override
     public void spawnParticle(Particle particle, Location location, int count) {
         spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count);
@@ -2105,11 +2152,14 @@
 
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
+        particle = CraftParticle.convertLegacy(particle);
+        data = CraftParticle.convertLegacy(data);
         if (data != null) {
             Preconditions.checkArgument(particle.getDataType().isInstance(data), "data (%s) should be %s", data.getClass(), particle.getDataType());
         }
-        ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.toNMS(particle, data), true, (float) x, (float) y, (float) z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count);
+        ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.createParticleParam(particle, data), true, (float) x, (float) y, (float) z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count);
         getHandle().connection.send(packetplayoutworldparticles);
+
     }
 
     @Override
@@ -2128,30 +2178,22 @@
         return (getHandle().requestedViewDistance() == 0) ? Bukkit.getViewDistance() : getHandle().requestedViewDistance();
     }
 
+    // Paper start
+    @Override
+    public java.util.Locale locale() {
+        return net.kyori.adventure.translation.Translator.parseLocale(this.getHandle().getLanguage());
+    }
+    // Paper end
+
     @Override
     public int getPing() {
-        return getHandle().connection.latency;
+        return getHandle().connection.latency();
     }
 
     @Override
     public String getLocale() {
-        // Paper start - Locale change event
-        final String locale = this.getHandle().bridge$locale();
-        return locale != null ? locale : "en_us";
-        // Paper end
-    }
-
-    // Paper start
-    @Override
-    public void setAffectsSpawning(boolean affects) {
-        this.getHandle().banner$setAffectsSpawning(affects);
+        return getHandle().getLanguage();
     }
-
-    @Override
-    public boolean getAffectsSpawning() {
-        return this.getHandle().bridge$affectsSpawning();
-    }
-    // Paper end
 
     @Override
     public void updateCommands() {
@@ -2190,7 +2232,7 @@
 
     @Override
     public boolean isAllowingServerListings() {
-        return  getHandle().allowsListing();
+        return getHandle().allowsListing();
     }
 
     // Spigot start
@@ -2199,17 +2241,7 @@
         @Override
         public InetSocketAddress getRawAddress()
         {
-            return (InetSocketAddress) getHandle().connection.connection.getRawAddress();
-        }
-
-        @Override
-        public boolean getCollidesWithEntities() {
-            return CraftPlayer.this.isCollidable();
-        }
-
-        @Override
-        public void setCollidesWithEntities(boolean collides) {
-            CraftPlayer.this.setCollidable(collides);
+            return (InetSocketAddress) getHandle().connection.getRawAddress();
         }
 
         @Override
@@ -2217,23 +2249,20 @@
         {
             if ( getHealth() <= 0 && isOnline() )
             {
-                server.getServer().getPlayerList().respawn( getHandle(), false, PlayerRespawnEvent.RespawnReason.PLUGIN );
+
+                server.getServer().getPlayerList().respawn( getHandle(), false, PlayerRespawnEvent.RespawnReason.PLUGIN);
             }
         }
 
         @Override
-        public Set<Player> getHiddenPlayers()
-        {
+        public Set<Player> getHiddenPlayers() {
             Set<Player> ret = new HashSet<>();
-            for ( Player p : getServer().getOnlinePlayers() )
-            {
-                if ( !CraftPlayer.this.canSee(p) )
-                {
-                    ret.add( p );
+            for (Player p : getServer().getOnlinePlayers()) {
+                if (!CraftPlayer.this.canSee(p)) {
+                    ret.add(p);
                 }
             }
-
-            return java.util.Collections.unmodifiableSet( ret );
+            return java.util.Collections.unmodifiableSet(ret);
         }
 
         @Override
@@ -2274,12 +2303,10 @@
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
             if ( getHandle().connection == null ) return;
-            getHandle().connection.send(new
-                    net.minecraft.network.protocol.game.ClientboundSystemChatPacket(
-                    Component.Serializer.fromJson(ComponentSerializer.
-                                    toString(components)),
-                    position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));
+
+            getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(components, position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));
         }
+
     };
 
     public Player.Spigot spigot()
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMushroomCow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMushroomCow.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMushroomCow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMushroomCow.java	(date 1703956060000)
@@ -4,7 +4,7 @@
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.MushroomCow;
 
-public class CraftMushroomCow extends CraftCow implements MushroomCow, io.papermc.paper.entity.PaperShearable { // Paper
+public class CraftMushroomCow extends CraftCow implements MushroomCow {
     public CraftMushroomCow(CraftServer server, net.minecraft.world.entity.animal.MushroomCow entity) {
         super(server, entity);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPainting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPainting.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPainting.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPainting.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftPainting.java	(date 1703956060000)
@@ -16,8 +16,7 @@
 
     @Override
     public Art getArt() {
-        Holder<PaintingVariant> art = getHandle().getVariant();
-        return CraftArt.NotchToBukkit(art);
+        return CraftArt.minecraftHolderToBukkit(getHandle().getVariant());
     }
 
     @Override
@@ -29,9 +28,9 @@
     public boolean setArt(Art art, boolean force) {
         net.minecraft.world.entity.decoration.Painting painting = this.getHandle();
         Holder<PaintingVariant> oldArt = painting.getVariant();
-        painting.setVariant(CraftArt.BukkitToNotch(art));
+        painting.setVariant(CraftArt.bukkitToMinecraftHolder(art));
         painting.setDirection(painting.getDirection());
-        if (!force && !getHandle().bridge$generation() && !painting.survives()) {
+        if (!force && !getHandle().generation && !painting.survives()) {
             // Revert painting since it doesn't fit
             painting.setVariant(oldArt);
             painting.setDirection(painting.getDirection());
Index: src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java	(date 1703956060000)
@@ -1,15 +1,18 @@
 package org.bukkit.event.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Map;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Called when a splash potion hits an area
@@ -19,8 +22,13 @@
     private boolean cancelled;
     private final Map<LivingEntity, Double> affectedEntities;
 
+    @Deprecated
     public PotionSplashEvent(@NotNull final ThrownPotion potion, @NotNull final Map<LivingEntity, Double> affectedEntities) {
-        super(potion);
+        this(potion, null, null, null, affectedEntities);
+    }
+
+    public PotionSplashEvent(@NotNull final ThrownPotion potion, @Nullable Entity hitEntity, @Nullable Block hitBlock, @Nullable BlockFace hitFace, @NotNull final Map<LivingEntity, Double> affectedEntities) {
+        super(potion, hitEntity, hitBlock, hitFace);
 
         this.affectedEntities = affectedEntities;
     }
Index: src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.entity;
 
+import java.util.List;
 import org.bukkit.PortalType;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.LivingEntity;
@@ -8,8 +9,6 @@
 import org.bukkit.event.world.PortalCreateEvent;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Thrown when a Living Entity creates a portal in a world.
  *
Index: src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
--- a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java	(date 1703956060000)
@@ -1,10 +1,14 @@
 package org.bukkit.event.entity;
 
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
 import org.bukkit.entity.AreaEffectCloud;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Called when a splash potion hits an area
@@ -14,8 +18,13 @@
     private boolean cancelled;
     private final AreaEffectCloud entity;
 
+    @Deprecated
     public LingeringPotionSplashEvent(@NotNull final ThrownPotion potion, @NotNull final AreaEffectCloud entity) {
-        super(potion);
+        this(potion, null, null, null, entity);
+    }
+
+    public LingeringPotionSplashEvent(@NotNull final ThrownPotion potion, @Nullable Entity hitEntity, @Nullable Block hitBlock, @Nullable BlockFace hitFace, @NotNull final AreaEffectCloud entity) {
+        super(potion, hitEntity, hitBlock, hitFace);
         this.entity = entity;
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecartCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecartCommand.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecartCommand.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecartCommand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecartCommand.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
+import java.util.Set;
 import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
@@ -12,8 +13,6 @@
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
-import java.util.Set;
-
 public class CraftMinecartCommand extends CraftMinecart implements CommandMinecart {
     private final PermissibleBase perm = new PermissibleBase(this);
 
Index: src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.entity;
 
+import java.util.List;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Thrown whenever a {@link Player} dies
  */
@@ -40,6 +39,18 @@
         return (Player) entity;
     }
 
+    // Paper start
+    /**
+     * Clarity method for getting the player. Not really needed except
+     * for reasons of clarity.
+     *
+     * @return Player who is involved in this event
+     */
+    @NotNull
+    public Player getPlayer() {
+        return getEntity();
+    }
+
     /**
      * Set the death message that will appear to everyone on the server.
      *
@@ -166,4 +177,11 @@
     public boolean getKeepInventory() {
         return keepInventory;
     }
+
+    private List<ItemStack> itemsToKeep = new java.util.ArrayList<>();
+
+    @NotNull
+    public List<ItemStack> getItemsToKeep() {
+        return itemsToKeep;
+    }
 }
Index: src/main/java/org/bukkit/event/entity/PigZapEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java	(date 1703956060000)
@@ -1,23 +1,25 @@
 package org.bukkit.event.entity;
 
-import com.destroystokyo.paper.event.entity.EntityZapEvent;
+import java.util.Collections;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.entity.Pig;
 import org.bukkit.entity.PigZombie;
 import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * Stores data for pigs being zapped
  */
-public class PigZapEvent extends EntityZapEvent implements Cancellable {
-    //private static final HandlerList handlers = new HandlerList();
+public class PigZapEvent extends EntityTransformEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
     private final PigZombie pigzombie;
     private final LightningStrike bolt;
 
     public PigZapEvent(@NotNull final Pig pig, @NotNull final LightningStrike bolt, @NotNull final PigZombie pigzombie) {
-        super(pig, bolt, pigzombie);
+        super(pig, Collections.singletonList((Entity) pigzombie), TransformReason.LIGHTNING);
         this.bolt = bolt;
         this.pigzombie = pigzombie;
     }
@@ -61,8 +63,6 @@
         return pigzombie;
     }
 
-    // Paper start
-    /*
     @NotNull
     @Override
     public HandlerList getHandlers() {
@@ -73,6 +73,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-    */
-    // Paper end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMob.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMob.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMob.java	(date 1703956060000)
@@ -19,7 +19,7 @@
 
     @Override
     public void setTarget(LivingEntity target) {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot set target during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot set target during world generation");
         net.minecraft.world.entity.Mob entity = getHandle();
         if (target == null) {
             entity.setTarget(null, null, false);
@@ -37,18 +37,18 @@
 
     @Override
     public void setAware(boolean aware) {
-        getHandle().banner$setAware(aware);
+        getHandle().aware = aware;
     }
 
     @Override
     public boolean isAware() {
-        return getHandle().bridge$aware();
+        return getHandle().aware;
     }
 
     @Override
     public Sound getAmbientSound() {
         SoundEvent sound = getHandle().getAmbientSound0();
-        return (sound != null) ? CraftSound.getBukkit(sound) : null;
+        return (sound != null) ? CraftSound.minecraftToBukkit(sound) : null;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLightningStrike.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLightningStrike.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLightningStrike.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLightningStrike.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLightningStrike.java	(date 1703956060000)
@@ -1,7 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
+import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.LightningStrike;
+import org.bukkit.entity.Player;
 
 public class CraftLightningStrike extends CraftEntity implements LightningStrike {
     public CraftLightningStrike(final CraftServer server, final net.minecraft.world.entity.LightningBolt entity) {
@@ -13,6 +15,31 @@
         return getHandle().visualOnly;
     }
 
+    public int getFlashes() {
+        return getHandle().flashes;
+    }
+
+    public void setFlashes(int flashes) {
+        getHandle().flashes = flashes;
+    }
+
+    public int getLifeTicks() {
+        return getHandle().life;
+    }
+
+    public void setLifeTicks(int ticks) {
+        getHandle().life = ticks;
+    }
+
+    public Player getCausingPlayer() {
+        ServerPlayer player = getHandle().getCause();
+        return (player != null) ? player.getBukkitEntity() : null;
+    }
+
+    public void setCausingPlayer(Player player) {
+        getHandle().setCause((player != null) ? ((CraftPlayer) player).getHandle() : null);
+    }
+
     @Override
     public net.minecraft.world.entity.LightningBolt getHandle() {
         return (net.minecraft.world.entity.LightningBolt) entity;
@@ -23,14 +50,13 @@
         return "CraftLightningStrike";
     }
 
-
     // Spigot start
     private final LightningStrike.Spigot spigot = new LightningStrike.Spigot() {
 
         @Override
         public boolean isSilent()
         {
-            return getHandle().bridge$isSilent();
+            return getHandle().isSilent;
         }
     };
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLivingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLivingEntity.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLivingEntity.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLivingEntity.java	(date 1703956060000)
@@ -2,6 +2,12 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Sets;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -26,8 +32,8 @@
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionEffectType;
-import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
 import org.bukkit.entity.AbstractArrow;
+import org.bukkit.entity.Arrow;
 import org.bukkit.entity.DragonFireball;
 import org.bukkit.entity.Egg;
 import org.bukkit.entity.EnderPearl;
@@ -50,13 +56,13 @@
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
+import org.bukkit.entity.WindCharge;
 import org.bukkit.entity.WitherSkull;
 import org.bukkit.entity.memory.MemoryKey;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
@@ -64,13 +70,6 @@
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     private CraftEntityEquipment equipment;
 
@@ -93,7 +92,7 @@
         Preconditions.checkArgument(health >= 0 && health <= this.getMaxHealth(), "Health value (%s) must be between 0 and %s", health, this.getMaxHealth());
 
         // during world generation, we don't want to run logic for dropping items and xp
-        if (getHandle().bridge$generation() && health == 0) {
+        if (getHandle().generation && health == 0) {
             getHandle().discard();
             return;
         }
@@ -149,7 +148,7 @@
     }
 
     private List<Block> getLineOfSight(Set<Material> transparent, int maxDistance, int maxLength) {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot get line of sight during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot get line of sight during world generation");
         if (transparent == null) {
             transparent = Sets.newHashSet(Material.AIR, Material.CAVE_AIR, Material.VOID_AIR);
         }
@@ -183,6 +182,27 @@
         return blocks.get(0);
     }
 
+    public Entity getTargetEntity(int maxDistance, boolean ignoreBlocks) {
+        net.minecraft.world.phys.EntityHitResult rayTrace = rayTraceEntity(maxDistance, ignoreBlocks);
+        return rayTrace == null ? null : rayTrace.getEntity().getBukkitEntity();
+    }
+    public net.minecraft.world.phys.EntityHitResult rayTraceEntity(int maxDistance, boolean ignoreBlocks) {
+        net.minecraft.world.phys.EntityHitResult rayTrace = getHandle().getTargetEntity(maxDistance);
+        if (rayTrace == null) {
+            return null;
+        }
+        if (!ignoreBlocks) {
+            net.minecraft.world.phys.HitResult rayTraceBlocks = getHandle().getRayTrace(maxDistance, net.minecraft.world.level.ClipContext.Fluid.NONE);
+            if (rayTraceBlocks != null) {
+                net.minecraft.world.phys.Vec3 eye = getHandle().getEyePosition(1.0F);
+                if (eye.distanceToSqr(rayTraceBlocks.getLocation()) <= eye.distanceToSqr(rayTrace.getLocation())) {
+                    return null;
+                }
+            }
+        }
+        return rayTrace;
+    }
+
     @Override
     public List<Block> getLastTwoTargetBlocks(Set<Material> transparent, int maxDistance) {
         return getLineOfSight(transparent, maxDistance, 2);
@@ -206,7 +226,7 @@
 
     @Override
     public RayTraceResult rayTraceBlocks(double maxDistance, FluidCollisionMode fluidCollisionMode) {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot ray tray blocks during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot ray tray blocks during world generation");
         Location eyeLocation = this.getEyeLocation();
         Vector direction = eyeLocation.getDirection();
         return this.getWorld().rayTraceBlocks(eyeLocation, direction, maxDistance, fluidCollisionMode, false);
@@ -224,12 +244,12 @@
 
     @Override
     public int getMaximumAir() {
-        return getHandle().bridge$maxAirTicks();
+        return getHandle().maxAirTicks;
     }
 
     @Override
     public void setMaximumAir(int ticks) {
-        getHandle().banner$setMaxAirTicks(ticks);
+        getHandle().maxAirTicks = ticks;
     }
 
     @Override
@@ -260,7 +280,7 @@
 
     @Override
     public void damage(double amount, org.bukkit.entity.Entity source) {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot damage entity during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot damage entity during world generation");
         DamageSource reason = getHandle().damageSources().generic();
 
         if (source instanceof HumanEntity) {
@@ -384,23 +404,6 @@
         return effects;
     }
 
-    // Paper start - LivingEntity#clearActivePotionEffects();
-    @Override
-    public boolean clearActivePotionEffects() {
-        return this.getHandle().removeAllEffects(EntityPotionEffectEvent.Cause.PLUGIN);
-    }
-
-    @Override
-    public float getBodyYaw() {
-        return this.getHandle().getVisualRotationYInDegrees();
-    }
-
-    @Override
-    public void setBodyYaw(float bodyYaw) {
-        this.getHandle().setYBodyRot(bodyYaw);
-    }
-    // Paper end
-
     @Override
     public <T extends Projectile> T launchProjectile(Class<? extends T> projectile) {
         return launchProjectile(projectile, null);
@@ -409,7 +412,7 @@
     @Override
     @SuppressWarnings("unchecked")
     public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity) {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot launch projectile during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot launch projectile during world generation");
         net.minecraft.world.level.Level world = ((CraftWorld) getWorld()).getHandle();
         net.minecraft.world.entity.Entity launch = null;
 
@@ -424,14 +427,14 @@
             ((net.minecraft.world.entity.projectile.ThrowableProjectile) launch).shootFromRotation(getHandle(), getHandle().getXRot(), getHandle().getYRot(), 0.0F, 1.5F, 1.0F); // ItemEnderPearl
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.Arrow(world, getHandle());
-                ((net.minecraft.world.entity.projectile.Arrow) launch).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+                launch = new net.minecraft.world.entity.projectile.Arrow(world, getHandle(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW));
+                ((Arrow) launch.getBukkitEntity()).setBasePotionType(PotionType.WATER);
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, getHandle());
+                launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, getHandle(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.SPECTRAL_ARROW));
             } else if (Trident.class.isAssignableFrom(projectile)) {
                 launch = new net.minecraft.world.entity.projectile.ThrownTrident(world, getHandle(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.TRIDENT));
             } else {
-                launch = new net.minecraft.world.entity.projectile.Arrow(world, getHandle());
+                launch = new net.minecraft.world.entity.projectile.Arrow(world, getHandle(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW));
             }
             ((net.minecraft.world.entity.projectile.AbstractArrow) launch).shootFromRotation(getHandle(), getHandle().getXRot(), getHandle().getYRot(), 0.0F, 3.0F, 1.0F); // ItemBow
         } else if (ThrownPotion.class.isAssignableFrom(projectile)) {
@@ -458,11 +461,15 @@
                 launch = new net.minecraft.world.entity.projectile.WitherSkull(world, getHandle(), direction.getX(), direction.getY(), direction.getZ());
             } else if (DragonFireball.class.isAssignableFrom(projectile)) {
                 launch = new net.minecraft.world.entity.projectile.DragonFireball(world, getHandle(), direction.getX(), direction.getY(), direction.getZ());
+            } else if (WindCharge.class.isAssignableFrom(projectile)) {
+                launch = net.minecraft.world.entity.EntityType.WIND_CHARGE.create(world);
+                ((net.minecraft.world.entity.projectile.WindCharge) launch).setOwner(getHandle());
+                ((net.minecraft.world.entity.projectile.WindCharge) launch).setDirection(direction.getX(), direction.getY(), direction.getZ());
             } else {
                 launch = new net.minecraft.world.entity.projectile.LargeFireball(world, getHandle(), direction.getX(), direction.getY(), direction.getZ(), 1);
             }
 
-            ((AbstractHurtingProjectile) launch).banner$setProjectileSource(this);
+            ((AbstractHurtingProjectile) launch).projectileSource = this;
             launch.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         } else if (LlamaSpit.class.isAssignableFrom(projectile)) {
             Location location = getEyeLocation();
@@ -497,7 +504,7 @@
 
     @Override
     public boolean hasLineOfSight(Entity other) {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot check line of sight during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot check line of sight during world generation");
         return getHandle().hasLineOfSight(((CraftEntity) other).getHandle());
     }
 
@@ -523,7 +530,7 @@
         if (getHandle() instanceof Mob) {
             ((Mob) getHandle()).setCanPickUpLoot(pickup);
         } else {
-            getHandle().banner$setBukkitPickUpLoot(pickup);
+            getHandle().bukkitPickUpLoot = pickup;
         }
     }
 
@@ -532,7 +539,7 @@
         if (getHandle() instanceof Mob) {
             return ((Mob) getHandle()).canPickUpLoot();
         } else {
-            return getHandle().bridge$bukkitPickUpLoot();
+            return getHandle().bukkitPickUpLoot;
         }
     }
 
@@ -569,7 +576,7 @@
 
     @Override
     public boolean setLeashHolder(Entity holder) {
-        if (getHandle().bridge$generation() || (getHandle() instanceof net.minecraft.world.entity.boss.wither.WitherBoss) || !(getHandle() instanceof Mob)) {
+        if (getHandle().generation || (getHandle() instanceof net.minecraft.world.entity.boss.wither.WitherBoss) || !(getHandle() instanceof Mob)) {
             return false;
         }
 
@@ -618,13 +625,13 @@
 
     @Override
     public boolean isClimbing() {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot check if climbing during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot check if climbing during world generation");
         return getHandle().onClimbable();
     }
 
     @Override
     public AttributeInstance getAttribute(Attribute attribute) {
-        return getHandle().bridge$craftAttributes().getAttribute(attribute);
+        return getHandle().craftAttributes.getAttribute(attribute);
     }
 
     @Override
@@ -642,7 +649,7 @@
     @Override
     public void attack(Entity target) {
         Preconditions.checkArgument(target != null, "target == null");
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot attack during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot attack during world generation");
 
         if (getHandle() instanceof net.minecraft.world.entity.player.Player) {
             ((net.minecraft.world.entity.player.Player) getHandle()).attack(((CraftEntity) target).getHandle());
@@ -653,13 +660,13 @@
 
     @Override
     public void swingMainHand() {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot swing hand during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot swing hand during world generation");
         getHandle().swing(InteractionHand.MAIN_HAND, true);
     }
 
     @Override
     public void swingOffHand() {
-        Preconditions.checkState(!getHandle().bridge$generation(), "Cannot swing hand during world generation");
+        Preconditions.checkState(!getHandle().generation, "Cannot swing hand during world generation");
         getHandle().swing(InteractionHand.OFF_HAND, true);
     }
 
@@ -679,66 +686,66 @@
 
     @Override
     public void setCollidable(boolean collidable) {
-        getHandle().banner$setCollides(collidable);
+        getHandle().collides = collidable;
     }
 
     @Override
     public boolean isCollidable() {
-        return getHandle().bridge$collides();
+        return getHandle().collides;
     }
 
     @Override
     public Set<UUID> getCollidableExemptions() {
-        return getHandle().bridge$collidableExemptions();
+        return getHandle().collidableExemptions;
     }
 
     @Override
     public <T> T getMemory(MemoryKey<T> memoryKey) {
-        return (T) getHandle().getBrain().getMemory(CraftMemoryKey.fromMemoryKey(memoryKey)).map(CraftMemoryMapper::fromNms).orElse(null);
+        return (T) getHandle().getBrain().getMemory(CraftMemoryKey.bukkitToMinecraft(memoryKey)).map(CraftMemoryMapper::fromNms).orElse(null);
     }
 
     @Override
     public <T> void setMemory(MemoryKey<T> memoryKey, T t) {
-        getHandle().getBrain().setMemory(CraftMemoryKey.fromMemoryKey(memoryKey), CraftMemoryMapper.toNms(t));
+        getHandle().getBrain().setMemory(CraftMemoryKey.bukkitToMinecraft(memoryKey), CraftMemoryMapper.toNms(t));
     }
 
     @Override
     public Sound getHurtSound() {
         SoundEvent sound = getHandle().getHurtSound0(getHandle().damageSources().generic());
-        return (sound != null) ? CraftSound.getBukkit(sound) : null;
+        return (sound != null) ? CraftSound.minecraftToBukkit(sound) : null;
     }
 
     @Override
     public Sound getDeathSound() {
         SoundEvent sound = getHandle().getDeathSound0();
-        return (sound != null) ? CraftSound.getBukkit(sound) : null;
+        return (sound != null) ? CraftSound.minecraftToBukkit(sound) : null;
     }
 
     @Override
     public Sound getFallDamageSound(int fallHeight) {
-        return CraftSound.getBukkit(getHandle().getFallDamageSound0(fallHeight));
+        return CraftSound.minecraftToBukkit(getHandle().getFallDamageSound0(fallHeight));
     }
 
     @Override
     public Sound getFallDamageSoundSmall() {
-        return CraftSound.getBukkit(getHandle().getFallSounds().small());
+        return CraftSound.minecraftToBukkit(getHandle().getFallSounds().small());
     }
 
     @Override
     public Sound getFallDamageSoundBig() {
-        return CraftSound.getBukkit(getHandle().getFallSounds().big());
+        return CraftSound.minecraftToBukkit(getHandle().getFallSounds().big());
     }
 
     @Override
     public Sound getDrinkingSound(ItemStack itemStack) {
         Preconditions.checkArgument(itemStack != null, "itemStack must not be null");
-        return CraftSound.getBukkit(getHandle().getDrinkingSound0(CraftItemStack.asNMSCopy(itemStack)));
+        return CraftSound.minecraftToBukkit(getHandle().getDrinkingSound0(CraftItemStack.asNMSCopy(itemStack)));
     }
 
     @Override
     public Sound getEatingSound(ItemStack itemStack) {
         Preconditions.checkArgument(itemStack != null, "itemStack must not be null");
-        return CraftSound.getBukkit(getHandle().getEatingSound0(CraftItemStack.asNMSCopy(itemStack)));
+        return CraftSound.minecraftToBukkit(getHandle().getEatingSound0(CraftItemStack.asNMSCopy(itemStack)));
     }
 
     @Override
@@ -772,7 +779,7 @@
 
     @Override
     public void setInvisible(boolean invisible) {
-        getHandle().banner$setPersistentInvisibility(invisible);
+        getHandle().persistentInvisibility = invisible;
         getHandle().setSharedFlag(5, invisible);
     }
 }
Index: src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.entity;
 
+import java.util.List;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Thrown whenever a LivingEntity dies
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecart.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecart.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecart.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftMinecart.java	(date 1703956060000)
@@ -27,24 +27,24 @@
 
     @Override
     public double getMaxSpeed() {
-       return getHandle().bridge$maxSpeed();
+        return getHandle().maxSpeed;
     }
 
     @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
-            getHandle().banner$setMaxSpeed(speed);
+            getHandle().maxSpeed = speed;
         }
     }
 
     @Override
     public boolean isSlowWhenEmpty() {
-        return getHandle().bridge$slowWhenEmpty();
+        return getHandle().slowWhenEmpty;
     }
 
     @Override
     public void setSlowWhenEmpty(boolean slow) {
-        getHandle().banner$setSlowWhenEmpty(slow);
+        getHandle().slowWhenEmpty = slow;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftInteraction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftInteraction.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftInteraction.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftInteraction.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftInteraction.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
+import java.util.UUID;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.Interaction;
 
-import java.util.UUID;
-
 public class CraftInteraction extends CraftEntity implements Interaction {
 
     public CraftInteraction(CraftServer server, net.minecraft.world.entity.Interaction entity) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItem.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItem.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItem.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItem.java	(date 1703956060000)
@@ -1,93 +1,90 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
-import net.minecraft.world.entity.Entity;
+import java.util.UUID;
 import net.minecraft.world.entity.item.ItemEntity;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
 import org.bukkit.entity.Item;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.UUID;
-
 public class CraftItem extends CraftEntity implements Item {
-    private final ItemEntity item;
 
-    public CraftItem(CraftServer server, Entity entity, ItemEntity item) {
+    public CraftItem(CraftServer server, ItemEntity entity) {
         super(server, entity);
-        this.item = item;
-    }
-
-    public CraftItem(CraftServer server, ItemEntity entity) {
-        this(server, entity, entity);
+    }
+
+    @Override
+    public ItemEntity getHandle() {
+        return (ItemEntity) entity;
     }
 
     @Override
     public ItemStack getItemStack() {
-        return CraftItemStack.asCraftMirror(item.getItem());
+        return CraftItemStack.asCraftMirror(getHandle().getItem());
     }
 
     @Override
     public void setItemStack(ItemStack stack) {
-        item.setItem(CraftItemStack.asNMSCopy(stack));
+        getHandle().setItem(CraftItemStack.asNMSCopy(stack));
     }
 
     @Override
     public int getPickupDelay() {
-        return item.pickupDelay;
+        return getHandle().pickupDelay;
     }
 
     @Override
     public void setPickupDelay(int delay) {
-        item.pickupDelay = Math.min(delay, Short.MAX_VALUE);
+        getHandle().pickupDelay = Math.min(delay, Short.MAX_VALUE);
     }
 
     @Override
     public void setUnlimitedLifetime(boolean unlimited) {
         if (unlimited) {
             // See EntityItem#INFINITE_LIFETIME
-            item.age = Short.MIN_VALUE;
+            getHandle().age = Short.MIN_VALUE;
         } else {
-            item.age = getTicksLived();
+            getHandle().age = getTicksLived();
         }
     }
 
     @Override
     public boolean isUnlimitedLifetime() {
-        return item.age == Short.MIN_VALUE;
+        return getHandle().age == Short.MIN_VALUE;
     }
 
     @Override
     public void setTicksLived(int value) {
         super.setTicksLived(value);
 
-        // Second field for net.minecraft.world.entity.item.ItemEntity (don't set if lifetime is unlimited)
+        // Second field for EntityItem (don't set if lifetime is unlimited)
         if (!isUnlimitedLifetime()) {
-            item.age = value;
+            getHandle().age = value;
         }
     }
 
     @Override
     public void setOwner(UUID uuid) {
-        item.setTarget(uuid);
+        getHandle().setTarget(uuid);
     }
 
     @Override
     public UUID getOwner() {
-        return item.target;
+        return getHandle().target;
     }
 
     @Override
     public void setThrower(UUID uuid) {
-        item.setThrower(uuid);
+        getHandle().thrower = uuid;
     }
 
     @Override
     public UUID getThrower() {
-        return item.thrower;
+        return getHandle().thrower;
     }
 
     @Override
     public String toString() {
         return "CraftItem";
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.block;
 
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when a block explodes
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItemFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItemFrame.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItemFrame.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItemFrame.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftItemFrame.java	(date 1703956060000)
@@ -24,7 +24,7 @@
         Preconditions.checkArgument(newDir != null, "%s is not a valid facing direction", face);
 
         getHandle().setDirection(newDir);
-        if (!force && !getHandle().bridge$generation() && !hanging.survives()) {
+        if (!force && !getHandle().generation && !hanging.survives()) {
             hanging.setDirection(oldDir);
             return false;
         }
@@ -43,7 +43,7 @@
         getHandle().getEntityData().markDirty(net.minecraft.world.entity.decoration.ItemFrame.DATA_ROTATION);
 
         // update redstone
-        if (!getHandle().bridge$generation()) {
+        if (!getHandle().generation) {
             getHandle().level().updateNeighbourForOutputSignal(getHandle().pos, Blocks.AIR);
         }
     }
@@ -55,7 +55,7 @@
 
     @Override
     public void setItem(org.bukkit.inventory.ItemStack item, boolean playSound) {
-        getHandle().setItem(CraftItemStack.asNMSCopy(item), !getHandle().bridge$generation(), !getHandle().bridge$generation() && playSound);
+        getHandle().setItem(CraftItemStack.asNMSCopy(item), !getHandle().generation, !getHandle().generation && playSound);
     }
 
     @Override
Index: src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.event.block;
 
+import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when a piston retracts
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLeash.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLeash.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLeash.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLeash.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftLeash.java	(date 1703956060000)
@@ -14,7 +14,7 @@
     public boolean setFacingDirection(BlockFace face, boolean force) {
         Preconditions.checkArgument(face == BlockFace.SELF, "%s is not a valid facing direction", face);
 
-        return force || getHandle().bridge$generation() || getHandle().survives();
+        return force || getHandle().generation || getHandle().survives();
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftGuardian.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftGuardian.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftGuardian.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftGuardian.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftGuardian.java	(date 1703956060000)
@@ -63,7 +63,7 @@
     public void setLaserTicks(int ticks) {
         Preconditions.checkArgument(ticks >= MINIMUM_ATTACK_TICKS, "ticks must be >= %s. Given %s", MINIMUM_ATTACK_TICKS, ticks);
 
-        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = getHandle().bridge$guardianAttackGoal();
+        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = getHandle().guardianAttackGoal;
         if (goal != null) {
             goal.attackTime = ticks;
         }
@@ -71,7 +71,7 @@
 
     @Override
     public int getLaserTicks() {
-        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = getHandle().bridge$guardianAttackGoal();
+        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = getHandle().guardianAttackGoal;
         return (goal != null) ? goal.attackTime : MINIMUM_ATTACK_TICKS;
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHanging.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHanging.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHanging.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHanging.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHanging.java	(date 1703956060000)
@@ -41,7 +41,7 @@
             default:
                 throw new IllegalArgumentException(String.format("%s is not a valid facing direction", face));
         }
-        if (!force && !getHandle().bridge$generation() && !hanging.survives()) {
+        if (!force && !getHandle().generation && !hanging.survives()) {
             // Revert since it doesn't fit
             hanging.setDirection(dir);
             return false;
Index: src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.block;
 
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Item;
@@ -8,8 +9,6 @@
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called if a block broken by a player drops an item.
  *
Index: src/main/java/org/bukkit/event/block/CampfireStartEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/CampfireStartEvent.java b/src/main/java/org/bukkit/event/block/CampfireStartEvent.java
--- a/src/main/java/org/bukkit/event/block/CampfireStartEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/CampfireStartEvent.java	(date 1703956060000)
@@ -59,4 +59,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHumanEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHumanEntity.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHumanEntity.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftHumanEntity.java	(date 1703956060000)
@@ -2,8 +2,11 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
-import com.mohistmc.banner.bukkit.BukkitSnapshotCaptures;
-import com.mohistmc.banner.bukkit.pluginfix.LuckPerms;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Optional;
+import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
@@ -13,7 +16,6 @@
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.HumanoidArm;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.MenuType;
@@ -40,10 +42,10 @@
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryPlayer;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMerchantCustom;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.entity.Firework;
 import org.bukkit.entity.HumanEntity;
@@ -62,16 +64,10 @@
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Optional;
-import java.util.Set;
-
 public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     private CraftInventoryPlayer inventory;
-    private CraftInventory enderChest;// Banner - remove final
-    public PermissibleBase perm = new PermissibleBase(this);
+    private final CraftInventory enderChest;
+    protected final PermissibleBase perm = new PermissibleBase(this);
     private boolean op;
     private GameMode mode;
 
@@ -80,45 +76,20 @@
         mode = server.getDefaultGameMode();
         this.inventory = new CraftInventoryPlayer(entity.getInventory());
         enderChest = new CraftInventory(entity.getEnderChestInventory());
-        // Banner start - TODO
-        if (LuckPerms.perCache.containsKey(getUniqueId())) {
-            perm = LuckPerms.perCache.get(getUniqueId());
-        }
-        if (LuckPerms.perCache.get(getUniqueId()) != perm) {
-            if (!PermissibleBase.class.equals(perm.getClass())) {
-                LuckPerms.perCache.put(getUniqueId(), perm);
-            }
-        }
-        // Banner end
     }
 
     @Override
     public PlayerInventory getInventory() {
-        // Banner start
-        if (inventory == null || inventory.getInventory() != ((Player) entity).getInventory()) {
-            inventory = new CraftInventoryPlayer(((Player)entity).getInventory());
-        }
-        // Banner end
         return inventory;
     }
 
     @Override
     public EntityEquipment getEquipment() {
-        // Banner start
-        if (inventory == null || inventory.getInventory() != ((Player) entity).getInventory()) {
-            inventory = new CraftInventoryPlayer(((Player)entity).getInventory());
-        }
-        // Banner end
         return inventory;
     }
 
     @Override
     public Inventory getEnderChest() {
-        // Banner start
-        if (enderChest == null || enderChest.getInventory() != ((Player) entity).getEnderChestInventory()) {
-            enderChest = new CraftInventory(((Player)entity).getEnderChestInventory());
-        }
-        // Banner end
         return enderChest;
     }
 
@@ -163,18 +134,18 @@
         Preconditions.checkArgument(location.getWorld().equals(getWorld()), "Cannot sleep across worlds");
 
         BlockPos blockposition = CraftLocation.toBlockPosition(location);
-        BlockState iblockdata = getHandle().level().getBlockState(blockposition);
+        BlockState iblockdata = getHandle().level.getBlockState(blockposition);
         if (!(iblockdata.getBlock() instanceof BedBlock)) {
             return false;
         }
 
-        if (getHandle().startSleepInBed(blockposition, force).left().isPresent()) {
+        if (getHandle().forceSleepInBed(force).startSleepInBed(blockposition).left().isPresent()) {
             return false;
         }
 
         // From BedBlock
         iblockdata = iblockdata.setValue(BedBlock.OCCUPIED, true);
-        getHandle().level().setBlock(blockposition, iblockdata, 4);
+        getHandle().level.setBlock(blockposition, iblockdata, 4);
 
         return true;
     }
@@ -294,9 +265,6 @@
 
     @Override
     public InventoryView getOpenInventory() {
-        // Banner start - capture player
-        BukkitSnapshotCaptures.captureContainerOwner(this.getHandle());
-        // Banner end
         return getHandle().containerMenu.getBukkitView();
     }
 
@@ -322,7 +290,7 @@
             if (iinventory instanceof BlockEntity) {
                 BlockEntity te = (BlockEntity) iinventory;
                 if (!te.hasLevel()) {
-                    te.setLevel(getHandle().level());
+                    te.setLevel(getHandle().level);
                 }
             }
         }
@@ -337,7 +305,7 @@
         if (getHandle().containerMenu == formerContainer) {
             return null;
         }
-        getHandle().containerMenu.banner$setCheckReachable(false);
+        getHandle().containerMenu.checkReachable = false;
         return getHandle().containerMenu.getBukkitView();
     }
 
@@ -367,9 +335,9 @@
                 return null;
             }
         }
-        getHandle().openMenu(((CraftingTableBlock) Blocks.CRAFTING_TABLE).getMenuProvider(null, getHandle().level(), CraftLocation.toBlockPosition(location)));
+        getHandle().openMenu(((CraftingTableBlock) Blocks.CRAFTING_TABLE).getMenuProvider(null, getHandle().level, CraftLocation.toBlockPosition(location)));
         if (force) {
-            getHandle().containerMenu.banner$setCheckReachable(false);
+            getHandle().containerMenu.checkReachable = false;
         }
         return getHandle().containerMenu.getBukkitView();
     }
@@ -388,10 +356,10 @@
 
         // If there isn't an enchant table we can force create one, won't be very useful though.
         BlockPos pos = CraftLocation.toBlockPosition(location);
-        getHandle().openMenu(((EnchantmentTableBlock) Blocks.ENCHANTING_TABLE).getMenuProvider(null, getHandle().level(), pos));
+        getHandle().openMenu(((EnchantmentTableBlock) Blocks.ENCHANTING_TABLE).getMenuProvider(null, getHandle().level, pos));
 
         if (force) {
-            getHandle().containerMenu.banner$setCheckReachable(false);
+            getHandle().containerMenu.checkReachable = false;
         }
         return getHandle().containerMenu.getBukkitView();
     }
@@ -517,7 +485,7 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
-        return getHandle().getCooldowns().isOnCooldown(CraftMagicNumbers.getItem(material));
+        return getHandle().getCooldowns().isOnCooldown(CraftItemType.bukkitToMinecraft(material));
     }
 
     @Override
@@ -525,7 +493,7 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
-        ItemCooldowns.CooldownInstance cooldown = getHandle().getCooldowns().cooldowns.get(CraftMagicNumbers.getItem(material));
+        ItemCooldowns.CooldownInstance cooldown = getHandle().getCooldowns().cooldowns.get(CraftItemType.bukkitToMinecraft(material));
         return (cooldown == null) ? 0 : Math.max(0, cooldown.endTime - getHandle().getCooldowns().tickCount);
     }
 
@@ -534,7 +502,7 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
-        getHandle().getCooldowns().addCooldown(CraftMagicNumbers.getItem(material), ticks);
+        getHandle().getCooldowns().addCooldown(CraftItemType.bukkitToMinecraft(material), ticks);
     }
 
     @Override
@@ -569,7 +537,7 @@
 
     private Collection<net.minecraft.world.item.crafting.RecipeHolder<?>> bukkitKeysToMinecraftRecipes(Collection<NamespacedKey> recipeKeys) {
         Collection<net.minecraft.world.item.crafting.RecipeHolder<?>> recipes = new ArrayList<>();
-        RecipeManager manager = getHandle().level().getServer().getRecipeManager();
+        RecipeManager manager = getHandle().level.getServer().getRecipeManager();
 
         for (NamespacedKey recipeKey : recipeKeys) {
             Optional<? extends net.minecraft.world.item.crafting.RecipeHolder<?>> recipe = manager.byKey(CraftNamespacedKey.toMinecraft(recipeKey));
@@ -586,7 +554,7 @@
     @Override
     public org.bukkit.entity.Entity getShoulderEntityLeft() {
         if (!getHandle().getShoulderEntityLeft().isEmpty()) {
-            Optional<Entity> shoulder = net.minecraft.world.entity.EntityType.create(getHandle().getShoulderEntityLeft(), getHandle().level());
+            Optional<Entity> shoulder = net.minecraft.world.entity.EntityType.create(getHandle().getShoulderEntityLeft(), getHandle().level);
 
             return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
         }
@@ -605,7 +573,7 @@
     @Override
     public org.bukkit.entity.Entity getShoulderEntityRight() {
         if (!getHandle().getShoulderEntityRight().isEmpty()) {
-            Optional<Entity> shoulder = net.minecraft.world.entity.EntityType.create(getHandle().getShoulderEntityRight(), getHandle().level());
+            Optional<Entity> shoulder = net.minecraft.world.entity.EntityType.create(getHandle().getShoulderEntityRight(), getHandle().level);
 
             return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
         }
@@ -659,32 +627,32 @@
 
     @Override
     public int getSaturatedRegenRate() {
-        return getHandle().getFoodData().bridge$saturatedRegenRate();
+        return getHandle().getFoodData().saturatedRegenRate;
     }
 
     @Override
     public void setSaturatedRegenRate(int i) {
-        getHandle().getFoodData().banner$setSaturatedRegenRate(i);
+        getHandle().getFoodData().saturatedRegenRate = i;
     }
 
     @Override
     public int getUnsaturatedRegenRate() {
-        return getHandle().getFoodData().bridge$unsaturatedRegenRate();
+        return getHandle().getFoodData().unsaturatedRegenRate;
     }
 
     @Override
     public void setUnsaturatedRegenRate(int i) {
-        getHandle().getFoodData().banner$setUnsaturatedRegenRate(i);
+        getHandle().getFoodData().unsaturatedRegenRate = i;
     }
 
     @Override
     public int getStarvationRate() {
-        return getHandle().getFoodData().bridge$starvationRate();
+        return getHandle().getFoodData().starvationRate;
     }
 
     @Override
     public void setStarvationRate(int i) {
-        getHandle().getFoodData().banner$setStarvationRate(i);
+        getHandle().getFoodData().starvationRate = i;
     }
 
     @Override
@@ -706,8 +674,17 @@
         Preconditions.checkArgument(fireworkItemStack != null, "fireworkItemStack must not be null");
         Preconditions.checkArgument(fireworkItemStack.getType() == Material.FIREWORK_ROCKET, "fireworkItemStack must be of type %s", Material.FIREWORK_ROCKET);
 
-        FireworkRocketEntity fireworks = new FireworkRocketEntity(getHandle().level(), CraftItemStack.asNMSCopy(fireworkItemStack), getHandle());
-        boolean success = getHandle().level().addFreshEntity(fireworks, SpawnReason.CUSTOM);
+        FireworkRocketEntity fireworks = new FireworkRocketEntity(getHandle().level, CraftItemStack.asNMSCopy(fireworkItemStack), getHandle());
+        boolean success = getHandle().level.addFreshEntity(fireworks, SpawnReason.CUSTOM);
         return success ? (Firework) fireworks.getBukkitEntity() : null;
     }
+
+    @Override
+    public org.bukkit.entity.Entity copy() {
+        throw new UnsupportedOperationException("Cannot copy human entities");
+    }
+    @Override
+    public org.bukkit.entity.Entity copy(Location location) {
+        throw new UnsupportedOperationException("Cannot copy human entities");
+    }
 }
Index: src/main/java/org/bukkit/event/block/BellResonateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BellResonateEvent.java b/src/main/java/org/bukkit/event/block/BellResonateEvent.java
--- a/src/main/java/org/bukkit/event/block/BellResonateEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BellResonateEvent.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.event.block;
 
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Called when a bell resonated after being rung and highlights nearby raiders.
  * A bell will only resonate if raiders are in the vicinity of the bell.
@@ -48,4 +47,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.event.block;
 
 import com.google.common.collect.ImmutableList;
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.List;
-
 /**
  * Fired when a single block placement action of a player triggers the
  * creation of multiple blocks(e.g. placing a bed block). The block returned
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFox.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFox.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFox.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Optional;
+import java.util.UUID;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.Fox;
 
-import java.util.Optional;
-import java.util.UUID;
-
 public class CraftFox extends CraftAnimals implements Fox {
 
     public CraftFox(CraftServer server, net.minecraft.world.entity.animal.Fox entity) {
@@ -81,7 +80,6 @@
         if (player == null) {
             Preconditions.checkState(getHandle().getEntityData().get(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_1).isEmpty(), "Must remove second trusted player first");
         }
-
         getHandle().getEntityData().set(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_0, player == null ? Optional.empty() : Optional.of(player.getUniqueId()));
     }
 
@@ -102,10 +100,9 @@
 
     @Override
     public void setSecondTrustedPlayer(AnimalTamer player) {
-        if (player != null && !getHandle().getEntityData().get(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_0).isPresent()) {
-            throw new IllegalStateException("Must add first trusted player first");
+        if (player != null) {
+            Preconditions.checkState(getHandle().getEntityData().get(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_0).isPresent(), "Must add first trusted player first");
         }
-
         getHandle().getEntityData().set(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_1, player == null ? Optional.empty() : Optional.of(player.getUniqueId()));
     }
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFrog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFrog.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFrog.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFrog.java	(date 1703956060000)
@@ -1,9 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.world.entity.animal.FrogVariant;
 import net.minecraft.world.entity.animal.frog.Frog;
 import org.bukkit.Registry;
+import org.bukkit.craftbukkit.v1_20_R3.CraftRegistry;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.entity.Entity;
@@ -40,13 +42,34 @@
 
     @Override
     public Variant getVariant() {
-        return Registry.FROG_VARIANT.get(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.FROG_VARIANT.getKey(getHandle().getVariant())));
+        return CraftVariant.minecraftToBukkit(getHandle().getVariant());
     }
 
     @Override
     public void setVariant(Variant variant) {
         Preconditions.checkArgument(variant != null, "variant");
 
-        getHandle().setVariant(BuiltInRegistries.FROG_VARIANT.get(CraftNamespacedKey.toMinecraft(variant.getKey())));
+        getHandle().setVariant(CraftVariant.bukkitToMinecraft(variant));
+    }
+
+    public static class CraftVariant {
+
+        public static Variant minecraftToBukkit(FrogVariant minecraft) {
+            Preconditions.checkArgument(minecraft != null);
+
+            net.minecraft.core.Registry<FrogVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.FROG_VARIANT);
+            Variant bukkit = Registry.FROG_VARIANT.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+
+            Preconditions.checkArgument(bukkit != null);
+
+            return bukkit;
+        }
+
+        public static FrogVariant bukkitToMinecraft(Variant bukkit) {
+            Preconditions.checkArgument(bukkit != null);
+
+            return CraftRegistry.getMinecraftRegistry(Registries.FROG_VARIANT)
+                    .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        }
     }
 }
Index: src/main/java/org/bukkit/event/block/SculkBloomEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/SculkBloomEvent.java b/src/main/java/org/bukkit/event/block/SculkBloomEvent.java
--- a/src/main/java/org/bukkit/event/block/SculkBloomEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/SculkBloomEvent.java	(date 1703956060000)
@@ -85,4 +85,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/event/block/BlockCookEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BlockCookEvent.java b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockCookEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BlockCookEvent.java	(date 1703956060000)
@@ -5,7 +5,6 @@
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Called when an ItemStack is successfully cooked in a block.
@@ -15,20 +14,12 @@
     private final ItemStack source;
     private ItemStack result;
     private boolean cancelled;
-    private final org.bukkit.inventory.CookingRecipe<?> recipe; // Paper
 
-    @Deprecated // Paper
     public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result) {
-        // Paper start
-        this(block, source, result, null);
-    }
-
-    public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable org.bukkit.inventory.CookingRecipe<?> recipe) {
         super(block);
         this.source = source;
         this.result = result;
         this.cancelled = false;
-        this.recipe = recipe; // Paper
     }
 
     /**
@@ -70,18 +61,6 @@
         this.cancelled = cancel;
     }
 
-    // Paper start
-    /**
-     * Gets the cooking recipe associated with this event.
-     *
-     * @return the recipe
-     */
-    @Nullable
-    public org.bukkit.inventory.CookingRecipe<?> getRecipe() {
-        return recipe;
-    }
-    // Paper end
-
     @NotNull
     @Override
     public HandlerList getHandlers() {
Index: src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.event.block;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
 /**
  * Called when a piston extends
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEvokerFangs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEvokerFangs.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEvokerFangs.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEvokerFangs.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEvokerFangs.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
+import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.EvokerFangs;
 import org.bukkit.entity.LivingEntity;
@@ -31,4 +32,14 @@
     public void setOwner(LivingEntity owner) {
         getHandle().setOwner(owner == null ? null : ((CraftLivingEntity) owner).getHandle());
     }
+
+    @Override
+    public int getAttackDelay() {
+        return getHandle().warmupDelayTicks;
+    }
+    @Override
+    public void setAttackDelay(int delay) {
+        Preconditions.checkArgument(delay >= 0, "Delay must be positive");
+        getHandle().warmupDelayTicks = delay;
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftExperienceOrb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftExperienceOrb.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftExperienceOrb.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftExperienceOrb.java	(date 1703956060000)
@@ -18,6 +18,18 @@
         getHandle().value = value;
     }
 
+    // Paper start
+    public java.util.UUID getTriggerEntityId() {
+        return getHandle().triggerEntityId;
+    }
+    public java.util.UUID getSourceEntityId() {
+        return getHandle().sourceEntityId;
+    }
+    public SpawnReason getSpawnReason() {
+        return getHandle().spawnReason;
+    }
+    // Paper end
+
     @Override
     public net.minecraft.world.entity.ExperienceOrb getHandle() {
         return (net.minecraft.world.entity.ExperienceOrb) entity;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFireball.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFireball.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFireball.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFireball.java	(date 1703956060000)
@@ -13,27 +13,27 @@
 
     @Override
     public float getYield() {
-        return getHandle().bridge$bukkitYield();
+        return getHandle().bukkitYield;
     }
 
     @Override
     public boolean isIncendiary() {
-        return getHandle().bridge$isIncendiary();
+        return getHandle().isIncendiary;
     }
 
     @Override
     public void setIsIncendiary(boolean isIncendiary) {
-        getHandle().banner$setIsIncendiary(isIncendiary);
+        getHandle().isIncendiary = isIncendiary;
     }
 
     @Override
     public void setYield(float yield) {
-        getHandle().banner$setBukkitYield(yield);
+        getHandle().bukkitYield = yield;
     }
 
     @Override
     public ProjectileSource getShooter() {
-        return getHandle().bridge$projectileSource();
+        return getHandle().projectileSource;
     }
 
     @Override
@@ -43,7 +43,7 @@
         } else {
             getHandle().setOwner(null);
         }
-        getHandle().banner$setProjectileSource(shooter);
+        getHandle().projectileSource = shooter;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFirework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFirework.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFirework.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFirework.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Random;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -11,8 +12,6 @@
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.meta.FireworkMeta;
 
-import java.util.Random;
-
 public class CraftFirework extends CraftProjectile implements Firework {
 
     private final Random random = new Random();
Index: src/main/java/org/bukkit/event/block/BellRingEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BellRingEvent.java b/src/main/java/org/bukkit/event/block/BellRingEvent.java
--- a/src/main/java/org/bukkit/event/block/BellRingEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BellRingEvent.java	(date 1703956060000)
@@ -64,4 +64,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java b/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java
--- a/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java	(date 1703956060000)
@@ -48,4 +48,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFishHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFishHook.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFishHook.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFishHook.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftFishHook.java	(date 1703956060000)
@@ -25,120 +25,121 @@
 
     @Override
     public int getMinWaitTime() {
-        return getHandle().bridge$minWaitTime();
+        return getHandle().minWaitTime;
     }
 
     @Override
     public void setMinWaitTime(int minWaitTime) {
         Preconditions.checkArgument(minWaitTime >= 0 && minWaitTime <= this.getMaxWaitTime(), "The minimum wait time should be between %s and %s (the maximum wait time)", 0, this.getMaxWaitTime());
         net.minecraft.world.entity.projectile.FishingHook hook = getHandle();
-        hook.banner$setMinWaitTime(minWaitTime);
+        hook.minWaitTime = minWaitTime;
     }
 
     @Override
     public int getMaxWaitTime() {
-        return getHandle().bridge$maxWaitTime();
+        return getHandle().maxWaitTime;
     }
 
     @Override
     public void setMaxWaitTime(int maxWaitTime) {
         Preconditions.checkArgument(maxWaitTime >= 0 && maxWaitTime >= this.getMinWaitTime(), "The maximum wait time should be between %s and %s (the minimum wait time)", 0, this.getMinWaitTime());
         net.minecraft.world.entity.projectile.FishingHook hook = getHandle();
-        hook.banner$setMaxWaitTime(maxWaitTime);
+        hook.maxWaitTime = maxWaitTime;
     }
 
     @Override
     public void setWaitTime(int min, int max) {
         Preconditions.checkArgument(min >= 0 && max >= 0 && min <= max, "The minimum/maximum wait time should be higher than or equal to 0 and the minimum wait time");
-        getHandle().banner$setMinWaitTime(min);
-        getHandle().banner$setMaxWaitTime(max);
+        getHandle().minWaitTime = min;
+        getHandle().maxWaitTime = max;
     }
 
     @Override
     public int getMinLureTime() {
-        return getHandle().bridge$minLureTime();
+        return getHandle().minLureTime;
     }
 
     @Override
     public void setMinLureTime(int minLureTime) {
         Preconditions.checkArgument(minLureTime >= 0 && minLureTime <= this.getMaxLureTime(), "The minimum lure time (%s) should be between 0 and %s (the maximum wait time)", minLureTime, this.getMaxLureTime());
-        getHandle().banner$setMinLureTime(minLureTime);
+        getHandle().minLureTime = minLureTime;
     }
 
     @Override
     public int getMaxLureTime() {
-        return getHandle().bridge$maxLureTime();
+        return getHandle().maxLureTime;
     }
 
     @Override
     public void setMaxLureTime(int maxLureTime) {
         Preconditions.checkArgument(maxLureTime >= 0 && maxLureTime >= this.getMinLureTime(), "The maximum lure time (%s) should be higher than or equal to 0 and %s (the minimum wait time)", maxLureTime, this.getMinLureTime());
-        getHandle().banner$setMaxLureTime(maxLureTime);
+        getHandle().maxLureTime = maxLureTime;
     }
 
     @Override
     public void setLureTime(int min, int max) {
-        Preconditions.checkArgument(min >= 0 && max >= 0 && min <= max, "The minimum/maximum lure time should be higher than or equal to 0 and the minimum wait time.");        getHandle().banner$setMinLureTime(min);
-        getHandle().banner$setMaxLureTime(max);
+        Preconditions.checkArgument(min >= 0 && max >= 0 && min <= max, "The minimum/maximum lure time should be higher than or equal to 0 and the minimum wait time.");
+        getHandle().minLureTime = min;
+        getHandle().maxLureTime = max;
     }
 
     @Override
     public float getMinLureAngle() {
-        return getHandle().bridge$minLureAngle();
+        return getHandle().minLureAngle;
     }
 
     @Override
     public void setMinLureAngle(float minLureAngle) {
         Preconditions.checkArgument(minLureAngle <= this.getMaxLureAngle(), "The minimum lure angle (%s) should be less than %s (the maximum lure angle)", minLureAngle, this.getMaxLureAngle());
-        getHandle().banner$setMinLureAnglee(minLureAngle);
+        getHandle().minLureAngle = minLureAngle;
     }
 
     @Override
     public float getMaxLureAngle() {
-        return getHandle().bridge$maxLureAngle();
+        return getHandle().maxLureAngle;
     }
 
     @Override
     public void setMaxLureAngle(float maxLureAngle) {
         Preconditions.checkArgument(maxLureAngle >= this.getMinLureAngle(), "The minimum lure angle (%s) should be less than %s (the maximum lure angle)", maxLureAngle, this.getMinLureAngle());
-        getHandle().banner$setMaxLureAnglee(maxLureAngle);
+        getHandle().maxLureAngle = maxLureAngle;
     }
 
     @Override
     public void setLureAngle(float min, float max) {
         Preconditions.checkArgument(min <= max, "The minimum lure (%s) angle should be less than the maximum lure angle (%s)", min, max);
-        getHandle().banner$setMinLureAnglee(min);
-        getHandle().banner$setMaxLureAnglee(max);
+        getHandle().minLureAngle = min;
+        getHandle().maxLureAngle = max;
     }
 
     @Override
     public boolean isSkyInfluenced() {
-        return getHandle().bridge$skyInfluenced();
+        return getHandle().skyInfluenced;
     }
 
     @Override
     public void setSkyInfluenced(boolean skyInfluenced) {
-        getHandle().banner$setSkyInfluenced(skyInfluenced);
+        getHandle().skyInfluenced = skyInfluenced;
     }
 
     @Override
     public boolean isRainInfluenced() {
-        return getHandle().bridge$rainInfluenced();
+        return getHandle().rainInfluenced;
     }
 
     @Override
     public void setRainInfluenced(boolean rainInfluenced) {
-        getHandle().banner$setRainInfluenced(rainInfluenced);
+        getHandle().rainInfluenced = rainInfluenced;
     }
 
     @Override
     public boolean getApplyLure() {
-        return getHandle().bridge$applyLure();
+        return getHandle().applyLure;
     }
 
     @Override
     public void setApplyLure(boolean applyLure) {
-        getHandle().banner$setApplyLure(applyLure);
+        getHandle().applyLure = applyLure;
     }
 
     @Override
@@ -146,7 +147,7 @@
         net.minecraft.world.entity.projectile.FishingHook hook = getHandle();
 
         if (this.biteChance == -1) {
-            if (hook.level().isRainingAt(BlockPos.containing(hook.position()).offset(0, 1, 0))) {
+            if (hook.level.isRainingAt(BlockPos.containing(hook.position()).offset(0, 1, 0))) {
                 return 1 / 300.0;
             }
             return 1 / 500.0;
@@ -162,7 +163,7 @@
 
     @Override
     public boolean isInOpenWater() {
-        return this.getHandle().outOfWaterTime < 10 && this.getHandle().calculateOpenWater(this.getHandle().blockPosition()); // Paper - isOpenWaterFishing is only calculated when a "fish" is approaching the hook
+        return getHandle().isOpenWaterFishing();
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEnderDragon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEnderDragon.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEnderDragon.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEnderDragon.java	(date 1703956060000)
@@ -2,7 +2,8 @@
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
-import com.mohistmc.banner.api.ServerAPI;
+import com.mohistmc.mohist.api.ServerAPI;
+import java.util.Set;
 import net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase;
 import org.bukkit.boss.BossBar;
 import org.bukkit.boss.DragonBattle;
@@ -11,8 +12,6 @@
 import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.EnderDragon;
 
-import java.util.Set;
-
 public class CraftEnderDragon extends CraftMob implements EnderDragon {
 
     public CraftEnderDragon(CraftServer server, net.minecraft.world.entity.boss.enderdragon.EnderDragon entity) {
Index: src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.event.block;
 
+import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Player;
@@ -9,8 +10,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Called with the block changes resulting from a player fertilizing a given
  * block with bonemeal. Will be called after the applicable
Index: src/main/java/org/bukkit/event/block/BrewingStartEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/block/BrewingStartEvent.java b/src/main/java/org/bukkit/event/block/BrewingStartEvent.java
--- a/src/main/java/org/bukkit/event/block/BrewingStartEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/block/BrewingStartEvent.java	(date 1703956060000)
@@ -46,4 +46,4 @@
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEntity.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEntity.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftEntity.java	(date 1703956060000)
@@ -3,68 +3,24 @@
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
-import com.mohistmc.banner.bukkit.entity.MohistModsAbstractHorse;
-import com.mohistmc.banner.bukkit.entity.MohistModsAnimals;
-import com.mohistmc.banner.bukkit.entity.MohistModsChestHorse;
-import com.mohistmc.banner.bukkit.entity.MohistModsEntity;
-import com.mohistmc.banner.bukkit.entity.MohistModsMinecart;
-import com.mohistmc.banner.bukkit.entity.MohistModsMinecartContainer;
-import com.mohistmc.banner.bukkit.entity.MohistModsSkeleton;
-import com.mohistmc.banner.bukkit.entity.MohistModsTameableEntity;
-import com.mohistmc.banner.bukkit.entity.MohistModsThrowableEntity;
-import com.mohistmc.banner.bukkit.entity.MohistModsThrowableProjectile;
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.world.entity.AreaEffectCloud;
-import net.minecraft.world.entity.Display;
+import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.GlowSquid;
-import net.minecraft.world.entity.Interaction;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Marker;
-import net.minecraft.world.entity.TamableAnimal;
-import net.minecraft.world.entity.animal.AbstractFish;
-import net.minecraft.world.entity.animal.AbstractGolem;
-import net.minecraft.world.entity.animal.Animal;
-import net.minecraft.world.entity.animal.WaterAnimal;
-import net.minecraft.world.entity.animal.allay.Allay;
-import net.minecraft.world.entity.animal.axolotl.Axolotl;
-import net.minecraft.world.entity.animal.frog.Frog;
-import net.minecraft.world.entity.animal.frog.Tadpole;
-import net.minecraft.world.entity.animal.goat.Goat;
-import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
-import net.minecraft.world.entity.animal.horse.AbstractHorse;
-import net.minecraft.world.entity.animal.sniffer.Sniffer;
+import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
-import net.minecraft.world.entity.decoration.GlowItemFrame;
-import net.minecraft.world.entity.item.FallingBlockEntity;
-import net.minecraft.world.entity.monster.Ghast;
-import net.minecraft.world.entity.monster.Monster;
-import net.minecraft.world.entity.monster.Slime;
-import net.minecraft.world.entity.monster.SpellcasterIllager;
-import net.minecraft.world.entity.monster.Strider;
-import net.minecraft.world.entity.monster.piglin.Piglin;
-import net.minecraft.world.entity.monster.piglin.PiglinBrute;
-import net.minecraft.world.entity.monster.warden.Warden;
-import net.minecraft.world.entity.npc.AbstractVillager;
-import net.minecraft.world.entity.npc.Villager;
-import net.minecraft.world.entity.projectile.FireworkRocketEntity;
-import net.minecraft.world.entity.projectile.ThrowableItemProjectile;
-import net.minecraft.world.entity.vehicle.AbstractMinecart;
-import net.minecraft.world.entity.vehicle.AbstractMinecartContainer;
-import net.minecraft.world.entity.vehicle.Boat;
-import net.minecraft.world.entity.vehicle.ChestBoat;
-import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
 import net.minecraft.world.phys.AABB;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
-import org.bukkit.Registry;
 import org.bukkit.Server;
 import org.bukkit.Sound;
 import org.bukkit.World;
@@ -78,9 +34,9 @@
 import org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftSpawnCategory;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftVector;
+import org.bukkit.entity.EntitySnapshot;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.Pose;
@@ -98,10 +54,6 @@
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
@@ -115,243 +67,34 @@
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
         this.entity = entity;
-        EntityType type = Registry.ENTITY_TYPE.get(CraftNamespacedKey.fromMinecraft(net.minecraft.world.entity.EntityType.getKey(entity.getType())));
-        this.entityType = (type != null) ? type : EntityType.UNKNOWN;
-    }
 
-    public static CraftEntity getEntity(CraftServer server, Entity entity) {
-        /*
-         * Order is *EXTREMELY* important -- keep it right! =D
-         */
-        // CHECKSTYLE:OFF
-        if (entity instanceof LivingEntity) {
-            // Players
-            if (entity instanceof net.minecraft.world.entity.player.Player) {
-                if (entity instanceof ServerPlayer) { return new CraftPlayer(server, (ServerPlayer) entity); }
-                else { return new CraftHumanEntity(server, (net.minecraft.world.entity.player.Player) entity); }
-            }
-            // Water Animals
-            else if (entity instanceof WaterAnimal) {
-                if (entity instanceof net.minecraft.world.entity.animal.Squid) {
-                    if (entity instanceof GlowSquid) { return new CraftGlowSquid(server, (GlowSquid) entity); }
-                    else { return new CraftSquid(server, (net.minecraft.world.entity.animal.Squid) entity); }
-                }
-                else if (entity instanceof AbstractFish) {
-                    if (entity instanceof net.minecraft.world.entity.animal.Cod) { return new CraftCod(server, (net.minecraft.world.entity.animal.Cod) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Pufferfish) { return new CraftPufferFish(server, (net.minecraft.world.entity.animal.Pufferfish) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Salmon) { return new CraftSalmon(server, (net.minecraft.world.entity.animal.Salmon) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.TropicalFish) { return new CraftTropicalFish(server, (net.minecraft.world.entity.animal.TropicalFish) entity); }
-                    else if (entity instanceof Tadpole) { return new CraftTadpole(server, (Tadpole) entity); }
-                    else { return new CraftFish(server, (AbstractFish) entity); }
-                }
-                else if (entity instanceof net.minecraft.world.entity.animal.Dolphin) { return new CraftDolphin(server, (net.minecraft.world.entity.animal.Dolphin) entity); }
-                else { return new CraftWaterMob(server, (WaterAnimal) entity); }
-            }
-            else if (entity instanceof net.minecraft.world.entity.PathfinderMob) {
-                // Animals
-                if (entity instanceof Animal) {
-                    if (entity instanceof net.minecraft.world.entity.animal.Chicken) { return new CraftChicken(server, (net.minecraft.world.entity.animal.Chicken) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Cow) {
-                        if (entity instanceof net.minecraft.world.entity.animal.MushroomCow) { return new CraftMushroomCow(server, (net.minecraft.world.entity.animal.MushroomCow) entity); }
-                        else { return new CraftCow(server, (net.minecraft.world.entity.animal.Cow) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Pig) { return new CraftPig(server, (net.minecraft.world.entity.animal.Pig) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.TamableAnimal) {
-                        if (entity instanceof net.minecraft.world.entity.animal.Wolf) { return new CraftWolf(server, (net.minecraft.world.entity.animal.Wolf) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.animal.Cat) { return new CraftCat(server, (net.minecraft.world.entity.animal.Cat) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.animal.Parrot) { return new CraftParrot(server, (net.minecraft.world.entity.animal.Parrot) entity); }
-                        else { return new MohistModsTameableEntity( server, ( TamableAnimal ) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Sheep) { return new CraftSheep(server, (net.minecraft.world.entity.animal.Sheep) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.horse.AbstractHorse) {
-                        if (entity instanceof net.minecraft.world.entity.animal.horse.AbstractChestedHorse){
-                            if (entity instanceof net.minecraft.world.entity.animal.horse.Donkey) { return new CraftDonkey(server, (net.minecraft.world.entity.animal.horse.Donkey) entity); }
-                            else if (entity instanceof net.minecraft.world.entity.animal.horse.Mule) { return new CraftMule(server, (net.minecraft.world.entity.animal.horse.Mule) entity); }
-                            else if (entity instanceof net.minecraft.world.entity.animal.horse.TraderLlama) { return new CraftTraderLlama(server, (net.minecraft.world.entity.animal.horse.TraderLlama) entity); }
-                            else if (entity instanceof net.minecraft.world.entity.animal.horse.Llama) { return new CraftLlama(server, (net.minecraft.world.entity.animal.horse.Llama) entity); }
-                            else { return new MohistModsChestHorse( server, ( AbstractChestedHorse ) entity); }
-                        } else if (entity instanceof net.minecraft.world.entity.animal.horse.Horse) { return new CraftHorse(server, (net.minecraft.world.entity.animal.horse.Horse) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.animal.horse.SkeletonHorse) { return new CraftSkeletonHorse(server, (net.minecraft.world.entity.animal.horse.SkeletonHorse) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.animal.horse.ZombieHorse) { return new CraftZombieHorse(server, (net.minecraft.world.entity.animal.horse.ZombieHorse) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.animal.camel.Camel) { return new CraftCamel(server, (net.minecraft.world.entity.animal.camel.Camel) entity); }
-                        else { return new MohistModsAbstractHorse( server, ( AbstractHorse ) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Rabbit) { return new CraftRabbit(server, (net.minecraft.world.entity.animal.Rabbit) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.PolarBear) { return new CraftPolarBear(server, (net.minecraft.world.entity.animal.PolarBear) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Turtle) { return new CraftTurtle(server, (net.minecraft.world.entity.animal.Turtle) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Ocelot) { return new CraftOcelot(server, (net.minecraft.world.entity.animal.Ocelot) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Panda) { return new CraftPanda(server, (net.minecraft.world.entity.animal.Panda) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Fox) { return new CraftFox(server, (net.minecraft.world.entity.animal.Fox) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.Bee) { return new CraftBee(server, (net.minecraft.world.entity.animal.Bee) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.hoglin.Hoglin) { return new CraftHoglin(server, (net.minecraft.world.entity.monster.hoglin.Hoglin) entity); }
-                    else if (entity instanceof Strider) { return new CraftStrider(server, (Strider) entity); }
-                    else if (entity instanceof Axolotl) { return new CraftAxolotl(server, (Axolotl) entity); }
-                    else if (entity instanceof Goat) { return new CraftGoat(server, (Goat) entity); }
-                    else if (entity instanceof Frog) { return new CraftFrog(server, (Frog) entity); }
-                    else if (entity instanceof Sniffer) { return new CraftSniffer(server, (Sniffer) entity); }
-                    else  { return new MohistModsAnimals(server, (Animal) entity); }
-                }
-                // Monsters
-                else if (entity instanceof Monster) {
-                    if (entity instanceof net.minecraft.world.entity.monster.Zombie) {
-                        if (entity instanceof net.minecraft.world.entity.monster.ZombifiedPiglin) { return new CraftPigZombie(server, (net.minecraft.world.entity.monster.ZombifiedPiglin) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.monster.Husk) { return new CraftHusk(server, (net.minecraft.world.entity.monster.Husk) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.monster.ZombieVillager) { return new CraftVillagerZombie(server, (net.minecraft.world.entity.monster.ZombieVillager) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.monster.Drowned) { return new CraftDrowned(server, (net.minecraft.world.entity.monster.Drowned) entity); }
-                        else { return new CraftZombie(server, (net.minecraft.world.entity.monster.Zombie) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Creeper) { return new CraftCreeper(server, (net.minecraft.world.entity.monster.Creeper) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.EnderMan) { return new CraftEnderman(server, (net.minecraft.world.entity.monster.EnderMan) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Silverfish) { return new CraftSilverfish(server, (net.minecraft.world.entity.monster.Silverfish) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Giant) { return new CraftGiant(server, (net.minecraft.world.entity.monster.Giant) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.AbstractSkeleton) {
-                        if (entity instanceof net.minecraft.world.entity.monster.Stray) { return new CraftStray(server, (net.minecraft.world.entity.monster.Stray) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.monster.WitherSkeleton) { return new CraftWitherSkeleton(server, (net.minecraft.world.entity.monster.WitherSkeleton) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.monster.Skeleton){ return new CraftSkeleton(server, (net.minecraft.world.entity.monster.Skeleton) entity); }
-                        else { return new MohistModsSkeleton(server, (net.minecraft.world.entity.monster.AbstractSkeleton) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Blaze) { return new CraftBlaze(server, (net.minecraft.world.entity.monster.Blaze) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Witch) { return new CraftWitch(server, (net.minecraft.world.entity.monster.Witch) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.boss.wither.WitherBoss) { return new CraftWither(server, (net.minecraft.world.entity.boss.wither.WitherBoss) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Spider) {
-                        if (entity instanceof net.minecraft.world.entity.monster.CaveSpider) { return new CraftCaveSpider(server, (net.minecraft.world.entity.monster.CaveSpider) entity); }
-                        else { return new CraftSpider(server, (net.minecraft.world.entity.monster.Spider) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Endermite) { return new CraftEndermite(server, (net.minecraft.world.entity.monster.Endermite) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Guardian) {
-                        if (entity instanceof net.minecraft.world.entity.monster.ElderGuardian) { return new CraftElderGuardian(server, (net.minecraft.world.entity.monster.ElderGuardian) entity); }
-                        else { return new CraftGuardian(server, (net.minecraft.world.entity.monster.Guardian) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Vex) { return new CraftVex(server, (net.minecraft.world.entity.monster.Vex) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.AbstractIllager) {
-                        if (entity instanceof SpellcasterIllager) {
-                            if (entity instanceof net.minecraft.world.entity.monster.Evoker) { return new CraftEvoker(server, (net.minecraft.world.entity.monster.Evoker) entity); }
-                            else if (entity instanceof net.minecraft.world.entity.monster.Illusioner) { return new CraftIllusioner(server, (net.minecraft.world.entity.monster.Illusioner) entity); }
-                            else {  return new CraftSpellcaster(server, (SpellcasterIllager) entity); }
-                        }
-                        else if (entity instanceof net.minecraft.world.entity.monster.Vindicator) { return new CraftVindicator(server, (net.minecraft.world.entity.monster.Vindicator) entity); }
-                        else if (entity instanceof net.minecraft.world.entity.monster.Pillager) { return new CraftPillager(server, (net.minecraft.world.entity.monster.Pillager) entity); }
-                        else { return new CraftIllager(server, (net.minecraft.world.entity.monster.AbstractIllager) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Ravager) { return new CraftRavager(server, (net.minecraft.world.entity.monster.Ravager) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.piglin.AbstractPiglin) {
-                        if (entity instanceof Piglin) return new CraftPiglin(server, (Piglin) entity);
-                        else if (entity instanceof PiglinBrute) { return new CraftPiglinBrute(server, (PiglinBrute) entity); }
-                        else { return new CraftPiglinAbstract(server, (net.minecraft.world.entity.monster.piglin.AbstractPiglin) entity); }
-                    }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Zoglin) { return new CraftZoglin(server, (net.minecraft.world.entity.monster.Zoglin) entity); }
+        this.entityType = CraftEntityType.minecraftToBukkit(entity.getType());
+    }
 
-                    else if (entity instanceof Warden) { return new CraftWarden(server, (Warden) entity); }
+    public static <T extends Entity> CraftEntity getEntity(CraftServer server, T entity) {
+        Preconditions.checkArgument(entity != null, "Unknown entity");
 
-                    else  { return new CraftMonster(server, (net.minecraft.world.entity.monster.Monster) entity); }
-                }
-                else if (entity instanceof AbstractGolem) {
-                    if (entity instanceof net.minecraft.world.entity.animal.SnowGolem) { return new CraftSnowman(server, (net.minecraft.world.entity.animal.SnowGolem) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.animal.IronGolem) { return new CraftIronGolem(server, (net.minecraft.world.entity.animal.IronGolem) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.monster.Shulker) { return new CraftShulker(server, (net.minecraft.world.entity.monster.Shulker) entity); }
-                }
-                else if (entity instanceof AbstractVillager) {
-                    if (entity instanceof Villager) { return new CraftVillager(server, (Villager) entity); }
-                    else if (entity instanceof net.minecraft.world.entity.npc.WanderingTrader) { return new CraftWanderingTrader(server, (net.minecraft.world.entity.npc.WanderingTrader) entity); }
-                    else { return new CraftAbstractVillager(server, (AbstractVillager) entity); }
-                }
-                else if (entity instanceof Allay) { return new CraftAllay(server, (Allay) entity); }
-                else { return new CraftCreature(server, (net.minecraft.world.entity.PathfinderMob) entity); }
-            }
-            // Slimes are a special (and broken) case
-            else if (entity instanceof Slime) {
-                if (entity instanceof net.minecraft.world.entity.monster.MagmaCube) { return new CraftMagmaCube(server, (net.minecraft.world.entity.monster.MagmaCube) entity); }
-                else { return new CraftSlime(server, (Slime) entity); }
-            }
-            // Flying
-            else if (entity instanceof net.minecraft.world.entity.FlyingMob) {
-                if (entity instanceof Ghast) { return new CraftGhast(server, (Ghast) entity); }
-                else if (entity instanceof net.minecraft.world.entity.monster.Phantom) { return new CraftPhantom(server, (net.minecraft.world.entity.monster.Phantom) entity); }
-                else { return new CraftFlying(server, (net.minecraft.world.entity.FlyingMob) entity); }
-            }
-            else if (entity instanceof EnderDragon) {
-                return new CraftEnderDragon(server, (EnderDragon) entity);
-            }
-            // Ambient
-            else if (entity instanceof net.minecraft.world.entity.ambient.AmbientCreature) {
-                if (entity instanceof net.minecraft.world.entity.ambient.Bat) { return new CraftBat(server, (net.minecraft.world.entity.ambient.Bat) entity); }
-                else { return new CraftAmbient(server, (net.minecraft.world.entity.ambient.AmbientCreature) entity); }
-            }
-            else if (entity instanceof net.minecraft.world.entity.decoration.ArmorStand) { return new CraftArmorStand(server, (net.minecraft.world.entity.decoration.ArmorStand) entity); }
-            else  { return new CraftLivingEntity(server, (LivingEntity) entity); }
-        }
-        else if (entity instanceof net.minecraft.world.entity.boss.EnderDragonPart) {
-            net.minecraft.world.entity.boss.EnderDragonPart part = (net.minecraft.world.entity.boss.EnderDragonPart) entity;
-            if (part.parentMob instanceof EnderDragon) { return new CraftEnderDragonPart(server, (net.minecraft.world.entity.boss.EnderDragonPart) entity); }
-            else { return new CraftComplexPart(server, (net.minecraft.world.entity.boss.EnderDragonPart) entity); }
-        }
-        else if (entity instanceof ExperienceOrb) { return new CraftExperienceOrb(server, (ExperienceOrb) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.Arrow) { return new CraftTippedArrow(server, (net.minecraft.world.entity.projectile.Arrow) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.SpectralArrow) { return new CraftSpectralArrow(server, (net.minecraft.world.entity.projectile.SpectralArrow) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.AbstractArrow) {
-            if (entity instanceof net.minecraft.world.entity.projectile.ThrownTrident) { return new CraftTrident(server, (net.minecraft.world.entity.projectile.ThrownTrident) entity); }
-            else { return new CraftArrow(server, (net.minecraft.world.entity.projectile.AbstractArrow) entity); }
-        }
-        else if (entity instanceof Boat) {
-            if (entity instanceof ChestBoat) { return new CraftChestBoat(server, (ChestBoat) entity); }
-            else { return new CraftBoat(server, (Boat) entity); }
-        }
-        else if (entity instanceof net.minecraft.world.entity.projectile.ThrowableProjectile throwableProjectile) {
-            if (entity instanceof net.minecraft.world.entity.projectile.ThrownEgg) { return new CraftEgg(server, (net.minecraft.world.entity.projectile.ThrownEgg) entity); }
-            else if (entity instanceof net.minecraft.world.entity.projectile.Snowball) { return new CraftSnowball(server, (net.minecraft.world.entity.projectile.Snowball) entity); }
-            else if (entity instanceof net.minecraft.world.entity.projectile.ThrownPotion) { return new CraftThrownPotion(server, (net.minecraft.world.entity.projectile.ThrownPotion) entity); }
-            else if (entity instanceof net.minecraft.world.entity.projectile.ThrownEnderpearl) { return new CraftEnderPearl(server, (net.minecraft.world.entity.projectile.ThrownEnderpearl) entity); }
-            else if (entity instanceof net.minecraft.world.entity.projectile.ThrownExperienceBottle) { return new CraftThrownExpBottle(server, (net.minecraft.world.entity.projectile.ThrownExperienceBottle) entity); }
-            else if (entity instanceof ThrowableItemProjectile) { return new MohistModsThrowableProjectile(server, (ThrowableItemProjectile) entity); }
-            else { return new MohistModsThrowableEntity( server, throwableProjectile ); }
-        }
-        else if (entity instanceof FallingBlockEntity) { return new CraftFallingBlock(server, (FallingBlockEntity) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.AbstractHurtingProjectile) {
-            if (entity instanceof net.minecraft.world.entity.projectile.SmallFireball) { return new CraftSmallFireball(server, (net.minecraft.world.entity.projectile.SmallFireball) entity); }
-            else if (entity instanceof net.minecraft.world.entity.projectile.LargeFireball) { return new CraftLargeFireball(server, (net.minecraft.world.entity.projectile.LargeFireball) entity); }
-            else if (entity instanceof net.minecraft.world.entity.projectile.WitherSkull) { return new CraftWitherSkull(server, (net.minecraft.world.entity.projectile.WitherSkull) entity); }
-            else if (entity instanceof net.minecraft.world.entity.projectile.DragonFireball) { return new CraftDragonFireball(server, (net.minecraft.world.entity.projectile.DragonFireball) entity); }
-            else { return new CraftFireball(server, (net.minecraft.world.entity.projectile.AbstractHurtingProjectile) entity); }
+        // Special case human, since bukkit use Player interface for ...
+        if (entity instanceof net.minecraft.world.entity.player.Player player && !(entity instanceof ServerPlayer)) {
+            return new CraftHumanEntity(server, player);
         }
-        else if (entity instanceof net.minecraft.world.entity.projectile.EyeOfEnder) { return new CraftEnderSignal(server, (net.minecraft.world.entity.projectile.EyeOfEnder) entity); }
-        else if (entity instanceof net.minecraft.world.entity.boss.enderdragon.EndCrystal) { return new CraftEnderCrystal(server, (net.minecraft.world.entity.boss.enderdragon.EndCrystal) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.FishingHook) { return new CraftFishHook(server, (net.minecraft.world.entity.projectile.FishingHook) entity); }
-        else if (entity instanceof net.minecraft.world.entity.item.ItemEntity) { return new CraftItem(server, (net.minecraft.world.entity.item.ItemEntity) entity); }
-        else if (entity instanceof net.minecraft.world.entity.LightningBolt) { return new CraftLightningStrike(server, (net.minecraft.world.entity.LightningBolt) entity); }
-        else if (entity instanceof net.minecraft.world.entity.vehicle.AbstractMinecart) {
-            if (entity instanceof net.minecraft.world.entity.vehicle.MinecartFurnace) { return new CraftMinecartFurnace(server, (net.minecraft.world.entity.vehicle.MinecartFurnace) entity); }
-            else if (entity instanceof net.minecraft.world.entity.vehicle.MinecartChest) { return new CraftMinecartChest(server, (net.minecraft.world.entity.vehicle.MinecartChest) entity); }
-            else if (entity instanceof net.minecraft.world.entity.vehicle.MinecartTNT) { return new CraftMinecartTNT(server, (net.minecraft.world.entity.vehicle.MinecartTNT) entity); }
-            else if (entity instanceof net.minecraft.world.entity.vehicle.MinecartHopper) { return new CraftMinecartHopper(server, (net.minecraft.world.entity.vehicle.MinecartHopper) entity); }
-            else if (entity instanceof net.minecraft.world.entity.vehicle.MinecartSpawner) { return new CraftMinecartMobSpawner(server, (net.minecraft.world.entity.vehicle.MinecartSpawner) entity); }
-            else if (entity instanceof net.minecraft.world.entity.vehicle.Minecart) { return new CraftMinecartRideable(server, (net.minecraft.world.entity.vehicle.Minecart) entity); }
-            else if (entity instanceof MinecartCommandBlock) { return new CraftMinecartCommand(server, (MinecartCommandBlock) entity); }
-            else if (entity instanceof AbstractMinecartContainer) { return new MohistModsMinecartContainer(server, (AbstractMinecartContainer) entity); }
-            else { return new MohistModsMinecart(server, (AbstractMinecart) entity); }
-        } else if (entity instanceof net.minecraft.world.entity.decoration.HangingEntity) {
-            if (entity instanceof net.minecraft.world.entity.decoration.Painting) { return new CraftPainting(server, (net.minecraft.world.entity.decoration.Painting) entity); }
-            else if (entity instanceof net.minecraft.world.entity.decoration.ItemFrame) {
-                if (entity instanceof GlowItemFrame) { return new CraftGlowItemFrame(server, (GlowItemFrame) entity); }
-                else { return new CraftItemFrame(server, (net.minecraft.world.entity.decoration.ItemFrame) entity); }
+
+        // Special case complex part, since there is no extra entity type for them
+        if (entity instanceof EnderDragonPart complexPart) {
+            if (complexPart.parentMob instanceof EnderDragon) {
+                return new CraftEnderDragonPart(server, complexPart);
+            } else {
+                return new CraftComplexPart(server, complexPart);
             }
-            else if (entity instanceof net.minecraft.world.entity.decoration.LeashFenceKnotEntity) { return new CraftLeash(server, (net.minecraft.world.entity.decoration.LeashFenceKnotEntity) entity); }
-            else { return new CraftHanging(server, (net.minecraft.world.entity.decoration.HangingEntity) entity); }
         }
-        else if (entity instanceof net.minecraft.world.entity.item.PrimedTnt) { return new CraftTNTPrimed(server, (net.minecraft.world.entity.item.PrimedTnt) entity); }
-        else if (entity instanceof FireworkRocketEntity) { return new CraftFirework(server, (FireworkRocketEntity) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.ShulkerBullet) { return new CraftShulkerBullet(server, (net.minecraft.world.entity.projectile.ShulkerBullet) entity); }
-        else if (entity instanceof AreaEffectCloud) { return new CraftAreaEffectCloud(server, (AreaEffectCloud) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.EvokerFangs) { return new CraftEvokerFangs(server, (net.minecraft.world.entity.projectile.EvokerFangs) entity); }
-        else if (entity instanceof net.minecraft.world.entity.projectile.LlamaSpit) { return new CraftLlamaSpit(server, (net.minecraft.world.entity.projectile.LlamaSpit) entity); }
-        else if (entity instanceof Marker) { return new CraftMarker(server, (Marker) entity); }
-        else if (entity instanceof Interaction) { return new CraftInteraction(server, (Interaction) entity); }
-        else if (entity instanceof Display) {
-            if (entity instanceof Display.BlockDisplay) { return new CraftBlockDisplay(server, (Display.BlockDisplay) entity); }
-            else if (entity instanceof Display.ItemDisplay) { return new CraftItemDisplay(server, (Display.ItemDisplay) entity); }
-            else if (entity instanceof Display.TextDisplay) { return new CraftTextDisplay(server, (Display.TextDisplay) entity); }
-            else { return new CraftDisplay(server, (Display) entity); }
+
+        CraftEntityTypes.EntityTypeData<?, T> entityTypeData = CraftEntityTypes.getEntityTypeData(CraftEntityType.minecraftToBukkit(entity.getType()));
+
+        if (entityTypeData != null) {
+            return (CraftEntity) entityTypeData.convertFunction().apply(server, entity);
         }
-        return new MohistModsEntity(server, entity);
+
+        throw new AssertionError("Unknown entity " + (entity == null ? null : entity.getClass()));
     }
 
     @Override
@@ -381,7 +124,7 @@
     @Override
     public void setVelocity(Vector velocity) {
         Preconditions.checkArgument(velocity != null, "velocity");
-        velocity.checkFinite();
+        // velocity.checkFinite();
         entity.setDeltaMovement(CraftVector.toNMS(velocity));
         entity.hurtMarked = true;
     }
@@ -455,7 +198,7 @@
         // Let the server handle cross world teleports
         if (location.getWorld() != null && !location.getWorld().equals(getWorld())) {
             // Prevent teleportation to an other world during world generation
-            Preconditions.checkState(!entity.bridge$generation(), "Cannot teleport entity to an other world during world generation");
+            Preconditions.checkState(!entity.generation, "Cannot teleport entity to an other world during world generation");
             entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location));
             return true;
         }
@@ -480,8 +223,8 @@
 
     @Override
     public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
-        Preconditions.checkState(!entity.bridge$generation(), "Cannot get nearby entities during world generation");
-        List<Entity> notchEntityList = entity.level().getEntities(entity, entity.getBoundingBox().inflate(x, y, z), Predicates.alwaysTrue());
+        Preconditions.checkState(!entity.generation, "Cannot get nearby entities during world generation");
+        List<Entity> notchEntityList = entity.level.getEntities(entity, entity.getBoundingBox().inflate(x, y, z), Predicates.alwaysTrue());
         List<org.bukkit.entity.Entity> bukkitEntityList = new java.util.ArrayList<org.bukkit.entity.Entity>(notchEntityList.size());
 
         for (Entity e : notchEntityList) {
@@ -554,7 +297,7 @@
 
     @Override
     public boolean isValid() {
-        return entity.isAlive() && entity.bridge$valid() && entity.isChunkLoaded();
+        return entity.isAlive() && entity.valid && entity.isChunkLoaded() && isInWorld();
     }
 
     @Override
@@ -564,12 +307,12 @@
 
     @Override
     public boolean isPersistent() {
-        return entity.bridge$persist();
+        return entity.persist;
     }
 
     @Override
     public void setPersistent(boolean persistent) {
-        entity.banner$setPersist(persistent);
+        entity.persist = persistent;
     }
 
     public Vector getMomentum() {
@@ -679,27 +422,27 @@
 
     @Override
     public void playEffect(EntityEffect type) {
-        Preconditions.checkArgument(type != null, "type");
-        Preconditions.checkState(!entity.bridge$generation(), "Cannot play effect during world generation");
+        Preconditions.checkArgument(type != null, "Type cannot be null");
+        Preconditions.checkState(!entity.generation, "Cannot play effect during world generation");
 
         if (type.getApplicable().isInstance(this)) {
-            this.getHandle().level().broadcastEntityEvent(getHandle(), type.getData());
+            this.getHandle().level.broadcastEntityEvent(getHandle(), type.getData());
         }
     }
 
     @Override
     public Sound getSwimSound() {
-        return CraftSound.getBukkit(getHandle().getSwimSound0());
+        return CraftSound.minecraftToBukkit(getHandle().getSwimSound0());
     }
 
     @Override
     public Sound getSwimSplashSound() {
-        return CraftSound.getBukkit(getHandle().getSwimSplashSound0());
+        return CraftSound.minecraftToBukkit(getHandle().getSwimSplashSound0());
     }
 
     @Override
     public Sound getSwimHighSpeedSplashSound() {
-        return CraftSound.getBukkit(getHandle().getSwimHighSpeedSplashSound0());
+        return CraftSound.minecraftToBukkit(getHandle().getSwimHighSpeedSplashSound0());
     }
 
     public void setHandle(final Entity entity) {
@@ -807,7 +550,7 @@
 
     @Override
     public void setVisibleByDefault(boolean visible) {
-        if (getHandle().bridge$visibleByDefault() != visible) {
+        if (getHandle().visibleByDefault != visible) {
             if (visible) {
                 // Making visible by default, reset and show to all players
                 for (Player player : server.getOnlinePlayers()) {
@@ -820,13 +563,30 @@
                 }
             }
 
-            getHandle().banner$setVisibleByDefault(visible);
+            getHandle().visibleByDefault = visible;
         }
     }
 
     @Override
     public boolean isVisibleByDefault() {
-        return getHandle().bridge$visibleByDefault();
+        return getHandle().visibleByDefault;
+    }
+
+    @Override
+    public Set<Player> getTrackedBy() {
+        Preconditions.checkState(!entity.generation, "Cannot get tracking players during world generation");
+        ImmutableSet.Builder<Player> players = ImmutableSet.builder();
+
+        ServerLevel world = ((CraftWorld) getWorld()).getHandle();
+        ChunkMap.TrackedEntity entityTracker = world.getChunkSource().chunkMap.entityMap.get(getEntityId());
+
+        if (entityTracker != null) {
+            for (ServerPlayerConnection connection : entityTracker.seenBy) {
+                players.add(connection.getPlayer().getBukkitEntity());
+            }
+        }
+
+        return players.build();
     }
 
     @Override
@@ -1022,6 +782,34 @@
         return CraftSpawnCategory.toBukkit(getHandle().getType().getCategory());
     }
 
+    @Override
+    public boolean isInWorld() {
+        return getHandle().inWorld;
+    }
+    @Override
+    public EntitySnapshot createSnapshot() {
+        return CraftEntitySnapshot.create(this);
+    }
+    @Override
+    public org.bukkit.entity.Entity copy() {
+        Entity copy = copy(getHandle().level());
+        Preconditions.checkArgument(copy != null, "Error creating new entity.");
+        return copy.getBukkitEntity();
+    }
+    @Override
+    public org.bukkit.entity.Entity copy(Location location) {
+        Preconditions.checkArgument(location.getWorld() != null, "Location has no world");
+        Entity copy = copy(((CraftWorld) location.getWorld()).getHandle());
+        Preconditions.checkArgument(copy != null, "Error creating new entity.");
+        copy.setPos(location.getX(), location.getY(), location.getZ());
+        return location.getWorld().addEntity(copy.getBukkitEntity());
+    }
+    private Entity copy(net.minecraft.world.level.Level level) {
+        CompoundTag compoundTag = new CompoundTag();
+        getHandle().saveAsPassenger(compoundTag, false);
+        return net.minecraft.world.entity.EntityType.loadEntityRecursive(compoundTag, level, java.util.function.Function.identity());
+    }
+
     public void storeBukkitValues(CompoundTag c) {
         if (!this.persistentDataContainer.isEmpty()) {
             c.put("BukkitValues", this.persistentDataContainer.toTagCompound());
@@ -1088,21 +876,4 @@
         return spigot;
     }
     // Spigot end
-
-    // Paper start
-    @Override
-    public Location getOrigin() {
-        Vector originVector = this.getHandle().getOriginVector();
-        if (originVector == null) {
-            return null;
-        }
-        World world = this.getWorld();
-        if (this.getHandle().getOriginWorld() != null) {
-            world = org.bukkit.Bukkit.getWorld(this.getHandle().getOriginWorld());
-        }
-
-        //noinspection ConstantConditions
-        return originVector.toLocation(world);
-    }
-    // Paper end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftDisplay.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftDisplay.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftDisplay.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftDisplay.java	(date 1703956060000)
@@ -53,6 +53,17 @@
         getHandle().setTransformationInterpolationDuration(duration);
     }
 
+    @Override
+    public int getTeleportDuration() {
+        return this.getHandle().getEntityData().get(net.minecraft.world.entity.Display.DATA_POS_ROT_INTERPOLATION_DURATION_ID);
+    }
+
+    @Override
+    public void setTeleportDuration(int duration) {
+        Preconditions.checkArgument(duration >= 0 && duration <= 59, "duration (%s) cannot be lower than 0 or higher than 59", duration);
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.Display.DATA_POS_ROT_INTERPOLATION_DURATION_ID, duration);
+    }
+
     @Override
     public float getViewRange() {
         return getHandle().getViewRange();
Index: src/main/java/org/bukkit/event/HandlerList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/HandlerList.java b/src/main/java/org/bukkit/event/HandlerList.java
--- a/src/main/java/org/bukkit/event/HandlerList.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/HandlerList.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.event;
 
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.RegisteredListener;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.EnumMap;
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Map.Entry;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.RegisteredListener;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * A list of event handlers, stored per-event. Based on lahwran's fevents.
Index: src/main/java/org/bukkit/event/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
--- a/src/main/java/org/bukkit/event/Event.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/event/Event.java	(date 1703956060000)
@@ -1,7 +1,5 @@
 package org.bukkit.event;
 
-import com.mohistmc.banner.fabric.FabricHookBukkitEvent;
-import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginManager;
 import org.jetbrains.annotations.NotNull;
@@ -45,9 +43,6 @@
      */
     public boolean callEvent() {
         org.bukkit.Bukkit.getPluginManager().callEvent(this);
-        if (Bukkit.getServer() != null) {
-            FabricHookBukkitEvent.EVENT.invoker().hook(this);
-        }
         if (this instanceof Cancellable) {
             return !((Cancellable) this).isCancelled();
         } else {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCreeper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCreeper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCreeper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCreeper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCreeper.java	(date 1703956060000)
@@ -21,7 +21,7 @@
         CreeperPowerEvent.PowerCause cause = powered ? CreeperPowerEvent.PowerCause.SET_ON : CreeperPowerEvent.PowerCause.SET_OFF;
 
         // only call event when we are not in world generation
-        if (getHandle().bridge$generation() || !callPowerEvent(cause)) {
+        if (getHandle().generation || !callPowerEvent(cause)) {
             getHandle().setPowered(powered);
         }
     }
Index: src/main/java/org/bukkit/entity/Slime.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Slime.java b/src/main/java/org/bukkit/entity/Slime.java
--- a/src/main/java/org/bukkit/entity/Slime.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Slime.java	(date 1703956060000)
@@ -14,21 +14,4 @@
      * @param sz The new size of the slime.
      */
     public void setSize(int sz);
-
-    // Paper start
-
-    /**
-     * Get whether this slime can randomly wander/jump around on its own
-     *
-     * @return true if can wander
-     */
-    public boolean canWander();
-
-    /**
-     * Set whether this slime can randomly wander/jump around on its own
-     *
-     * @param canWander true if can wander
-     */
-    public void setWander(boolean canWander);
-    // Paper end
 }
Index: src/main/java/org/bukkit/entity/memory/MemoryKey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/memory/MemoryKey.java b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
--- a/src/main/java/org/bukkit/entity/memory/MemoryKey.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/memory/MemoryKey.java	(date 1703956060000)
@@ -1,16 +1,15 @@
 package org.bukkit.entity.memory;
 
-import org.bukkit.Keyed;
-import org.bukkit.Location;
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
+import org.bukkit.Keyed;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents a key used for accessing memory values of a
@@ -70,6 +69,7 @@
     public static final MemoryKey<Location> LIKED_NOTEBLOCK_POSITION = new MemoryKey<>(NamespacedKey.minecraft("liked_noteblock"), Location.class);
     public static final MemoryKey<Integer> LIKED_NOTEBLOCK_COOLDOWN_TICKS = new MemoryKey<>(NamespacedKey.minecraft("liked_noteblock_cooldown_ticks"), Integer.class);
     public static final MemoryKey<Integer> ITEM_PICKUP_COOLDOWN_TICKS = new MemoryKey<>(NamespacedKey.minecraft("item_pickup_cooldown_ticks"), Integer.class);
+
     public static final MemoryKey<Location> SNIFFER_EXPLORED_POSITIONS = new MemoryKey<>(NamespacedKey.minecraft("sniffer_explored_positions"), Location.class);
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftBoat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftBoat.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftBoat.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftBoat.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.stream.Collectors;
 import org.bukkit.TreeSpecies;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.entity.Boat;
 import org.bukkit.entity.Entity;
 
-import java.util.stream.Collectors;
-
 public class CraftBoat extends CraftVehicle implements Boat {
 
     public CraftBoat(CraftServer server, net.minecraft.world.entity.vehicle.Boat entity) {
@@ -38,46 +37,46 @@
 
     @Override
     public double getMaxSpeed() {
-        return getHandle().bridge$maxSpeed();
+        return getHandle().maxSpeed;
     }
 
     @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
-            getHandle().banner$setMaxSpeed(speed);
+            getHandle().maxSpeed = speed;
         }
     }
 
     @Override
     public double getOccupiedDeceleration() {
-        return getHandle().bridge$occupiedDeceleration();
+        return getHandle().occupiedDeceleration;
     }
 
     @Override
     public void setOccupiedDeceleration(double speed) {
         if (speed >= 0D) {
-            getHandle().banner$setOccupiedDeceleration(speed);
+            getHandle().occupiedDeceleration = speed;
         }
     }
 
     @Override
     public double getUnoccupiedDeceleration() {
-        return getHandle().bridge$unoccupiedDeceleration();
+        return getHandle().unoccupiedDeceleration;
     }
 
     @Override
     public void setUnoccupiedDeceleration(double speed) {
-        getHandle().banner$setUnoccupiedDeceleration(speed);
+        getHandle().unoccupiedDeceleration = speed;
     }
 
     @Override
     public boolean getWorkOnLand() {
-        return getHandle().bridge$landBoats();
+        return getHandle().landBoats;
     }
 
     @Override
     public void setWorkOnLand(boolean workOnLand) {
-        getHandle().banner$setLandBoats(workOnLand);
+        getHandle().landBoats = workOnLand;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCat.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCat.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftCat.java	(date 1703956060000)
@@ -1,9 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.world.entity.animal.CatVariant;
 import org.bukkit.DyeColor;
+import org.bukkit.Registry;
+import org.bukkit.craftbukkit.v1_20_R3.CraftRegistry;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.entity.Cat;
 
 public class CraftCat extends CraftTameableAnimal implements Cat {
@@ -24,14 +28,14 @@
 
     @Override
     public Type getCatType() {
-        return Type.values()[BuiltInRegistries.CAT_VARIANT.getId(getHandle().getVariant())];
+        return CraftType.minecraftToBukkit(getHandle().getVariant());
     }
 
     @Override
     public void setCatType(Type type) {
         Preconditions.checkArgument(type != null, "Cannot have null Type");
 
-        getHandle().setVariant(BuiltInRegistries.CAT_VARIANT.byId(type.ordinal()));
+        getHandle().setVariant(CraftType.bukkitToMinecraft(type));
     }
 
     @Override
@@ -43,4 +47,23 @@
     public void setCollarColor(DyeColor color) {
         getHandle().setCollarColor(net.minecraft.world.item.DyeColor.byId(color.getWoolData()));
     }
+
+    public static class CraftType {
+
+        public static Type minecraftToBukkit(CatVariant minecraft) {
+            Preconditions.checkArgument(minecraft != null);
+
+            net.minecraft.core.Registry<CatVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.CAT_VARIANT);
+
+            return Registry.CAT_VARIANT.get(CraftNamespacedKey.fromMinecraft(registry.getKey(minecraft)));
+        }
+
+        public static CatVariant bukkitToMinecraft(Type bukkit) {
+            Preconditions.checkArgument(bukkit != null);
+
+            net.minecraft.core.Registry<CatVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.CAT_VARIANT);
+
+            return registry.get(CraftNamespacedKey.toMinecraft(bukkit.getKey()));
+        }
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAgeable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAgeable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAgeable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAgeable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAgeable.java	(date 1703956060000)
@@ -21,12 +21,12 @@
 
     @Override
     public void setAgeLock(boolean lock) {
-        getHandle().banner$setAgeLocked(lock);
+        getHandle().ageLocked = lock;
     }
 
     @Override
     public boolean getAgeLock() {
-        return getHandle().bridge$ageLocked();
+        return getHandle().ageLocked;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAllay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAllay.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAllay.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAllay.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAllay.java	(date 1703956060000)
@@ -70,13 +70,13 @@
 
     @Override
     public void startDancing() {
-        getHandle().banner$setForceDancing(true);
+        getHandle().forceDancing = true;
         getHandle().setDancing(true);
     }
 
     @Override
     public void stopDancing() {
-        getHandle().banner$setForceDancing(false);
+        getHandle().forceDancing = false;
         getHandle().jukeboxPos = null;
         getHandle().setJukeboxPlaying(null, false);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAnimals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAnimals.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAnimals.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAnimals.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAnimals.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.UUID;
 import net.minecraft.world.entity.animal.Animal;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
@@ -8,8 +9,6 @@
 import org.bukkit.entity.Animals;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.UUID;
-
 public class CraftAnimals extends CraftAgeable implements Animals {
 
     public CraftAnimals(CraftServer server, Animal entity) {
Index: src/main/java/org/bukkit/entity/ExperienceOrb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/ExperienceOrb.java b/src/main/java/org/bukkit/entity/ExperienceOrb.java
--- a/src/main/java/org/bukkit/entity/ExperienceOrb.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/ExperienceOrb.java	(date 1703956060000)
@@ -1,5 +1,8 @@
 package org.bukkit.entity;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 /**
  * Represents an Experience Orb.
  */
@@ -18,4 +21,99 @@
      * @param value Amount of experience
      */
     public void setExperience(int value);
+
+    // Paper start
+    /**
+     * Check if this orb was spawned from a {@link ThrownExpBottle}
+     *
+     * @return if orb was spawned from a bottle
+     * @deprecated Use getSpawnReason() == EXP_BOTTLE
+     */
+    @Deprecated
+    default boolean isFromBottle() {
+        return getSpawnReason() == SpawnReason.EXP_BOTTLE;
+    }
+
+    /**
+     * Reasons for why this Experience Orb was spawned
+     */
+    enum SpawnReason {
+        /**
+         * Spawned by a player dying
+         */
+        PLAYER_DEATH,
+        /**
+         * Spawned by an entity dying after being damaged by a player
+         */
+        ENTITY_DEATH,
+        /**
+         * Spawned by player using a furnace
+         */
+        FURNACE,
+        /**
+         * Spawned by player breeding animals
+         */
+        BREED,
+        /**
+         * Spawned by player trading with a villager
+         */
+        VILLAGER_TRADE,
+        /**
+         * Spawned by player fishing
+         */
+        FISHING,
+        /**
+         * Spawned by player breaking a block that gives experience points such as Diamond Ore
+         */
+        BLOCK_BREAK,
+        /**
+         * Spawned by Bukkit API
+         */
+        CUSTOM,
+        /**
+         * Spawned by a player throwing an experience points bottle
+         */
+        EXP_BOTTLE,
+        /**
+         * Spawned by a player using a grindstone
+         */
+        GRINDSTONE,
+        /**
+         * We do not know why it was spawned
+         */
+        UNKNOWN
+    }
+
+    /**
+     * If this experience orb was triggered to be spawned by
+     * an entity such as a player, due to events such as killing entity,
+     * breaking blocks, smelting in a furnace, etc, this will return the UUID
+     * of the entity that triggered this orb to drop.
+     *
+     * In the case of an entity being killed, this will be the killers UUID.
+     *
+     * @return UUID of the player that triggered this orb to drop, or null if unknown/no triggering entity
+     */
+    @Nullable java.util.UUID getTriggerEntityId();
+
+    /**
+     * If this experience orb was spawned in relation to another
+     * entity, such as a player or other living entity death, or breeding,
+     * return the source entity UUID.
+     *
+     * In the case of breeding, this will be the new baby entities UUID.
+     * In the case of an entity being killed, this will be the dead entities UUID.
+     *
+     * @return The UUID of the entity that sourced this experience orb
+     */
+    @Nullable java.util.UUID getSourceEntityId();
+
+    /**
+     * Gets the reason that this experience orb was spawned. For any case that we
+     * do not know, such as orbs spawned before this API was added, UNKNOWN is returned.
+     * @return The reason for this orb being spawned.
+     */
+    @NotNull
+    SpawnReason getSpawnReason();
+    // Paper end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAreaEffectCloud.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAreaEffectCloud.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAreaEffectCloud.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAreaEffectCloud.java	(date 1703956060000)
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import java.util.List;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import org.bukkit.Color;
@@ -9,15 +10,16 @@
 import org.bukkit.craftbukkit.v1_20_R3.CraftParticle;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionEffectType;
+import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionType;
 import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
 import org.bukkit.entity.AreaEffectCloud;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.bukkit.potion.PotionType;
 import org.bukkit.projectiles.ProjectileSource;
-
-import java.util.List;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud {
 
@@ -107,7 +109,7 @@
 
     @Override
     public Particle getParticle() {
-        return CraftParticle.toBukkit(getHandle().getParticle());
+        return CraftParticle.minecraftToBukkit(getHandle().getParticle().getType());
     }
 
     @Override
@@ -117,7 +119,12 @@
 
     @Override
     public <T> void setParticle(Particle particle, T data) {
-        getHandle().setParticle(CraftParticle.toNMS(particle, data));
+        particle = CraftParticle.convertLegacy(particle);
+        data = CraftParticle.convertLegacy(data);
+        if (data != null) {
+            Preconditions.checkArgument(particle.getDataType().isInstance(data), "data (%s) should be %s", data.getClass(), particle.getDataType());
+        }
+        getHandle().setParticle(CraftParticle.createParticleParam(particle, data));
     }
 
     @Override
@@ -146,14 +153,14 @@
             getHandle().effects.remove(existing);
         }
         getHandle().addEffect(CraftPotionUtil.fromBukkit(effect));
-        getHandle().refreshEffects();
+        getHandle().updateColor();
         return true;
     }
 
     @Override
     public void clearCustomEffects() {
         getHandle().effects.clear();
-        getHandle().refreshEffects();
+        getHandle().updateColor();
     }
 
     @Override
@@ -193,19 +200,33 @@
             return false;
         }
         getHandle().effects.remove(existing);
-        getHandle().refreshEffects();
+        getHandle().updateColor();
         return true;
     }
 
     @Override
     public void setBasePotionData(PotionData data) {
         Preconditions.checkArgument(data != null, "PotionData cannot be null");
-        getHandle().setPotionType(CraftPotionUtil.fromBukkit(data));
+        getHandle().setPotion(CraftPotionType.bukkitToMinecraft(CraftPotionUtil.fromBukkit(data)));
     }
 
     @Override
     public PotionData getBasePotionData() {
-        return CraftPotionUtil.toBukkit(getHandle().getPotionType());
+        return CraftPotionUtil.toBukkit(CraftPotionType.minecraftToBukkit(getHandle().getPotion()));
+    }
+
+    @Override
+    public void setBasePotionType(@NotNull PotionType potionType) {
+        // TODO: 10/6/23 Change PotionType.UNCRAFTABLE to PotionType.EMPTY in error message
+        Preconditions.checkArgument(potionType != null, "PotionType cannot be null use PotionType.UNCRAFTABLE to represent no effect instead.");
+
+        getHandle().setPotion(CraftPotionType.bukkitToMinecraft(potionType));
+    }
+
+    @NotNull
+    @Override
+    public PotionType getBasePotionType() {
+        return CraftPotionType.minecraftToBukkit(getHandle().getPotion());
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArmorStand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArmorStand.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArmorStand.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArmorStand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArmorStand.java	(date 1703956060000)
@@ -221,16 +221,4 @@
     public boolean hasEquipmentLock(EquipmentSlot equipmentSlot, LockType lockType) {
         return (getHandle().disabledSlots & (1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterFlag() + lockType.ordinal() * 8)) != 0;
     }
-
-    // Paper start
-    @Override
-    public boolean canMove() {
-        return getHandle().bridge$canMove();
-    }
-
-    @Override
-    public void setCanMove(boolean move) {
-        getHandle().banner$setCanMove(move);
-    }
-    // Paper end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArrow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArrow.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArrow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftArrow.java	(date 1703956060000)
@@ -60,7 +60,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return getHandle().bridge$projectileSource();
+        return getHandle().projectileSource;
     }
 
     @Override
@@ -70,7 +70,7 @@
         } else {
             getHandle().setOwner(null);
         }
-        getHandle().banner$setProjectileSource(shooter);
+        getHandle().projectileSource = shooter;
     }
 
     @Override
Index: src/main/java/org/bukkit/entity/FishHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/FishHook.java b/src/main/java/org/bukkit/entity/FishHook.java
--- a/src/main/java/org/bukkit/entity/FishHook.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/FishHook.java	(date 1703956060000)
@@ -25,7 +25,7 @@
      * Note that this is before applying lure.
      *
      * @param minWaitTime Minimum number of ticks one has to wait for a fish
-     * appearing
+     * biting
      */
     public void setMinWaitTime(int minWaitTime);
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/event/CraftEventFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/event/CraftEventFactory.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/event/CraftEventFactory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/event/CraftEventFactory.java	(date 1703956060000)
@@ -4,12 +4,21 @@
 import com.google.common.base.Functions;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
-import com.mohistmc.banner.fabric.BukkitRegistry;
+import com.mohistmc.mohist.forge.ForgeInjectBukkit;
 import com.mojang.datafixers.util.Either;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
-import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -18,7 +27,6 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.damagesource.DamageType;
 import net.minecraft.world.damagesource.DamageTypes;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.Entity;
@@ -43,6 +51,7 @@
 import net.minecraft.world.entity.raid.Raider;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.MerchantMenu;
+import net.minecraft.world.inventory.RecipeBookType;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.context.UseOnContext;
@@ -62,8 +71,6 @@
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Server;
 import org.bukkit.Statistic.Type;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -88,9 +95,9 @@
 import org.bukkit.craftbukkit.v1_20_R3.entity.CraftSpellcaster;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryCrafting;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMetaBook;
 import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftVector;
 import org.bukkit.entity.AbstractHorse;
@@ -100,6 +107,7 @@
 import org.bukkit.entity.Creeper;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ExperienceOrb;
+import org.bukkit.entity.Explosive;
 import org.bukkit.entity.Firework;
 import org.bukkit.entity.Fish;
 import org.bukkit.entity.HumanEntity;
@@ -155,6 +163,7 @@
 import org.bukkit.event.entity.EntityDeathEvent;
 import org.bukkit.event.entity.EntityEnterLoveModeEvent;
 import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.entity.EntityInteractEvent;
 import org.bukkit.event.entity.EntityPickupItemEvent;
 import org.bukkit.event.entity.EntityPlaceEvent;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
@@ -169,6 +178,7 @@
 import org.bukkit.event.entity.EntityToggleSwimEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
 import org.bukkit.event.entity.ExpBottleEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
 import org.bukkit.event.entity.FireworkExplodeEvent;
 import org.bukkit.event.entity.FoodLevelChangeEvent;
 import org.bukkit.event.entity.HorseJumpEvent;
@@ -209,6 +219,7 @@
 import org.bukkit.event.player.PlayerItemMendEvent;
 import org.bukkit.event.player.PlayerLevelChangeEvent;
 import org.bukkit.event.player.PlayerRecipeBookClickEvent;
+import org.bukkit.event.player.PlayerRecipeBookSettingsChangeEvent;
 import org.bukkit.event.player.PlayerRecipeDiscoverEvent;
 import org.bukkit.event.player.PlayerShearEntityEvent;
 import org.bukkit.event.player.PlayerSignOpenEvent;
@@ -225,32 +236,12 @@
 import org.bukkit.event.world.EntitiesUnloadEvent;
 import org.bukkit.event.world.LootGenerateEvent;
 import org.bukkit.inventory.EquipmentSlot;
-import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.InventoryView;
-import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.potion.PotionEffect;
-
-import javax.annotation.Nullable;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
+import org.bukkit.util.Vector;
 
 public class CraftEventFactory {
-
-    // Banner start - add DamageSource Types
-    public static final ResourceKey<DamageType> MELTING = DamageTypes.ON_FIRE;
-    public static final ResourceKey<DamageType> POISON = DamageTypes.MAGIC;
-    // Banner end
-
     public static org.bukkit.block.Block blockDamage; // For use in EntityDamageByBlockEvent
     public static Entity entityDamage; // For use in EntityDamageByEntityEvent
 
@@ -278,8 +269,9 @@
      * PlayerSignOpenEvent
      */
     public static boolean callPlayerSignOpenEvent(net.minecraft.world.entity.player.Player player, SignBlockEntity tileEntitySign, boolean front, PlayerSignOpenEvent.Cause cause) {
+
         final Block block = CraftBlock.at(tileEntitySign.getLevel(), tileEntitySign.getBlockPos());
-        final Sign sign = (Sign) CraftBlockStates.getBlockState(block);
+        Sign sign = (Sign) CraftBlockStates.getBlockState(block);
         final Side side = (front) ? Side.FRONT : Side.BACK;
         return callPlayerSignOpenEvent((Player) player.getBukkitEntity(), sign, side, cause);
     }
@@ -315,7 +307,7 @@
             }
         }, t -> BedEnterResult.OK).map(java.util.function.Function.identity(), java.util.function.Function.identity());
 
-        PlayerBedEnterEvent event = new PlayerBedEnterEvent((Player) player.getBukkitEntity(), CraftBlock.at(player.level(), bed), bedEnterResult);
+        PlayerBedEnterEvent event = new PlayerBedEnterEvent((Player) player.getBukkitEntity(), CraftBlock.at(player.level, bed), bedEnterResult);
         Bukkit.getServer().getPluginManager().callEvent(event);
 
         Result result = event.useBed();
@@ -374,11 +366,10 @@
         return tradeSelectEvent;
     }
 
-    @SuppressWarnings("deprecation") // Paper use deprecated event to maintain compat (it extends modern event)
     public static boolean handleBellRingEvent(Level world, BlockPos position, Direction direction, Entity entity) {
         Block block = CraftBlock.at(world, position);
         BlockFace bukkitDirection = CraftBlock.notchToBlockFace(direction);
-        BellRingEvent event = new io.papermc.paper.event.block.BellRingEvent(block, bukkitDirection, (entity != null) ? entity.getBukkitEntity() : null); // Paper - deprecated BellRingEvent
+        BellRingEvent event = new BellRingEvent(block, bukkitDirection, (entity != null) ? entity.getBukkitEntity() : null);
         Bukkit.getPluginManager().callEvent(event);
         return !event.isCancelled();
     }
@@ -454,7 +445,7 @@
 
         if (!event.isCancelled()) {
             for (ItemEntity item : items) {
-                item.level().addFreshEntity(item);
+                item.level.addFreshEntity(item);
             }
         }
     }
@@ -469,7 +460,7 @@
         org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.notchToBlockFace(clickedFace);
 
         EntityPlaceEvent event = new EntityPlaceEvent(entity.getBukkitEntity(), who, blockClicked, blockFace, CraftEquipmentSlot.getHand(enumhand));
-        entity.level().getCraftServer().getPluginManager().callEvent(event);
+        entity.level.getCraftServer().getPluginManager().callEvent(event);
 
         return event;
     }
@@ -488,7 +479,7 @@
     private static PlayerEvent getPlayerBucketEvent(boolean isFilling, ServerLevel world, net.minecraft.world.entity.player.Player  who, BlockPos changed, BlockPos clicked, Direction clickedFace, ItemStack itemstack, net.minecraft.world.item.Item item, InteractionHand enumhand) {
         Player player = (Player) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asNewCraftStack(item);
-        Material bucket = CraftMagicNumbers.getMaterial(itemstack.getItem());
+        Material bucket = CraftItemType.minecraftToBukkit(itemstack.getItem());
 
         CraftServer craftServer = (CraftServer) player.getServer();
 
@@ -529,10 +520,11 @@
         Player player = (who == null) ? null : (Player) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
 
-        org.bukkit.util.Vector clickedPos = null;
+        Vector clickedPos = null;
         if (position != null && targetPos != null) {
             clickedPos = CraftVector.toBukkit(targetPos.subtract(Vec3.atLowerCornerOf(position)));
         }
+
         CraftWorld craftWorld = (CraftWorld) player.getWorld();
         CraftServer craftServer = (CraftServer) player.getServer();
 
@@ -623,7 +615,7 @@
         Player player = who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
 
-        Block blockClicked = CraftBlock.at(who.serverLevel(), pos);
+        Block blockClicked = CraftBlock.at(who.level(), pos);
 
         BlockDamageEvent event = new BlockDamageEvent(player, blockClicked, itemInHand, instaBreak);
         player.getServer().getPluginManager().callEvent(event);
@@ -635,7 +627,7 @@
         Player player = who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
 
-        Block blockClicked = CraftBlock.at(who.serverLevel(), pos);
+        Block blockClicked = CraftBlock.at(who.level(), pos);
 
         BlockDamageAbortEvent event = new BlockDamageAbortEvent(player, blockClicked, itemInHand);
         player.getServer().getPluginManager().callEvent(event);
@@ -687,7 +679,7 @@
             event = CraftEventFactory.callLightningStrikeEvent((LightningStrike) entity.getBukkitEntity(), cause);
             // Spigot start
         } else if (entity instanceof net.minecraft.world.entity.ExperienceOrb xp) {
-            double radius = world.bridge$spigotConfig().expMerge;
+            double radius = world.spigotConfig.expMerge;
             if (radius > 0) {
                 List<Entity> entities = world.getEntities(entity, entity.getBoundingBox().inflate(radius, radius, radius));
                 for (Entity e : entities) {
@@ -796,19 +788,45 @@
     /**
      * PotionSplashEvent
      */
-    public static PotionSplashEvent callPotionSplashEvent(ThrownPotion potion, Map<org.bukkit.entity.LivingEntity, Double> affectedEntities) {
+    public static PotionSplashEvent callPotionSplashEvent(ThrownPotion potion, HitResult position, Map<org.bukkit.entity.LivingEntity, Double> affectedEntities) {
         org.bukkit.entity.ThrownPotion thrownPotion = (org.bukkit.entity.ThrownPotion) potion.getBukkitEntity();
 
-        PotionSplashEvent event = new PotionSplashEvent(thrownPotion, affectedEntities);
+        Block hitBlock = null;
+        BlockFace hitFace = null;
+        if (position.getType() == HitResult.Type.BLOCK) {
+            BlockHitResult positionBlock = (BlockHitResult) position;
+            hitBlock = CraftBlock.at(potion.level(), positionBlock.getBlockPos());
+            hitFace = CraftBlock.notchToBlockFace(positionBlock.getDirection());
+        }
+
+        org.bukkit.entity.Entity hitEntity = null;
+        if (position.getType() == HitResult.Type.ENTITY) {
+            hitEntity = ((EntityHitResult) position).getEntity().getBukkitEntity();
+        }
+
+        PotionSplashEvent event = new PotionSplashEvent(thrownPotion, hitEntity, hitBlock, hitFace, affectedEntities);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static LingeringPotionSplashEvent callLingeringPotionSplashEvent(ThrownPotion potion, net.minecraft.world.entity.AreaEffectCloud cloud) {
+    public static LingeringPotionSplashEvent callLingeringPotionSplashEvent(ThrownPotion potion, HitResult position, net.minecraft.world.entity.AreaEffectCloud cloud) {
         org.bukkit.entity.ThrownPotion thrownPotion = (org.bukkit.entity.ThrownPotion) potion.getBukkitEntity();
         AreaEffectCloud effectCloud = (AreaEffectCloud) cloud.getBukkitEntity();
 
-        LingeringPotionSplashEvent event = new LingeringPotionSplashEvent(thrownPotion, effectCloud);
+        Block hitBlock = null;
+        BlockFace hitFace = null;
+        if (position.getType() == HitResult.Type.BLOCK) {
+            BlockHitResult positionBlock = (BlockHitResult) position;
+            hitBlock = CraftBlock.at(potion.level(), positionBlock.getBlockPos());
+            hitFace = CraftBlock.notchToBlockFace(positionBlock.getDirection());
+        }
+
+        org.bukkit.entity.Entity hitEntity = null;
+        if (position.getType() == HitResult.Type.ENTITY) {
+            hitEntity = ((EntityHitResult) position).getEntity().getBukkitEntity();
+        }
+
+        LingeringPotionSplashEvent event = new LingeringPotionSplashEvent(thrownPotion, hitEntity, hitBlock, hitFace, effectCloud);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
@@ -868,40 +886,24 @@
 
     public static EntityDeathEvent callEntityDeathEvent(LivingEntity victim, List<org.bukkit.inventory.ItemStack> drops) {
         CraftLivingEntity entity = (CraftLivingEntity) victim.getBukkitEntity();
-        EntityDeathEvent event = new EntityDeathEvent(entity, drops, victim.getExpReward());
+        EntityDeathEvent event = new EntityDeathEvent(entity, drops, victim.getExperienceReward());
         CraftWorld world = (CraftWorld) entity.getWorld();
         Bukkit.getServer().getPluginManager().callEvent(event);
 
-        victim.banner$setExpToDrop(event.getDroppedExp());
-
-        for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
-            if (stack == null || stack.getType() == Material.AIR || stack.getAmount() == 0) continue;
-
-            world.dropItem(entity.getLocation(), stack);
-        }
-
         return event;
     }
 
     public static PlayerDeathEvent callPlayerDeathEvent(ServerPlayer victim, List<org.bukkit.inventory.ItemStack> drops, String deathMessage, boolean keepInventory) {
         CraftPlayer entity = victim.getBukkitEntity();
-        PlayerDeathEvent event = new PlayerDeathEvent(entity, drops, victim.getExpReward(), 0, deathMessage);
+        PlayerDeathEvent event = new PlayerDeathEvent(entity, drops, victim.getExperienceReward(), 0, deathMessage);
         event.setKeepInventory(keepInventory);
-        event.setKeepLevel(victim.bridge$keepLevel()); // SPIGOT-2222: pre-set keepLevel
+        event.setKeepLevel(victim.keepLevel); // SPIGOT-2222: pre-set keepLevel
         org.bukkit.World world = entity.getWorld();
         Bukkit.getServer().getPluginManager().callEvent(event);
-
-        victim.banner$setKeepLevel(event.getKeepLevel());
-        victim.banner$setNewLevel(event.getNewLevel());
-        victim.banner$setNewTotalExp(event.getNewTotalExp());
-        victim.banner$setExpToDrop(event.getDroppedExp());
-        victim.banner$setNewExp(event.getNewExp());
-
-        for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
-            if (stack == null || stack.getType() == Material.AIR) continue;
-
-            world.dropItem(entity.getLocation(), stack);
-        }
+        victim.keepLevel = event.getKeepLevel();
+        victim.newLevel = event.getNewLevel();
+        victim.newTotalExp = event.getNewTotalExp();
+        victim.newExp = event.getNewExp();
 
         return event;
     }
@@ -909,12 +911,6 @@
     /**
      * Server methods
      */
-    public static ServerListPingEvent callServerListPingEvent(Server craftServer, InetAddress address, String motd, int numPlayers, int maxPlayers) {
-        ServerListPingEvent event = new ServerListPingEvent("", address, motd, numPlayers, maxPlayers);
-        craftServer.getPluginManager().callEvent(event);
-        return event;
-    }
-
     public static ServerListPingEvent callServerListPingEvent(SocketAddress address, String motd, int numPlayers, int maxPlayers) {
         ServerListPingEvent event = new ServerListPingEvent("", ((InetSocketAddress) address).getAddress(), motd, numPlayers, maxPlayers);
         Bukkit.getServer().getPluginManager().callEvent(event);
@@ -950,7 +946,7 @@
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
-                entity.banner$setLastDamageCancelled(true); // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+                entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
             return event;
         } else if (source.getEntity() != null || source.getDirectEntity() != null) {
@@ -974,14 +970,14 @@
             }
 
             return callEntityDamageEvent(damager, entity, cause, modifiers, modifierFunctions, cancelled);
-        } else if (source.is(DamageTypes.OUTSIDE_BORDER)) {
+        } else if (source.is(DamageTypes.FELL_OUT_OF_WORLD)) {
             EntityDamageEvent event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions);
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
-                entity.banner$setLastDamageCancelled(true); // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+                entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
             return event;
         } else if (source.is(DamageTypes.LAVA)) {
@@ -1007,26 +1003,9 @@
                 cause = DamageCause.MAGIC;
             } else if (source.is(DamageTypes.IN_FIRE)) {
                 cause = DamageCause.FIRE;
-            // Banner start - handle missing damage types
-            } else if (source.is(DamageTypes.ON_FIRE)) {
-                cause = DamageCause.FIRE_TICK;
-            } else if (source.is(DamageTypes.LAVA)) {
-                cause = DamageCause.LAVA;
-            } else if (damager instanceof LightningStrike) {
-                cause = DamageCause.LIGHTNING;
-            } else if (source.is(MELTING)) {
-                cause = DamageCause.MELTING;
-            } else if (source.is(POISON)) {
-                cause = DamageCause.POISON;
-            } else if (source.is(DamageTypes.LIGHTNING_BOLT)) {
-                cause = DamageCause.LIGHTNING;
-            } else if (source.is(DamageTypes.GENERIC)) {
+            } else {
                 cause = DamageCause.CUSTOM;
-            } else {
-                cause = DamageCause.CUSTOM; // Banner - handle unknown cause
             }
-            // Banner end
-
             EntityDamageEvent event = new EntityDamageByBlockEvent(damager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
             event.setCancelled(cancelled);
             blockDamage = null; // SPIGOT-6639: Clear blockDamage to allow other entity damage during event call
@@ -1035,7 +1014,7 @@
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
-                entity.banner$setLastDamageCancelled(true); // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+                entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
             return event;
         } else if (entityDamage != null) {
@@ -1052,30 +1031,16 @@
                 cause = DamageCause.DRAGON_BREATH;
             } else if (source.is(DamageTypes.MAGIC)) {
                 cause = DamageCause.MAGIC;
-            // Banner start - handle missing damage types
-            } else if (source.is(DamageTypes.CACTUS)) {
-                cause = DamageCause.CONTACT;
-            } else if (source.is(DamageTypes.IN_FIRE)) {
-                cause = DamageCause.FIRE;
-            } else if (source.is(DamageTypes.ON_FIRE)) {
-                cause = DamageCause.FIRE_TICK;
-            } else if (source.is(DamageTypes.LAVA)) {
-                cause = DamageCause.LAVA;
-            } else if (source.is(MELTING)) {
-                cause = DamageCause.MELTING;
-            } else if (source.is(POISON)) {
-                cause = DamageCause.POISON;
             } else {
-                cause = DamageCause.CUSTOM; // Banner - handle unknown cause
+                cause = DamageCause.CUSTOM;
             }
-            // Banner end
             EntityDamageEvent event = new EntityDamageByEntityEvent(damager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             } else {
-                entity.banner$setLastDamageCancelled(true); // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+                entity.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
             }
             return event;
         }
@@ -1119,9 +1084,9 @@
 
         if (cause != null) {
             return callEntityDamageEvent(null, entity, cause, modifiers, modifierFunctions, cancelled);
+        } else {
+            return new EntityDamageEvent(entity.getBukkitEntity(), DamageCause.CUSTOM, modifiers, modifierFunctions);
         }
-
-        throw new IllegalStateException(String.format("Unhandled damage of %s from %s", entity, source.getMsgId()));
     }
 
     private static EntityDamageEvent callEntityDamageEvent(Entity damager, Entity damagee, DamageCause cause, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions) {
@@ -1141,7 +1106,7 @@
         if (!event.isCancelled()) {
             event.getEntity().setLastDamageCause(event);
         } else {
-            damagee.banner$setLastDamageCancelled(true); // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+            damagee.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
         }
 
         return event;
@@ -1221,10 +1186,10 @@
         return event;
     }
 
-    public static PlayerItemMendEvent callPlayerItemMendEvent(net.minecraft.world.entity.player.Player  entity, net.minecraft.world.entity.ExperienceOrb orb, net.minecraft.world.item.ItemStack nmsMendedItem, net.minecraft.world.entity.EquipmentSlot slot, int repairAmount) {
+    public static PlayerItemMendEvent callPlayerItemMendEvent(net.minecraft.world.entity.player.Player  entity, net.minecraft.world.entity.ExperienceOrb orb, net.minecraft.world.item.ItemStack nmsMendedItem, net.minecraft.world.entity.EquipmentSlot slot, int repairAmount, java.util.function.IntUnaryOperator durabilityToXpOp) { // Paper
         Player player = (Player) entity.getBukkitEntity();
         org.bukkit.inventory.ItemStack bukkitStack = CraftItemStack.asCraftMirror(nmsMendedItem);
-        PlayerItemMendEvent event = new PlayerItemMendEvent(player, bukkitStack, CraftEquipmentSlot.getSlot(slot), (ExperienceOrb) orb.getBukkitEntity(), repairAmount);
+        PlayerItemMendEvent event = new PlayerItemMendEvent(player, bukkitStack, CraftEquipmentSlot.getSlot(slot), (ExperienceOrb) orb.getBukkitEntity(), repairAmount, durabilityToXpOp); // Paper
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
@@ -1276,20 +1241,12 @@
         return !event.isCancelled();
     }
 
-    // Paper start
-    public static com.destroystokyo.paper.event.entity.EntityZapEvent callEntityZapEvent (Entity entity, Entity lightning, Entity changedEntity) {
-        com.destroystokyo.paper.event.entity.EntityZapEvent event = new com.destroystokyo.paper.event.entity.EntityZapEvent(entity.getBukkitEntity(), (LightningStrike) lightning.getBukkitEntity(), changedEntity.getBukkitEntity());
-        entity.getBukkitEntity().getServer().getPluginManager().callEvent(event);
-        return event;
-    }
-    // Paper end
-
     public static boolean callEntityChangeBlockEvent(Entity entity, BlockPos position, net.minecraft.world.level.block.state.BlockState newBlock) {
         return callEntityChangeBlockEvent(entity, position, newBlock, false);
     }
 
     public static boolean callEntityChangeBlockEvent(Entity entity, BlockPos position, net.minecraft.world.level.block.state.BlockState newBlock, boolean cancelled) {
-        Block block = entity.level().getWorld().getBlockAt(position.getX(), position.getY(), position.getZ());
+        Block block = entity.level.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ());
 
         EntityChangeBlockEvent event = new EntityChangeBlockEvent(entity.getBukkitEntity(), block, CraftBlockData.fromData(newBlock));
         event.setCancelled(cancelled);
@@ -1317,7 +1274,7 @@
 
     public static EntityBreakDoorEvent callEntityBreakDoorEvent(Entity entity, BlockPos pos) {
         org.bukkit.entity.Entity entity1 = entity.getBukkitEntity();
-        Block block = CraftBlock.at(entity.level(), pos);
+        Block block = CraftBlock.at(entity.level, pos);
 
         EntityBreakDoorEvent event = new EntityBreakDoorEvent((org.bukkit.entity.LivingEntity) entity1, block);
         entity1.getServer().getPluginManager().callEvent(event);
@@ -1334,7 +1291,7 @@
             player.connection.handleContainerClose(new ServerboundContainerClosePacket(player.containerMenu.containerId));
         }
 
-        CraftServer server = player.level().getCraftServer();
+        CraftServer server = player.level.getCraftServer();
         CraftPlayer craftPlayer = player.getBukkitEntity();
         player.containerMenu.transferTo(container, craftPlayer);
 
@@ -1368,17 +1325,6 @@
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
-
-    // Paper start
-    @Deprecated
-    public static com.destroystokyo.paper.event.entity.ProjectileCollideEvent callProjectileCollideEvent(Entity entity, EntityHitResult position) {
-        Projectile projectile = (Projectile) entity.getBukkitEntity();
-        org.bukkit.entity.Entity collided = position.getEntity().getBukkitEntity();
-        com.destroystokyo.paper.event.entity.ProjectileCollideEvent event = new com.destroystokyo.paper.event.entity.ProjectileCollideEvent(projectile, collided);
-        Bukkit.getPluginManager().callEvent(event);
-        return event;
-    }
-    // Paper end
 
     public static ProjectileHitEvent callProjectileHitEvent(Entity entity, HitResult position) {
         if (position.getType() == HitResult.Type.MISS) {
@@ -1389,7 +1335,7 @@
         BlockFace hitFace = null;
         if (position.getType() == HitResult.Type.BLOCK) {
             BlockHitResult positionBlock = (BlockHitResult) position;
-            hitBlock = CraftBlock.at(entity.level(), positionBlock.getBlockPos());
+            hitBlock = CraftBlock.at(entity.level, positionBlock.getBlockPos());
             hitFace = CraftBlock.notchToBlockFace(positionBlock.getDirection());
         }
 
@@ -1403,21 +1349,27 @@
             return null;
         // Mohist end
 
-        // Paper start - legacy event
-        boolean cancelled = false;
-        if (hitEntity != null && position instanceof EntityHitResult entityHitResult) {
-            cancelled = callProjectileCollideEvent(entity, entityHitResult).isCancelled();
-        }
-        // Paper end
         ProjectileHitEvent event = new ProjectileHitEvent((Projectile) entity.getBukkitEntity(), hitEntity, hitBlock, hitFace);
-        event.setCancelled(cancelled); // Paper - propagate legacy event cancellation to modern event
-        entity.level().getCraftServer().getPluginManager().callEvent(event);
+        entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static ExpBottleEvent callExpBottleEvent(Entity entity, int exp) {
+    public static ExpBottleEvent callExpBottleEvent(Entity entity, HitResult position, int exp) {
         ThrownExpBottle bottle = (ThrownExpBottle) entity.getBukkitEntity();
-        ExpBottleEvent event = new ExpBottleEvent(bottle, exp);
+        Block hitBlock = null;
+        BlockFace hitFace = null;
+        if (position.getType() == HitResult.Type.BLOCK) {
+            BlockHitResult positionBlock = (BlockHitResult) position;
+            hitBlock = CraftBlock.at(entity.level(), positionBlock.getBlockPos());
+            hitFace = CraftBlock.notchToBlockFace(positionBlock.getDirection());
+        }
+
+        org.bukkit.entity.Entity hitEntity = null;
+        if (position.getType() == HitResult.Type.ENTITY) {
+            hitEntity = ((EntityHitResult) position).getEntity().getBukkitEntity();
+        }
+
+        ExpBottleEvent event = new ExpBottleEvent(bottle, hitEntity, hitBlock, hitFace, exp);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
@@ -1495,11 +1447,11 @@
         return event;
     }
 
-    public static BlockIgniteEvent callBlockIgniteEvent(Level world, int x, int y, int z, Explosion explosion) {
+    public static BlockIgniteEvent callBlockIgniteEvent(Level world, BlockPos blockposition, Explosion explosion) {
         org.bukkit.World bukkitWorld = world.getWorld();
         org.bukkit.entity.Entity igniter = explosion.source == null ? null : explosion.source.getBukkitEntity();
 
-        BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(x, y, z), IgniteCause.EXPLOSION, igniter);
+        BlockIgniteEvent event = new BlockIgniteEvent(CraftBlock.at(world, blockposition), IgniteCause.EXPLOSION, igniter);
         world.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
@@ -1510,15 +1462,15 @@
         return event;
     }
 
-    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player  human) {
+    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player human) {
         InventoryCloseEvent event = new InventoryCloseEvent(human.containerMenu.getBukkitView());
-        human.level().getCraftServer().getPluginManager().callEvent(event);
+        human.level.getCraftServer().getPluginManager().callEvent(event);
         human.containerMenu.transferTo(human.inventoryMenu, human.getBukkitEntity());
     }
 
     public static ItemStack handleEditBookEvent(ServerPlayer player, int itemInHandIndex, ItemStack itemInHand, ItemStack newBookItem) {
         PlayerEditBookEvent editBookEvent = new PlayerEditBookEvent(player.getBukkitEntity(), (itemInHandIndex >= 0 && itemInHandIndex <= 8) ? itemInHandIndex : -1, (BookMeta) CraftItemStack.getItemMeta(itemInHand), (BookMeta) CraftItemStack.getItemMeta(newBookItem), newBookItem.getItem() == Items.WRITTEN_BOOK);
-        player.level().getCraftServer().getPluginManager().callEvent(editBookEvent);
+        player.level.getCraftServer().getPluginManager().callEvent(editBookEvent);
 
         // If they've got the same item in their hand, it'll need to be updated.
         if (itemInHand != null && itemInHand.getItem() == Items.WRITABLE_BOOK) {
@@ -1528,21 +1480,28 @@
                 }
                 CraftMetaBook meta = (CraftMetaBook) editBookEvent.getNewBookMeta();
                 CraftItemStack.setItemMeta(itemInHand, meta);
+            } else {
+                player.getBukkitEntity().updateInventory(); // SPIGOT-7484
             }
         }
 
         return itemInHand;
     }
 
+    public static void callRecipeBookSettingsEvent(ServerPlayer player, RecipeBookType type, boolean open, boolean filter) {
+        PlayerRecipeBookSettingsChangeEvent.RecipeBookType bukkitType = PlayerRecipeBookSettingsChangeEvent.RecipeBookType.values()[type.ordinal()];
+        Bukkit.getPluginManager().callEvent(new PlayerRecipeBookSettingsChangeEvent(player.getBukkitEntity(), bukkitType, open, filter));
+    }
+
     public static PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(Mob entity, net.minecraft.world.entity.player.Player player, InteractionHand enumhand) {
         PlayerUnleashEntityEvent event = new PlayerUnleashEntityEvent(entity.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand));
-        entity.level().getCraftServer().getPluginManager().callEvent(event);
+        entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static PlayerLeashEntityEvent callPlayerLeashEntityEvent(Mob entity, Entity leashHolder, net.minecraft.world.entity.player.Player player, InteractionHand enumhand) {
         PlayerLeashEntityEvent event = new PlayerLeashEntityEvent(entity.getBukkitEntity(), leashHolder.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand));
-        entity.level().getCraftServer().getPluginManager().callEvent(event);
+        entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1568,10 +1527,9 @@
         if (true) {
             org.bukkit.Statistic stat = CraftStatistic.getBukkitStatistic(statistic);
             if (stat == null) {
-                stat = BukkitRegistry.statisticMap.get(statistic.getType());
+                stat = ForgeInjectBukkit.statisticMap.get(statistic.getType());
             }
             if (stat == null) {
-                System.err.println("Unhandled statistic: " + statistic);
                 return null;
             }
             switch (stat) {
@@ -1609,13 +1567,13 @@
                 event = new PlayerStatisticIncrementEvent(player, stat, current, newValue, material);
             }
         }
-        entityHuman.level().getCraftServer().getPluginManager().callEvent(event);
+        entityHuman.level.getCraftServer().getPluginManager().callEvent(event);
         return (Cancellable) event;
     }
 
     public static FireworkExplodeEvent callFireworkExplodeEvent(FireworkRocketEntity firework) {
         FireworkExplodeEvent event = new FireworkExplodeEvent((Firework) firework.getBukkitEntity());
-        firework.level().getCraftServer().getPluginManager().callEvent(event);
+        firework.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1639,22 +1597,37 @@
         event.getInventory().setResult(event.getResult());
         return event;
     }
+
+    /**
+     * Mob spawner event.
+     */
+    public static SpawnerSpawnEvent callSpawnerSpawnEvent(Entity spawnee, BlockPos pos) {
+        org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntity entity = spawnee.getBukkitEntity();
+        BlockState state = CraftBlock.at(spawnee.level(), pos).getState();
+        if (!(state instanceof org.bukkit.block.CreatureSpawner)) {
+            state = null;
+        }
+
+        SpawnerSpawnEvent event = new SpawnerSpawnEvent(entity, (org.bukkit.block.CreatureSpawner) state);
+        entity.getServer().getPluginManager().callEvent(event);
+        return event;
+    }
 
     public static EntityToggleGlideEvent callToggleGlideEvent(LivingEntity entity, boolean gliding) {
         EntityToggleGlideEvent event = new EntityToggleGlideEvent((org.bukkit.entity.LivingEntity) entity.getBukkitEntity(), gliding);
-        entity.level().getCraftServer().getPluginManager().callEvent(event);
+        entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static EntityToggleSwimEvent callToggleSwimEvent(LivingEntity entity, boolean swimming) {
         EntityToggleSwimEvent event = new EntityToggleSwimEvent((org.bukkit.entity.LivingEntity) entity.getBukkitEntity(), swimming);
-        entity.level().getCraftServer().getPluginManager().callEvent(event);
+        entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static AreaEffectCloudApplyEvent callAreaEffectCloudApplyEvent(net.minecraft.world.entity.AreaEffectCloud cloud, List<org.bukkit.entity.LivingEntity> entities) {
         AreaEffectCloudApplyEvent event = new AreaEffectCloudApplyEvent((AreaEffectCloud) cloud.getBukkitEntity(), entities);
-        cloud.level().getCraftServer().getPluginManager().callEvent(event);
+        cloud.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1670,7 +1643,7 @@
         CraftItemStack bredWithStack = bredWith == null ? null : CraftItemStack.asCraftMirror(bredWith).clone();
 
         EntityBreedEvent event = new EntityBreedEvent((org.bukkit.entity.LivingEntity) child.getBukkitEntity(), (org.bukkit.entity.LivingEntity) mother.getBukkitEntity(), (org.bukkit.entity.LivingEntity) father.getBukkitEntity(), breederEntity, bredWithStack, experience);
-        child.level().getCraftServer().getPluginManager().callEvent(event);
+        child.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1679,7 +1652,7 @@
         BlockPhysicsEvent event = new BlockPhysicsEvent(block, block.getBlockData());
         // Suppress during worldgen
         if (world instanceof Level) {
-            Objects.requireNonNull(((Level) world).getServer()).bridge$server().getPluginManager().callEvent(event);
+            ((Level) world).getServer().server.getPluginManager().callEvent(event);
         }
         return event;
     }
@@ -1798,24 +1771,9 @@
     public static LootGenerateEvent callLootGenerateEvent(Container inventory, LootTable lootTable, LootContext lootInfo, List<ItemStack> loot, boolean plugin) {
         CraftWorld world = lootInfo.getLevel().getWorld();
         Entity entity = lootInfo.getParamOrNull(LootContextParams.THIS_ENTITY);
-        ResourceLocation nms = world.getHandle().getServer().getLootData().bridge$lootTableToKey().get(lootTable);
-        if (nms == null) {
-            return null;
-        }
-        NamespacedKey key = CraftNamespacedKey.fromMinecraft(nms);
-        CraftLootTable craftLootTable = new CraftLootTable(key, lootTable);
         List<org.bukkit.inventory.ItemStack> bukkitLoot = loot.stream().map(CraftItemStack::asCraftMirror).collect(Collectors.toCollection(ArrayList::new));
 
-        InventoryHolder owner;
-
-        try {
-            owner = inventory.getOwner();
-        }catch ( AbstractMethodError error ){
-            //MohistMC.LOGGER.error( "An error occurred while handling Mod inventory: "+error.getMessage() );
-            owner = null;
-        }
-
-        LootGenerateEvent event = new LootGenerateEvent(world, (entity != null ? entity.getBukkitEntity() : null), owner, craftLootTable, CraftLootTable.convertContext(lootInfo), bukkitLoot, plugin);
+        LootGenerateEvent event = new LootGenerateEvent(world, (entity != null ? entity.getBukkitEntity() : null), inventory.getOwner(), lootTable.craftLootTable, CraftLootTable.convertContext(lootInfo), bukkitLoot, plugin);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
@@ -1861,27 +1819,13 @@
         EntitiesLoadEvent event = new EntitiesLoadEvent(new CraftChunk((ServerLevel ) world, coords.x, coords.z), bukkitEntities);
         Bukkit.getPluginManager().callEvent(event);
     }
+
     public static void callEntitiesUnloadEvent(Level world, ChunkPos coords, List<Entity> entities) {
         List<org.bukkit.entity.Entity> bukkitEntities = Collections.unmodifiableList(entities.stream().map(Entity::getBukkitEntity).collect(Collectors.toList()));
         EntitiesUnloadEvent event = new EntitiesUnloadEvent(new CraftChunk((ServerLevel ) world, coords.x, coords.z), bukkitEntities);
         Bukkit.getPluginManager().callEvent(event);
     }
 
-    /**
-     * Mob spawner event.
-     */
-    public static SpawnerSpawnEvent callSpawnerSpawnEvent(Entity spawnee, BlockPos pos) {
-        CraftEntity entity = spawnee.getBukkitEntity();
-        BlockState state = entity.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()).getState();
-        if (!(state instanceof org.bukkit.block.CreatureSpawner)) {
-            state = null;
-        }
-
-        SpawnerSpawnEvent event = new SpawnerSpawnEvent(entity, (org.bukkit.block.CreatureSpawner) state);
-        entity.getServer().getPluginManager().callEvent(event);
-        return event;
-    }
-
     public static boolean callTNTPrimeEvent(Level world, BlockPos pos, TNTPrimeEvent.PrimeCause cause, Entity causingEntity, BlockPos causePosition) {
         org.bukkit.entity.Entity bukkitEntity = (causingEntity == null) ? null : causingEntity.getBukkitEntity();
         org.bukkit.block.Block bukkitBlock = (causePosition == null) ? null : CraftBlock.at(world, causePosition);
@@ -1892,7 +1836,7 @@
         return !event.isCancelled();
     }
 
-    public static PlayerRecipeBookClickEvent callRecipeBookClickEvent(ServerPlayer player, Recipe recipe, boolean shiftClick) {
+    public static PlayerRecipeBookClickEvent callRecipeBookClickEvent(ServerPlayer player, org.bukkit.inventory.Recipe recipe, boolean shiftClick) {
         PlayerRecipeBookClickEvent event = new PlayerRecipeBookClickEvent(player.getBukkitEntity(), recipe, shiftClick);
         Bukkit.getPluginManager().callEvent(event);
         return event;
@@ -1905,6 +1849,25 @@
 
         Bukkit.getPluginManager().callEvent(event);
 
+        return event;
+    }
+
+    public static boolean callEntityInteractEvent(Entity nmsEntity, Block block) {
+        EntityInteractEvent event = new EntityInteractEvent(nmsEntity.getBukkitEntity(), block);
+        Bukkit.getPluginManager().callEvent(event);
+
+        return !event.isCancelled();
+    }
+
+    public static ExplosionPrimeEvent callExplosionPrimeEvent(Explosive explosive) {
+        ExplosionPrimeEvent event = new ExplosionPrimeEvent(explosive);
+        Bukkit.getPluginManager().callEvent(event);
+        return event;
+    }
+
+    public static ExplosionPrimeEvent callExplosionPrimeEvent(Entity nmsEntity, float size, boolean fire) {
+        ExplosionPrimeEvent event = new ExplosionPrimeEvent(nmsEntity.getBukkitEntity(), size, fire);
+        Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 }
Index: src/main/java/org/bukkit/entity/Enderman.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Enderman.java b/src/main/java/org/bukkit/entity/Enderman.java
--- a/src/main/java/org/bukkit/entity/Enderman.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Enderman.java	(date 1703956060000)
@@ -41,7 +41,6 @@
      */
     public void setCarriedBlock(@Nullable BlockData blockData);
 
-
     /**
      * Randomly teleports the Enderman in a 64x64x64 block cuboid region.
      * <p>
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPack.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPack.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPack.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPack.java	(date 1703956060000)
@@ -1,7 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.packs;
 
+import java.io.IOException;
+import java.util.Set;
+import java.util.stream.Collectors;
+import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.metadata.pack.PackMetadataSection;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackSource;
+import net.minecraft.util.InclusiveRange;
 import org.bukkit.Bukkit;
 import org.bukkit.FeatureFlag;
 import org.bukkit.NamespacedKey;
@@ -10,15 +16,18 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage;
 import org.bukkit.packs.DataPack;
 
-import java.util.Set;
-import java.util.stream.Collectors;
-
 public class CraftDataPack implements DataPack {
 
     private final Pack handle;
+    private final PackMetadataSection resourcePackInfo;
 
     public CraftDataPack(Pack handler) {
         this.handle = handler;
+        try (PackResources iresourcepack = this.handle.resources.openPrimary(this.handle.getId())) {
+            this.resourcePackInfo = iresourcepack.getMetadataSection(PackMetadataSection.TYPE);
+        } catch (IOException e) { // This is already called in NMS then if in NMS not happen is secure this not throw here
+            throw new RuntimeException(e);
+        }
     }
 
     public Pack getHandle() {
@@ -41,7 +50,17 @@
 
     @Override
     public int getPackFormat() {
-        return 0;
+        return this.resourcePackInfo.packFormat();
+    }
+
+    @Override
+    public int getMinSupportedPackFormat() {
+        return this.resourcePackInfo.supportedFormats().orElse(new InclusiveRange<>(this.getPackFormat())).minInclusive();
+    }
+
+    @Override
+    public int getMaxSupportedPackFormat() {
+        return this.resourcePackInfo.supportedFormats().orElse(new InclusiveRange<>(this.getPackFormat())).maxInclusive();
     }
 
     @Override
@@ -90,6 +109,6 @@
     @Override
     public String toString() {
         String requestedFeatures = getRequestedFeatures().stream().map(featureFlag -> featureFlag.getKey().toString()).collect(Collectors.joining(","));
-        return "CraftDataPack{rawId=" + this.getRawId() + ",id=" + this.getKey() + ",title=" + this.getTitle() + ",description=" + this.getDescription() + ",packformat=" + this.getPackFormat() + ",compatibility=" + this.getCompatibility() + ",source=" + this.getSource() + ",enabled=" + this.isEnabled() + ",requestedFeatures=[" + requestedFeatures + "]}";
+        return "CraftDataPack{rawId=" + this.getRawId() + ",id=" + this.getKey() + ",title=" + this.getTitle() + ",description=" + this.getDescription() + ",packformat=" + this.getPackFormat() + ",minSupportedPackFormat=" + this.getMinSupportedPackFormat() + ",maxSupportedPackFormat=" + this.getMaxSupportedPackFormat() + ",compatibility=" + this.getCompatibility() + ",source=" + this.getSource() + ",enabled=" + this.isEnabled() + ",requestedFeatures=[" + requestedFeatures + "]}";
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPackManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPackManager.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPackManager.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPackManager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/packs/CraftDataPackManager.java	(date 1703956060000)
@@ -1,23 +1,22 @@
 package org.bukkit.craftbukkit.v1_20_R3.packs;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.resources.ResourceLocation;
+import java.util.Collection;
+import java.util.Objects;
+import java.util.stream.Collectors;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackRepository;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntityType;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.entity.EntityType;
 import org.bukkit.packs.DataPack;
 import org.bukkit.packs.DataPackManager;
 
-import java.util.Collection;
-import java.util.Objects;
-import java.util.stream.Collectors;
-
 public class CraftDataPackManager implements DataPackManager {
 
     private final PackRepository handle;
@@ -51,7 +50,7 @@
         Preconditions.checkArgument(world != null, "world cannot be null");
 
         CraftWorld craftWorld = ((CraftWorld) world);
-        return craftWorld.getHandle().bridge$serverLevelDataCB().getDataConfiguration().dataPacks().getEnabled().stream().map(packName -> {
+        return craftWorld.getHandle().K.getDataConfiguration().dataPacks().getEnabled().stream().map(packName -> {
             Pack resourcePackLoader = this.getHandle().getPack(packName);
             if (resourcePackLoader != null) {
                 return new CraftDataPack(resourcePackLoader);
@@ -65,7 +64,7 @@
         Preconditions.checkArgument(world != null, "world cannot be null");
 
         CraftWorld craftWorld = ((CraftWorld) world);
-        return craftWorld.getHandle().bridge$serverLevelDataCB().getDataConfiguration().dataPacks().getDisabled().stream().map(packName -> {
+        return craftWorld.getHandle().K.getDataConfiguration().dataPacks().getDisabled().stream().map(packName -> {
             Pack resourcePackLoader = this.getHandle().getPack(packName);
             if (resourcePackLoader != null) {
                 return new CraftDataPack(resourcePackLoader);
@@ -82,9 +81,9 @@
 
         CraftWorld craftWorld = ((CraftWorld) world);
         if (material.isItem()) {
-            return CraftMagicNumbers.getItem(material).isEnabled(craftWorld.getHandle().enabledFeatures());
+            return CraftItemType.bukkitToMinecraft(material).isEnabled(craftWorld.getHandle().enabledFeatures());
         } else if (material.isBlock()) {
-            return CraftMagicNumbers.getBlock(material).isEnabled(craftWorld.getHandle().enabledFeatures());
+            return CraftBlockType.bukkitToMinecraft(material).isEnabled(craftWorld.getHandle().enabledFeatures());
         }
         return false;
     }
@@ -96,7 +95,7 @@
         Preconditions.checkArgument(entityType != EntityType.UNKNOWN, "EntityType.UNKNOWN its not allowed here");
 
         CraftWorld craftWorld = ((CraftWorld) world);
-        net.minecraft.world.entity.EntityType<?> nmsEntity = BuiltInRegistries.ENTITY_TYPE.get(new ResourceLocation(entityType.getKey().getKey()));
+        net.minecraft.world.entity.EntityType<?> nmsEntity = CraftEntityType.bukkitToMinecraft(entityType);
         return nmsEntity.isEnabled(craftWorld.getHandle().enabledFeatures());
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/entity/Horse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Horse.java b/src/main/java/org/bukkit/entity/Horse.java
--- a/src/main/java/org/bukkit/entity/Horse.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Horse.java	(date 1703956060000)
@@ -34,14 +34,21 @@
          */
         SKELETON_HORSE,
         /**
-         * Not really a horse :)
+         * Not really a horse ^_^
          */
         LLAMA,
         /**
-         * Also not really a horse :)
+         * Also not really a horse ^_^
          */
         CAMEL,
-        ;
+        /**
+         * FORGE_MOD_CHEST_HORSE
+         */
+        FORGE_MOD_CHEST_HORSE,
+        /**
+         * FORGE MOD HORSE
+         */
+        FORGE_MOD_HORSE
     }
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/AbstractProjectile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/AbstractProjectile.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/AbstractProjectile.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/AbstractProjectile.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/AbstractProjectile.java	(date 1703956060000)
@@ -5,21 +5,16 @@
 
 public abstract class AbstractProjectile extends CraftEntity implements Projectile {
 
-    private boolean doesBounce;
-
     public AbstractProjectile(CraftServer server, net.minecraft.world.entity.Entity entity) {
         super(server, entity);
-        doesBounce = false;
     }
 
     @Override
     public boolean doesBounce() {
-        return doesBounce;
+        return false;
     }
 
     @Override
-    public void setBounce(boolean doesBounce) {
-        this.doesBounce = doesBounce;
-    }
+    public void setBounce(boolean doesBounce) {}
 
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractHorse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractHorse.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractHorse.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractHorse.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.UUID;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryAbstractHorse;
 import org.bukkit.entity.AbstractHorse;
@@ -8,8 +9,6 @@
 import org.bukkit.entity.Horse;
 import org.bukkit.inventory.AbstractHorseInventory;
 
-import java.util.UUID;
-
 public abstract class CraftAbstractHorse extends CraftAnimals implements AbstractHorse {
 
     public CraftAbstractHorse(CraftServer server, net.minecraft.world.entity.animal.horse.AbstractHorse entity) {
@@ -45,7 +44,7 @@
     @Override
     public void setMaxDomestication(int value) {
         Preconditions.checkArgument(value > 0, "Max domestication (%s) cannot be zero or less", value);
-        getHandle().banner$setMaxDomestication(value);
+        getHandle().maxDomestication = value;
     }
 
     @Override
Index: src/main/java/org/bukkit/entity/Raider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Raider.java b/src/main/java/org/bukkit/entity/Raider.java
--- a/src/main/java/org/bukkit/entity/Raider.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Raider.java	(date 1703956060000)
@@ -8,7 +8,6 @@
 
 public interface Raider extends Monster {
 
-
     /**
      * Set the {@link Raid} that this raider is participating in.
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractVillager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractVillager.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractVillager.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractVillager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/entity/CraftAbstractVillager.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.entity;
 
+import java.util.List;
 import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventory;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftMerchant;
@@ -9,8 +10,6 @@
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.MerchantRecipe;
 
-import java.util.List;
-
 public class CraftAbstractVillager extends CraftAgeable implements AbstractVillager, InventoryHolder {
 
     public CraftAbstractVillager(CraftServer server, net.minecraft.world.entity.npc.AbstractVillager entity) {
@@ -19,7 +18,7 @@
 
     @Override
     public net.minecraft.world.entity.npc.AbstractVillager getHandle() {
-        return (net.minecraft.world.entity.npc.AbstractVillager) this.entity;
+        return (net.minecraft.world.entity.npc.AbstractVillager) entity;
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSign.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSign.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSign.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSign.java	(date 1703956060000)
@@ -27,23 +27,31 @@
         this.back = new CraftSignSide(this.getSnapshot().getBackText());
     }
 
+    protected CraftSign(CraftSign<T> state) {
+        super(state);
+        this.front = new CraftSignSide(this.getSnapshot().getFrontText());
+        this.back = new CraftSignSide(this.getSnapshot().getBackText());
+    }
+
+    @Override
+    public CraftSign<T> copy() {
+        return new CraftSign<T>(this);
+    }
+
     public static void openSign(Sign sign, Player player, Side side) {
         Preconditions.checkArgument(sign != null, "sign == null");
+        Preconditions.checkArgument(side != null, "side == null");
         Preconditions.checkArgument(sign.isPlaced(), "Sign must be placed");
         Preconditions.checkArgument(sign.getWorld() == player.getWorld(), "Sign must be in same world as Player");
 
-        // Paper start
-        io.papermc.paper.event.player.PlayerOpenSignEvent event = new io.papermc.paper.event.player.PlayerOpenSignEvent((Player) player, sign, side, io.papermc.paper.event.player.PlayerOpenSignEvent.Cause.PLUGIN);
-
-        if (!CraftEventFactory.callPlayerSignOpenEvent(player, sign, side, PlayerSignOpenEvent.Cause.PLUGIN) || !event.callEvent()) {
+        if (!CraftEventFactory.callPlayerSignOpenEvent(player, sign, side, PlayerSignOpenEvent.Cause.PLUGIN)) {
             return;
         }
-        // Paper end
 
         SignBlockEntity handle = ((CraftSign<?>) sign).getTileEntity();
         handle.setAllowedPlayerEditor(player.getUniqueId());
 
-        ((CraftPlayer) player).getHandle().openTextEdit(handle,Side.FRONT == side);
+        ((CraftPlayer) player).getHandle().openTextEdit(handle, Side.FRONT == side);
     }
 
     @Override
@@ -71,17 +79,15 @@
         this.setWaxed(!editable);
     }
 
-    // Paper start
     @Override
     public boolean isWaxed() {
-        return this.getSnapshot().isWaxed();
+        return getSnapshot().isWaxed();
     }
 
     @Override
-    public void setWaxed(final boolean waxed) {
-        this.getSnapshot().setWaxed(waxed);
+    public void setWaxed(boolean waxed) {
+        getSnapshot().setWaxed(waxed);
     }
-    // Paper end
 
     @Override
     public boolean isGlowingText() {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSkull.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSkull.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSkull.java	(date 1703956060000)
@@ -1,9 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.authlib.GameProfile;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import org.bukkit.Bukkit;
 import org.bukkit.NamespacedKey;
@@ -16,7 +16,6 @@
 import org.bukkit.block.data.Directional;
 import org.bukkit.block.data.Rotatable;
 import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer;
-import org.bukkit.craftbukkit.v1_20_R3.profile.CraftGameProfile;
 import org.bukkit.craftbukkit.v1_20_R3.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.profile.PlayerProfile;
@@ -31,6 +30,10 @@
         super(world, te);
     }
 
+    protected CraftSkull(CraftSkull state) {
+        super(state);
+    }
+
     @Override
     public void load(SkullBlockEntity skull) {
         super.load(skull);
@@ -72,7 +75,7 @@
             return false;
         }
 
-        GameProfile profile = BukkitExtraConstants.getServer().getProfileCache().get(name).orElse(null);
+        GameProfile profile = MinecraftServer.getServer().getProfileCache().get(name).orElse(null);
         if (profile == null) {
             return false;
         }
@@ -103,7 +106,7 @@
         if (player instanceof CraftPlayer) {
             this.profile = ((CraftPlayer) player).getProfile();
         } else {
-            this.profile = new CraftGameProfile(player.getUniqueId(), player.getName());
+            this.profile = new GameProfile(player.getUniqueId(), player.getName());
         }
     }
 
@@ -199,4 +202,9 @@
             skull.setOwner(profile);
         }
     }
+
+    @Override
+    public CraftSkull copy() {
+        return new CraftSkull(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSmoker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSmoker.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSmoker.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSmoker.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSmoker.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftSmoker(World world, SmokerBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftSmoker(CraftSmoker state) {
+        super(state);
+    }
+
+    @Override
+    public CraftSmoker copy() {
+        return new CraftSmoker(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftStructureBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftStructureBlock.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftStructureBlock.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftStructureBlock.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftStructureBlock.java	(date 1703956060000)
@@ -4,7 +4,6 @@
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.state.properties.StructureMode;
-import org.apache.commons.lang3.Validate;
 import org.bukkit.World;
 import org.bukkit.block.Structure;
 import org.bukkit.block.structure.Mirror;
@@ -23,6 +22,10 @@
         super(world, structure);
     }
 
+    protected CraftStructureBlock(CraftStructureBlock state) {
+        super(state);
+    }
+
     @Override
     public String getStructureName() {
         return getSnapshot().getStructureName();
@@ -59,9 +62,9 @@
 
     @Override
     public void setRelativePosition(BlockVector vector) {
-        Validate.isTrue(isBetween(vector.getBlockX(), -MAX_SIZE, MAX_SIZE), "Structure Size (X) must be between -" + MAX_SIZE + " and " + MAX_SIZE);
-        Validate.isTrue(isBetween(vector.getBlockY(), -MAX_SIZE, MAX_SIZE), "Structure Size (Y) must be between -" + MAX_SIZE + " and " + MAX_SIZE);
-        Validate.isTrue(isBetween(vector.getBlockZ(), -MAX_SIZE, MAX_SIZE), "Structure Size (Z) must be between -" + MAX_SIZE + " and " + MAX_SIZE);
+        Preconditions.checkArgument(isBetween(vector.getBlockX(), -MAX_SIZE, MAX_SIZE), "Structure Size (X) must be between -%s and %s but got %s", MAX_SIZE, MAX_SIZE, vector.getBlockX());
+        Preconditions.checkArgument(isBetween(vector.getBlockY(), -MAX_SIZE, MAX_SIZE), "Structure Size (Y) must be between -%s and %s but got %s", MAX_SIZE, MAX_SIZE, vector.getBlockY());
+        Preconditions.checkArgument(isBetween(vector.getBlockZ(), -MAX_SIZE, MAX_SIZE), "Structure Size (Z) must be between -%s and %s but got %s", MAX_SIZE, MAX_SIZE, vector.getBlockZ());
         getSnapshot().structurePos = CraftBlockVector.toBlockPosition(vector);
     }
 
@@ -72,14 +75,15 @@
 
     @Override
     public void setStructureSize(BlockVector vector) {
-        Validate.isTrue(isBetween(vector.getBlockX(), 0, MAX_SIZE), "Structure Size (X) must be between 0 and " + MAX_SIZE);
-        Validate.isTrue(isBetween(vector.getBlockY(), 0, MAX_SIZE), "Structure Size (Y) must be between 0 and " + MAX_SIZE);
-        Validate.isTrue(isBetween(vector.getBlockZ(), 0, MAX_SIZE), "Structure Size (Z) must be between 0 and " + MAX_SIZE);
+        Preconditions.checkArgument(isBetween(vector.getBlockX(), 0, MAX_SIZE), "Structure Size (X) must be between %s and %s but got %s", 0, MAX_SIZE, vector.getBlockX());
+        Preconditions.checkArgument(isBetween(vector.getBlockY(), 0, MAX_SIZE), "Structure Size (Y) must be between %s and %s but got %s", 0, MAX_SIZE, vector.getBlockY());
+        Preconditions.checkArgument(isBetween(vector.getBlockZ(), 0, MAX_SIZE), "Structure Size (Z) must be between %s and %s but got %s", 0, MAX_SIZE, vector.getBlockZ());
         getSnapshot().structureSize = CraftBlockVector.toBlockPosition(vector);
     }
 
     @Override
     public void setMirror(Mirror mirror) {
+        Preconditions.checkArgument(mirror != null, "Mirror cannot be null");
         getSnapshot().mirror = net.minecraft.world.level.block.Mirror.valueOf(mirror.name());
     }
 
@@ -90,6 +94,7 @@
 
     @Override
     public void setRotation(StructureRotation rotation) {
+        Preconditions.checkArgument(rotation != null, "StructureRotation cannot be null");
         getSnapshot().rotation = Rotation.valueOf(rotation.name());
     }
 
@@ -100,6 +105,7 @@
 
     @Override
     public void setUsageMode(UsageMode mode) {
+        Preconditions.checkArgument(mode != null, "UsageMode cannot be null");
         getSnapshot().mode = StructureMode.valueOf(mode.name());
     }
 
@@ -140,7 +146,7 @@
 
     @Override
     public void setIntegrity(float integrity) {
-        Validate.isTrue(isBetween(integrity, 0.0f, 1.0f), "Integrity must be between 0.0f and 1.0f");
+        Preconditions.checkArgument(isBetween(integrity, 0.0f, 1.0f), "Integrity must be between 0.0f and 1.0f but got %s", integrity);
         getSnapshot().integrity = integrity;
     }
 
@@ -161,7 +167,7 @@
 
     @Override
     public void setMetadata(String metadata) {
-        Validate.notNull(metadata, "Structure metadata cannot be null");
+        Preconditions.checkArgument(metadata != null, "Structure metadata cannot be null");
         if (getUsageMode() == UsageMode.DATA) {
             getSnapshot().metaData = metadata;
         }
@@ -190,6 +196,11 @@
         }
     }
 
+    @Override
+    public CraftStructureBlock copy() {
+        return new CraftStructureBlock(this);
+    }
+
     private static boolean isBetween(int num, int min, int max) {
         return num >= min && num <= max;
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSuspiciousSand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSuspiciousSand.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSuspiciousSand.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSuspiciousSand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSuspiciousSand.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftSuspiciousSand(World world, BrushableBlockEntity tileEntity) {
         super(world, tileEntity);
     }
+
+    protected CraftSuspiciousSand(CraftSuspiciousSand state) {
+        super(state);
+    }
+
+    @Override
+    public CraftSuspiciousSand copy() {
+        return new CraftSuspiciousSand(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/EnderDragon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/EnderDragon.java b/src/main/java/org/bukkit/entity/EnderDragon.java
--- a/src/main/java/org/bukkit/entity/EnderDragon.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/EnderDragon.java	(date 1703956060000)
@@ -85,12 +85,7 @@
     /**
      * Get the {@link DragonBattle} associated with this EnderDragon.
      *
-     * <br>
-     * This will return null for the following reasons:
-     * <ul>
-     *     <li>The EnderDragon is not in the End dimension</li>
-     *     <li>The EnderDragon was summoned by command/API</li>
-     * </ul>
+     * This will return null if the EnderDragon is not in the End dimension.
      *
      * @return the dragon battle
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJukebox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJukebox.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJukebox.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJukebox.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJukebox.java	(date 1703956060000)
@@ -11,7 +11,7 @@
 import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryJukebox;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.inventory.JukeboxInventory;
 
 public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> implements Jukebox {
@@ -19,6 +19,10 @@
     public CraftJukebox(World world, JukeboxBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftJukebox(CraftJukebox state) {
+        super(state);
+    }
     @Override
     public JukeboxInventory getSnapshotInventory() {
         return new CraftInventoryJukebox(this.getSnapshot());
@@ -63,7 +67,7 @@
 
     @Override
     public void setPlaying(Material record) {
-        if (record == null || CraftMagicNumbers.getItem(record) == null) {
+        if (record == null || CraftItemType.bukkitToMinecraft(record) == null) {
             record = Material.AIR;
         }
 
@@ -77,7 +81,7 @@
 
     @Override
     public org.bukkit.inventory.ItemStack getRecord() {
-        ItemStack record = this.getSnapshot().getFirstItem();
+        ItemStack record = this.getSnapshot().getTheItem();
         return CraftItemStack.asBukkitCopy(record);
     }
 
@@ -110,14 +114,14 @@
             return false;
         }
 
-        ItemStack record = jukebox.getFirstItem();
+        ItemStack record = jukebox.getTheItem();
         if (record.isEmpty() || isPlaying()) {
             return false;
         }
 
         jukebox.isPlaying = true;
         jukebox.recordStartedTick = jukebox.tickCount;
-        getWorld().playEffect(getLocation(), Effect.RECORD_PLAY, CraftMagicNumbers.getMaterial(record.getItem()));
+        getWorld().playEffect(getLocation(), Effect.RECORD_PLAY, CraftItemType.minecraftToBukkit(record.getItem()));
         return true;
     }
 
@@ -142,8 +146,13 @@
         if (!(tileEntity instanceof JukeboxBlockEntity)) return false;
 
         JukeboxBlockEntity jukebox = (JukeboxBlockEntity) tileEntity;
-        boolean result = !jukebox.getFirstItem().isEmpty();
+        boolean result = !jukebox.getTheItem().isEmpty();
         jukebox.popOutRecord();
         return result;
     }
+
+    @Override
+    public CraftJukebox copy() {
+        return new CraftJukebox(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Cat.java b/src/main/java/org/bukkit/entity/Cat.java
--- a/src/main/java/org/bukkit/entity/Cat.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Cat.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.entity;
 
 import org.bukkit.DyeColor;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -41,17 +43,29 @@
     /**
      * Represents the various different cat types there are.
      */
-    public enum Type {
-        TABBY,
-        BLACK,
-        RED,
-        SIAMESE,
-        BRITISH_SHORTHAIR,
-        CALICO,
-        PERSIAN,
-        RAGDOLL,
-        WHITE,
-        JELLIE,
-        ALL_BLACK;
+    public enum Type implements Keyed {
+        TABBY("tabby"),
+        BLACK("black"),
+        RED("red"),
+        SIAMESE("siamese"),
+        BRITISH_SHORTHAIR("british_shorthair"),
+        CALICO("calico"),
+        PERSIAN("persian"),
+        RAGDOLL("ragdoll"),
+        WHITE("white"),
+        JELLIE("jellie"),
+        ALL_BLACK("all_black");
+
+        private final NamespacedKey key;
+
+        private Type(String key) {
+            this.key = NamespacedKey.minecraft(key);
+        }
+
+        @Override
+        @NotNull
+        public NamespacedKey getKey() {
+            return key;
+        }
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLectern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLectern.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLectern.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLectern.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLectern.java	(date 1703956060000)
@@ -14,6 +14,10 @@
         super(world, te);
     }
 
+    protected CraftLectern(CraftLectern state) {
+        super(state);
+    }
+
     @Override
     public int getPage() {
         return getSnapshot().getPage();
@@ -48,4 +52,9 @@
 
         return result;
     }
+
+    @Override
+    public CraftLectern copy() {
+        return new CraftLectern(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/MushroomCow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/MushroomCow.java b/src/main/java/org/bukkit/entity/MushroomCow.java
--- a/src/main/java/org/bukkit/entity/MushroomCow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/MushroomCow.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.entity;
 
-import org.bukkit.Sound;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a mushroom {@link Cow}
  */
-public interface MushroomCow extends Cow, io.papermc.paper.entity.Shearable { // Paper
+public interface MushroomCow extends Cow {
 
     /**
      * Get the variant of this cow.
@@ -23,13 +22,6 @@
      */
     public void setVariant(@NotNull Variant variant);
 
-    // Banner start - since we do not use kyori so override it
-    @Override
-    default void shear() {
-        this.shear(Sound.ENTITY_MOOSHROOM_SHEAR);
-    }
-    // Banner end
-
     /**
      * Represents the variant of a cow - ie its color.
      */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLootable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLootable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLootable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLootable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftLootable.java	(date 1703956060000)
@@ -15,6 +15,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftLootable(CraftLootable<T> state) {
+        super(state);
+    }
+
     @Override
     public void applyTo(T lootable) {
         super.applyTo(lootable);
@@ -53,4 +57,7 @@
         ResourceLocation key = (table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey());
         getSnapshot().setLootTable(key, seed);
     }
+
+    @Override
+    public abstract CraftLootable<T> copy();
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftMovingPiston.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftMovingPiston.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftMovingPiston.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftMovingPiston.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftMovingPiston.java	(date 1703956060000)
@@ -8,4 +8,13 @@
     public CraftMovingPiston(World world, PistonMovingBlockEntity tileEntity) {
         super(world, tileEntity);
     }
+
+    protected CraftMovingPiston(CraftMovingPiston state) {
+        super(state);
+    }
+
+    @Override
+    public CraftMovingPiston copy() {
+        return new CraftMovingPiston(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkCatalyst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkCatalyst.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkCatalyst.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkCatalyst.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkCatalyst.java	(date 1703956060000)
@@ -13,6 +13,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftSculkCatalyst(CraftSculkCatalyst state) {
+        super(state);
+    }
+
     @Override
     public void bloom(Block block, int charge) {
         Preconditions.checkArgument(block != null, "block cannot be null");
@@ -23,4 +27,9 @@
         getTileEntity().getListener().bloom(world.getHandle(), getPosition(), getHandle(), world.getHandle().getRandom());
         getTileEntity().getListener().getSculkSpreader().addCursors(new BlockPos(block.getX(), block.getY(), block.getZ()), charge);
     }
+
+    @Override
+    public CraftSculkCatalyst copy() {
+        return new CraftSculkCatalyst(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkSensor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkSensor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkSensor.java	(date 1703956060000)
@@ -5,12 +5,16 @@
 import org.bukkit.World;
 import org.bukkit.block.SculkSensor;
 
-public class CraftSculkSensor<T extends SculkSensorBlockEntity> extends CraftBlockEntityState<T> implements SculkSensor {
+public class CraftSculkSensor <T extends SculkSensorBlockEntity> extends CraftBlockEntityState<T> implements SculkSensor {
 
-    public CraftSculkSensor(World world, T te) {
+    public CraftSculkSensor(World world, final T te) {
         super(world, te);
     }
 
+    protected CraftSculkSensor(CraftSculkSensor<T> state) {
+        super(state);
+    }
+
     @Override
     public int getLastVibrationFrequency() {
         return getSnapshot().getLastVibrationFrequency();
@@ -21,4 +25,9 @@
         Preconditions.checkArgument(0 <= lastVibrationFrequency && lastVibrationFrequency <= 15, "Vibration frequency must be between 0-15");
         getSnapshot().lastVibrationFrequency = lastVibrationFrequency;
     }
+
+    @Override
+    public CraftSculkSensor<T> copy() {
+        return new CraftSculkSensor<>(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkShrieker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkShrieker.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkShrieker.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkShrieker.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftSculkShrieker.java	(date 1703956060000)
@@ -13,6 +13,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftSculkShrieker(CraftSculkShrieker state) {
+        super(state);
+    }
+
     @Override
     public int getWarningLevel() {
         return getSnapshot().warningLevel;
@@ -30,4 +34,9 @@
         ServerPlayer entityPlayer = (player == null) ? null : ((CraftPlayer) player).getHandle();
         getTileEntity().tryShriek(world.getHandle(), entityPlayer);
     }
+
+    @Override
+    public CraftSculkShrieker copy() {
+        return new CraftSculkShrieker(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/FallingBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/FallingBlock.java b/src/main/java/org/bukkit/entity/FallingBlock.java
--- a/src/main/java/org/bukkit/entity/FallingBlock.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/FallingBlock.java	(date 1703956060000)
@@ -49,7 +49,6 @@
      */
     void setDropItem(boolean drop);
 
-
     /**
      * Get if the falling block will not become a block upon landing and not drop
      * an item.
@@ -127,15 +126,4 @@
      * @param damage the max damage to set. Must be >= 0
      */
     void setMaxDamage(int damage);
-
-    /**
-     * Gets the source block location of the FallingBlock
-     *
-     * @return the source block location the FallingBlock was spawned from
-     * @deprecated replaced by {@link Entity#getOrigin()}
-     */
-    @Deprecated
-    default org.bukkit.Location getSourceLoc() {
-        return this.getOrigin();
-    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftShulkerBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftShulkerBox.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftShulkerBox.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftShulkerBox.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftShulkerBox.java	(date 1703956060000)
@@ -9,7 +9,6 @@
 import org.bukkit.World;
 import org.bukkit.block.ShulkerBox;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventory;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.inventory.Inventory;
 
 public class CraftShulkerBox extends CraftLootable<ShulkerBoxBlockEntity> implements ShulkerBox {
@@ -18,6 +17,10 @@
         super(world, te);
     }
 
+    protected CraftShulkerBox(CraftShulkerBox state) {
+        super(state);
+    }
+
     @Override
     public Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
@@ -34,7 +37,7 @@
 
     @Override
     public DyeColor getColor() {
-        net.minecraft.world.item.DyeColor color = ((ShulkerBoxBlock) CraftMagicNumbers.getBlock(this.getType())).color;
+        net.minecraft.world.item.DyeColor color = ((ShulkerBoxBlock) CraftBlockType.bukkitToMinecraft(this.getType())).color;
 
         return (color == null) ? null : DyeColor.getByWoolData((byte) color.getId());
     }
@@ -42,22 +45,27 @@
     @Override
     public void open() {
         requirePlaced();
-        if (!getTileEntity().bridge$opened() && getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!getTileEntity().opened && getWorldHandle() instanceof net.minecraft.world.level.Level) {
             Level world = getTileEntity().getLevel();
             world.blockEvent(getPosition(), getTileEntity().getBlockState().getBlock(), 1, 1);
             world.playSound(null, getPosition(), SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         }
-        getTileEntity().banner$setOpened(true);
+        getTileEntity().opened = true;
     }
 
     @Override
     public void close() {
         requirePlaced();
-        if (getTileEntity().bridge$opened() && getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (getTileEntity().opened && getWorldHandle() instanceof net.minecraft.world.level.Level) {
             Level world = getTileEntity().getLevel();
             world.blockEvent(getPosition(), getTileEntity().getBlockState().getBlock(), 1, 0);
             world.playSound(null, getPosition(), SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         }
-        getTileEntity().banner$setOpened(false);
+        getTileEntity().opened = false;
+    }
+
+    @Override
+    public CraftShulkerBox copy() {
+        return new CraftShulkerBox(this);
     }
 }
Index: src/main/java/org/bukkit/entity/Mob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Mob.java b/src/main/java/org/bukkit/entity/Mob.java
--- a/src/main/java/org/bukkit/entity/Mob.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Mob.java	(date 1703956060000)
@@ -50,7 +50,7 @@
     public boolean isAware();
 
     /**
-     * Get the {@link Sound} this mob makes while ambiently existing. This sound
+     * Get the {@link Sound} this mob make while ambiently existing. This sound
      * may change depending on the current state of the entity, and may also
      * return null under specific conditions. This sound is not constant.
      * For instance, villagers will make different passive noises depending
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnderChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnderChest.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnderChest.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnderChest.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnderChest.java	(date 1703956060000)
@@ -11,29 +11,38 @@
         super(world, te);
     }
 
+    protected CraftEnderChest(CraftEnderChest state) {
+        super(state);
+    }
+
     @Override
     public void open() {
         requirePlaced();
-        if (!getTileEntity().openersCounter.bridge$opened() && getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!getTileEntity().openersCounter.opened && getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = getTileEntity().getBlockState();
             int openCount = getTileEntity().openersCounter.getOpenerCount();
 
             getTileEntity().openersCounter.onAPIOpen((net.minecraft.world.level.Level) getWorldHandle(), getPosition(), block);
             getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) getWorldHandle(), getPosition(), block, openCount, openCount + 1);
         }
-        getTileEntity().openersCounter.banner$setOpened(true);
+        getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         requirePlaced();
-        if (getTileEntity().openersCounter.bridge$opened() && getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (getTileEntity().openersCounter.opened && getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = getTileEntity().getBlockState();
             int openCount = getTileEntity().openersCounter.getOpenerCount();
 
             getTileEntity().openersCounter.onAPIClose((net.minecraft.world.level.Level) getWorldHandle(), getPosition(), block);
             getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) getWorldHandle(), getPosition(), block, openCount, 0);
         }
-        getTileEntity().openersCounter.banner$setOpened(false);
+        getTileEntity().openersCounter.opened = false;
+    }
+
+    @Override
+    public CraftEnderChest copy() {
+        return new CraftEnderChest(this);
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndGateway.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndGateway.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndGateway.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndGateway.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndGateway.java	(date 1703956060000)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
+import java.util.Objects;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
 import org.bukkit.Location;
@@ -7,14 +8,16 @@
 import org.bukkit.block.EndGateway;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
 
-import java.util.Objects;
-
 public class CraftEndGateway extends CraftBlockEntityState<TheEndGatewayBlockEntity> implements EndGateway {
 
     public CraftEndGateway(World world, TheEndGatewayBlockEntity te) {
         super(world, te);
     }
 
+    protected CraftEndGateway(CraftEndGateway state) {
+        super(state);
+    }
+
     @Override
     public Location getExitLocation() {
         BlockPos pos = this.getSnapshot().exitPortal;
@@ -60,4 +63,9 @@
             endGateway.exitPortal = null;
         }
     }
+
+    @Override
+    public CraftEndGateway copy() {
+        return new CraftEndGateway(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndPortal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndPortal.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndPortal.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndPortal.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEndPortal.java	(date 1703956060000)
@@ -8,4 +8,13 @@
     public CraftEndPortal(World world, TheEndPortalBlockEntity tileEntity) {
         super(world, tileEntity);
     }
+
+    protected CraftEndPortal(CraftEndPortal state) {
+        super(state);
+    }
+
+    @Override
+    public CraftEndPortal copy() {
+        return new CraftEndPortal(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/Animals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Animals.java b/src/main/java/org/bukkit/entity/Animals.java
--- a/src/main/java/org/bukkit/entity/Animals.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Animals.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.entity;
 
+import java.util.UUID;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.UUID;
-
 /**
  * Represents an Animal.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnace.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnace.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnace.java	(date 1703956060000)
@@ -1,15 +1,18 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
+import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.block.Furnace;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryFurnace;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.inventory.CookingRecipe;
 import org.bukkit.inventory.FurnaceInventory;
-
-import java.util.Map;
+import org.bukkit.inventory.Recipe;
 
 public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends CraftContainer<T> implements Furnace {
 
@@ -17,6 +20,10 @@
         super(world, te);
     }
 
+    protected CraftFurnace(CraftFurnace<T> state) {
+        super(state);
+    }
+
     @Override
     public FurnaceInventory getSnapshotInventory() {
         return new CraftInventoryFurnace(this.getSnapshot());
@@ -66,14 +73,16 @@
     @Override
     public Map<CookingRecipe<?>, Integer> getRecipesUsed() {
         ImmutableMap.Builder<CookingRecipe<?>, Integer> recipesUsed = ImmutableMap.builder();
-        /**
         for (Map.Entry<ResourceLocation, Integer> entrySet : this.getSnapshot().getRecipesUsed().object2IntEntrySet()) {
             Recipe recipe = Bukkit.getRecipe(CraftNamespacedKey.fromMinecraft(entrySet.getKey()));
             if (recipe instanceof CookingRecipe<?> cookingRecipe) {
                 recipesUsed.put(cookingRecipe, entrySet.getValue());
             }
-        }*/
+        }
 
         return recipesUsed.build();
     }
+
+    @Override
+    public abstract CraftFurnace<T> copy();
 }
Index: src/main/java/org/bukkit/entity/ComplexLivingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
--- a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.entity;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Set;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a complex living entity - one that is made up of various smaller
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnaceFurnace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnaceFurnace.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnaceFurnace.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnaceFurnace.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftFurnaceFurnace.java	(date 1703956060000)
@@ -8,4 +8,13 @@
     public CraftFurnaceFurnace(World world, FurnaceBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftFurnaceFurnace(CraftFurnaceFurnace state) {
+        super(state);
+    }
+
+    @Override
+    public CraftFurnaceFurnace copy() {
+        return new CraftFurnaceFurnace(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHangingSign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHangingSign.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHangingSign.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHangingSign.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHangingSign.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftHangingSign(World world, HangingSignBlockEntity tileEntity) {
         super(world, tileEntity);
     }
+
+    protected CraftHangingSign(CraftHangingSign state) {
+        super(state);
+    }
+
+    @Override
+    public CraftHangingSign copy() {
+        return new CraftHangingSign(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/HumanEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java
--- a/src/main/java/org/bukkit/entity/HumanEntity.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/HumanEntity.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.entity;
 
+import java.util.Collection;
+import java.util.Set;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -15,9 +17,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-import java.util.Set;
-
 /**
  * Represents a human entity, such as an NPC or a player
  */
@@ -624,5 +623,4 @@
      */
     @Nullable
     public Firework fireworkBoost(@NotNull ItemStack fireworkItemStack);
-
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHopper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHopper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHopper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftHopper.java	(date 1703956060000)
@@ -12,6 +12,10 @@
         super(world, te);
     }
 
+    protected CraftHopper(CraftHopper state) {
+        super(state);
+    }
+
     @Override
     public Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
@@ -25,4 +29,9 @@
 
         return new CraftInventory(this.getTileEntity());
     }
+
+    @Override
+    public CraftHopper copy() {
+        return new CraftHopper(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJigsaw.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJigsaw.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJigsaw.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJigsaw.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftJigsaw.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftJigsaw(World world, JigsawBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftJigsaw(CraftJigsaw state) {
+        super(state);
+    }
+
+    @Override
+    public CraftJigsaw copy() {
+        return new CraftJigsaw(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftConduit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftConduit.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftConduit.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftConduit.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftConduit.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftConduit(World world, ConduitBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftConduit(CraftConduit state) {
+        super(state);
+    }
+
+    @Override
+    public CraftConduit copy() {
+        return new CraftConduit(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftContainer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftContainer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftContainer.java	(date 1703956060000)
@@ -12,6 +12,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftContainer(CraftContainer<T> state) {
+        super(state);
+    }
+
     @Override
     public boolean isLocked() {
         return !this.getSnapshot().lockKey.key.isEmpty();
@@ -46,4 +50,7 @@
             container.setCustomName(null);
         }
     }
+
+    @Override
+    public abstract CraftContainer<T> copy();
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCreatureSpawner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCreatureSpawner.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCreatureSpawner.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCreatureSpawner.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCreatureSpawner.java	(date 1703956060000)
@@ -1,20 +1,34 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Optional;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.util.InclusiveRange;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.random.SimpleWeightedRandomList;
+import net.minecraft.util.random.WeightedEntry;
 import net.minecraft.world.level.SpawnData;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.CreatureSpawner;
+import org.bukkit.block.spawner.SpawnRule;
+import org.bukkit.block.spawner.SpawnerEntry;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntitySnapshot;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntityType;
+import org.bukkit.entity.EntitySnapshot;
 import org.bukkit.entity.EntityType;
 
-import java.util.Optional;
-
 public class CraftCreatureSpawner extends CraftBlockEntityState<SpawnerBlockEntity> implements CreatureSpawner {
 
-    public CraftCreatureSpawner(World world, SpawnerBlockEntity tileEntity) {
-        super(world, tileEntity);
+    public CraftCreatureSpawner(World world, SpawnerBlockEntity te) {
+        super(world, te);
+    }
+
+    protected CraftCreatureSpawner(CraftCreatureSpawner state) {
+        super(state);
     }
 
     @Override
@@ -25,7 +39,7 @@
         }
 
         Optional<net.minecraft.world.entity.EntityType<?>> type = net.minecraft.world.entity.EntityType.by(spawnData.getEntityToSpawn());
-        return type.map(entityTypes -> EntityType.fromName(net.minecraft.world.entity.EntityType.getKey(entityTypes).getPath())).orElse(null);
+        return type.map(CraftEntityType::minecraftToBukkit).orElse(null);
     }
 
     @Override
@@ -38,7 +52,67 @@
         Preconditions.checkArgument(entityType != EntityType.UNKNOWN, "Can't spawn EntityType %s from mob spawners!", entityType);
 
         RandomSource rand = (this.isPlaced()) ? this.getWorldHandle().getRandom() : RandomSource.create();
-        this.getSnapshot().setEntityId(net.minecraft.world.entity.EntityType.byString(entityType.getName()).get(), rand);
+        this.getSnapshot().setEntityId(CraftEntityType.bukkitToMinecraft(entityType), rand);
+    }
+
+
+    @Override
+    public EntitySnapshot getSpawnedEntity() {
+        SpawnData spawnData = this.getSnapshot().getSpawner().nextSpawnData;
+        if (spawnData == null) {
+            return null;
+        }
+        return CraftEntitySnapshot.create(spawnData.getEntityToSpawn());
+    }
+    @Override
+    public void setSpawnedEntity(EntitySnapshot snapshot) {
+        CompoundTag compoundTag = ((CraftEntitySnapshot) snapshot).getData();
+        this.getSnapshot().getSpawner().spawnPotentials = SimpleWeightedRandomList.empty();
+        this.getSnapshot().getSpawner().nextSpawnData = new SpawnData(compoundTag, Optional.empty());
+    }
+    @Override
+    public void addPotentialSpawn(EntitySnapshot snapshot, int weight, SpawnRule spawnRule) {
+        CompoundTag compoundTag = ((CraftEntitySnapshot) snapshot).getData();
+        SimpleWeightedRandomList.Builder<SpawnData> builder = SimpleWeightedRandomList.builder(); // PAIL rename Builder
+        this.getSnapshot().getSpawner().spawnPotentials.unwrap().forEach(entry -> builder.add(entry.getData(), entry.getWeight().asInt()));
+        builder.add(new SpawnData(compoundTag, Optional.ofNullable(toMinecraftRule(spawnRule))), weight);
+        this.getSnapshot().getSpawner().spawnPotentials = builder.build();
+    }
+    @Override
+    public void addPotentialSpawn(SpawnerEntry spawnerEntry) {
+        addPotentialSpawn(spawnerEntry.getSnapshot(), spawnerEntry.getSpawnWeight(), spawnerEntry.getSpawnRule());
+    }
+    @Override
+    public void setPotentialSpawns(Collection<SpawnerEntry> entries) {
+        SimpleWeightedRandomList.Builder<SpawnData> builder = SimpleWeightedRandomList.builder();
+        for (SpawnerEntry spawnerEntry : entries) {
+            CompoundTag compoundTag = ((CraftEntitySnapshot) spawnerEntry.getSnapshot()).getData();
+            builder.add(new SpawnData(compoundTag, Optional.ofNullable(toMinecraftRule(spawnerEntry.getSpawnRule()))), spawnerEntry.getSpawnWeight());
+        }
+        this.getSnapshot().getSpawner().spawnPotentials = builder.build();
+    }
+    @Override
+    public List<SpawnerEntry> getPotentialSpawns() {
+        List<SpawnerEntry> entries = new ArrayList<>();
+        for (WeightedEntry.Wrapper<SpawnData> entry : this.getSnapshot().getSpawner().spawnPotentials.unwrap()) { // PAIL rename Wrapper
+            CraftEntitySnapshot snapshot = CraftEntitySnapshot.create(entry.getData().getEntityToSpawn());
+            if (snapshot != null) {
+                SpawnRule rule = entry.getData().customSpawnRules().map(this::fromMinecraftRule).orElse(null);
+                entries.add(new SpawnerEntry(snapshot, entry.getWeight().asInt(), rule));
+            }
+        }
+        return entries;
+    }
+    private SpawnData.CustomSpawnRules toMinecraftRule(SpawnRule rule) { // PAIL rename CustomSpawnRules
+        if (rule == null) {
+            return null;
+        }
+        return new SpawnData.CustomSpawnRules(new InclusiveRange<>(rule.getMinBlockLight(), rule.getMaxBlockLight()), new InclusiveRange<>(rule.getMinSkyLight(), rule.getMaxSkyLight()));
+    }
+    private SpawnRule fromMinecraftRule(SpawnData.CustomSpawnRules rule) {
+        InclusiveRange<Integer> blockLight = rule.blockLightLimit();
+        InclusiveRange<Integer> skyLight = rule.skyLightLimit();
+        return new SpawnRule(blockLight.maxInclusive(), blockLight.maxInclusive(), skyLight.minInclusive(), skyLight.maxInclusive());
     }
 
     @Override
@@ -135,4 +209,9 @@
     public void setSpawnRange(int spawnRange) {
         this.getSnapshot().getSpawner().spawnRange = spawnRange;
     }
-}
\ No newline at end of file
+
+    @Override
+    public CraftCreatureSpawner copy() {
+        return new CraftCreatureSpawner(this);
+    }
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDaylightDetector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDaylightDetector.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDaylightDetector.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDaylightDetector.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDaylightDetector.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftDaylightDetector(World world, final DaylightDetectorBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftDaylightDetector(CraftDaylightDetector state) {
+        super(state);
+    }
+
+    @Override
+    public CraftDaylightDetector copy() {
+        return new CraftDaylightDetector(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDecoratedPot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDecoratedPot.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDecoratedPot.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDecoratedPot.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDecoratedPot.java	(date 1703956060000)
@@ -1,6 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.entity.DecoratedPotBlockEntity;
@@ -8,12 +12,10 @@
 import org.bukkit.Tag;
 import org.bukkit.World;
 import org.bukkit.block.DecoratedPot;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryDecoratedPot;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
+import org.bukkit.inventory.DecoratedPotInventory;
 
 public class CraftDecoratedPot extends CraftBlockEntityState<DecoratedPotBlockEntity> implements DecoratedPot {
 
@@ -21,12 +23,30 @@
         super(world, tileEntity);
     }
 
+    protected CraftDecoratedPot(CraftDecoratedPot state) {
+        super(state);
+    }
+
+    @Override
+    public DecoratedPotInventory getSnapshotInventory() {
+        return new CraftInventoryDecoratedPot(this.getSnapshot());
+    }
+
+    @Override
+    public DecoratedPotInventory getInventory() {
+        if (!this.isPlaced()) {
+            return this.getSnapshotInventory();
+        }
+
+        return new CraftInventoryDecoratedPot(this.getTileEntity());
+    }
+
     @Override
     public void setSherd(Side face, Material sherd) {
         Preconditions.checkArgument(face != null, "face must not be null");
         Preconditions.checkArgument(sherd == null || sherd == Material.BRICK || Tag.ITEMS_DECORATED_POT_SHERDS.isTagged(sherd), "sherd is not a valid sherd material: %s", sherd);
 
-        Item sherdItem = (sherd != null) ? CraftMagicNumbers.getItem(sherd) : Items.BRICK;
+        Item sherdItem = (sherd != null) ? CraftItemType.bukkitToMinecraft(sherd) : Items.BRICK;
         DecoratedPotBlockEntity.Decorations decorations = getSnapshot().getDecorations(); // PAIL rename Decorations
 
         switch (face) {
@@ -51,7 +71,7 @@
             default -> throw new IllegalArgumentException("Unexpected value: " + face);
         };
 
-        return CraftMagicNumbers.getMaterial(sherdItem);
+        return CraftItemType.minecraftToBukkit(sherdItem);
     }
 
     @Override
@@ -59,10 +79,10 @@
         DecoratedPotBlockEntity.Decorations decorations = getSnapshot().getDecorations(); // PAIL rename Decorations
 
         Map<Side, Material> sherds = new EnumMap<>(Side.class);
-        sherds.put(Side.BACK, CraftMagicNumbers.getMaterial(decorations.back()));
-        sherds.put(Side.LEFT, CraftMagicNumbers.getMaterial(decorations.left()));
-        sherds.put(Side.RIGHT, CraftMagicNumbers.getMaterial(decorations.right()));
-        sherds.put(Side.FRONT, CraftMagicNumbers.getMaterial(decorations.front()));
+        sherds.put(Side.BACK, CraftItemType.minecraftToBukkit(decorations.back()));
+        sherds.put(Side.LEFT, CraftItemType.minecraftToBukkit(decorations.left()));
+        sherds.put(Side.RIGHT, CraftItemType.minecraftToBukkit(decorations.right()));
+        sherds.put(Side.FRONT, CraftItemType.minecraftToBukkit(decorations.front()));
         return sherds;
     }
 
@@ -70,4 +90,9 @@
     public List<Material> getShards() {
         return getSnapshot().getDecorations().sorted().map(CraftMagicNumbers::getMaterial).collect(Collectors.toUnmodifiableList());
     }
+
+    @Override
+    public CraftDecoratedPot copy() {
+        return new CraftDecoratedPot(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDispenser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDispenser.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDispenser.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDispenser.java	(date 1703956060000)
@@ -19,6 +19,10 @@
         super(world, te);
     }
 
+    protected CraftDispenser(CraftDispenser state) {
+        super(state);
+    }
+
     @Override
     public Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
@@ -58,4 +62,9 @@
             return false;
         }
     }
+
+    @Override
+    public CraftDispenser copy() {
+        return new CraftDispenser(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/Pose.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Pose.java b/src/main/java/org/bukkit/entity/Pose.java
--- a/src/main/java/org/bukkit/entity/Pose.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Pose.java	(date 1703956060000)
@@ -65,5 +65,17 @@
     /**
      * Entity is digging.
      */
-    DIGGING;
+    DIGGING,
+    /**
+     * Entity is sliding.
+     */
+    SLIDING,
+    /**
+     * Entity is shooting.
+     */
+    SHOOTING,
+    /**
+     * Entity is inhaling.
+     */
+    INHALING;
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDropper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDropper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDropper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDropper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftDropper.java	(date 1703956060000)
@@ -17,6 +17,10 @@
         super(world, te);
     }
 
+    protected CraftDropper(CraftDropper state) {
+        super(state);
+    }
+
     @Override
     public Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
@@ -42,4 +46,9 @@
             drop.dispenseFrom(world.getHandle(), this.getHandle(), this.getPosition());
         }
     }
+
+    @Override
+    public CraftDropper copy() {
+        return new CraftDropper(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/AreaEffectCloud.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/AreaEffectCloud.java b/src/main/java/org/bukkit/entity/AreaEffectCloud.java
--- a/src/main/java/org/bukkit/entity/AreaEffectCloud.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/AreaEffectCloud.java	(date 1703956060000)
@@ -1,16 +1,16 @@
 package org.bukkit.entity;
 
+import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.Particle;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.bukkit.potion.PotionType;
 import org.bukkit.projectiles.ProjectileSource;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Represents an area effect cloud which will imbue a potion effect onto
  * entities which enter it.
@@ -161,6 +161,21 @@
     @NotNull
     PotionData getBasePotionData();
 
+    /**
+     * Sets the underlying potion type
+     *
+     * @param type PotionType to set the base potion state to
+     */
+    void setBasePotionType(@NotNull PotionType type);
+
+    /**
+     * Returns the potion type about the base potion
+     *
+     * @return a PotionType object
+     */
+    @NotNull
+    PotionType getBasePotionType();
+
     /**
      * Checks for the presence of custom potion effects.
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnchantingTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnchantingTable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnchantingTable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnchantingTable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftEnchantingTable.java	(date 1703956060000)
@@ -11,6 +11,10 @@
         super(world, te);
     }
 
+    protected CraftEnchantingTable(CraftEnchantingTable state) {
+        super(state);
+    }
+
     @Override
     public String getCustomName() {
         EnchantmentTableBlockEntity enchant = this.getSnapshot();
@@ -30,4 +34,9 @@
             enchantingTable.setCustomName(null);
         }
     }
+
+    @Override
+    public CraftEnchantingTable copy() {
+        return new CraftEnchantingTable(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrewingStand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrewingStand.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrewingStand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrewingStand.java	(date 1703956060000)
@@ -12,6 +12,10 @@
         super(world, te);
     }
 
+    protected CraftBrewingStand(CraftBrewingStand state) {
+        super(state);
+    }
+
     @Override
     public BrewerInventory getSnapshotInventory() {
         return new CraftInventoryBrewer(this.getSnapshot());
@@ -45,4 +49,9 @@
     public void setFuelLevel(int level) {
         this.getSnapshot().fuel = level;
     }
+
+    @Override
+    public CraftBrewingStand copy() {
+        return new CraftBrewingStand(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrushableBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrushableBlock.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrushableBlock.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrushableBlock.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBrushableBlock.java	(date 1703956060000)
@@ -16,6 +16,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftBrushableBlock(CraftBrushableBlock state) {
+        super(state);
+    }
+
     @Override
     public ItemStack getItem() {
         return CraftItemStack.asBukkitCopy(getSnapshot().getItem());
@@ -64,4 +68,9 @@
         ResourceLocation key = (table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey());
         getSnapshot().setLootTable(key, seed);
     }
+
+    @Override
+    public CraftBrushableBlock copy() {
+        return new CraftBrushableBlock(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCalibratedSculkSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCalibratedSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCalibratedSculkSensor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCalibratedSculkSensor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCalibratedSculkSensor.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftCalibratedSculkSensor(World world, CalibratedSculkSensorBlockEntity tileEntity) {
         super(world, tileEntity);
     }
-}
\ No newline at end of file
+
+    protected CraftCalibratedSculkSensor(CraftCalibratedSculkSensor state) {
+        super(state);
+    }
+
+    @Override
+    public CraftCalibratedSculkSensor copy() {
+        return new CraftCalibratedSculkSensor(this);
+    }
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCampfire.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCampfire.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCampfire.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCampfire.java	(date 1703956060000)
@@ -13,6 +13,10 @@
         super(world, te);
     }
 
+    protected CraftCampfire(CraftCampfire state) {
+        super(state);
+    }
+
     @Override
     public int getSize() {
         return getSnapshot().getItems().size();
@@ -48,4 +52,9 @@
     public void setCookTimeTotal(int index, int cookTimeTotal) {
         getSnapshot().cookingTime[index] = cookTimeTotal;
     }
+
+    @Override
+    public CraftCampfire copy() {
+        return new CraftCampfire(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChest.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChest.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChest.java	(date 1703956060000)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
-import com.mohistmc.banner.bukkit.DoubleChestInventory;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.level.block.Blocks;
@@ -21,6 +20,10 @@
         super(world, te);
     }
 
+    protected CraftChest(CraftChest state) {
+        super(state);
+    }
+
     @Override
     public Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
@@ -48,8 +51,8 @@
         ChestBlock blockChest= (ChestBlock) (this.getType() == Material.CHEST ? Blocks.CHEST : Blocks.TRAPPED_CHEST);
         MenuProvider nms = blockChest.getMenuProvider(data, world.getHandle(), this.getPosition(), true);
 
-        if (nms instanceof DoubleChestInventory) {
-            inventory = new CraftInventoryDoubleChest((DoubleChestInventory) nms);
+        if (nms instanceof ChestBlock.DoubleInventory) {
+            inventory = new CraftInventoryDoubleChest((ChestBlock.DoubleInventory) nms);
         }
         return inventory;
     }
@@ -57,22 +60,27 @@
     @Override
     public void open() {
         requirePlaced();
-        if (!getTileEntity().openersCounter.bridge$opened() && getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!getTileEntity().openersCounter.opened && getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = getTileEntity().getBlockState();
             getTileEntity().getLevel().blockEvent(getPosition(), block.getBlock(), 1, getTileEntity().openersCounter.getOpenerCount() + 1);
             ChestBlockEntity.playSound(getTileEntity().getLevel(), getPosition(), block, SoundEvents.CHEST_OPEN);
         }
-        getTileEntity().openersCounter.banner$setOpened(true);
+        getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         requirePlaced();
-        if (getTileEntity().openersCounter.bridge$opened() && getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (getTileEntity().openersCounter.opened && getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = getTileEntity().getBlockState();
             getTileEntity().getLevel().blockEvent(getPosition(), block.getBlock(), 1, 0);
             ChestBlockEntity.playSound(getTileEntity().getLevel(), getPosition(), block, SoundEvents.CHEST_CLOSE);
         }
-        getTileEntity().openersCounter.banner$setOpened(false);
+        getTileEntity().openersCounter.opened = false;
+    }
+
+    @Override
+    public CraftChest copy() {
+        return new CraftChest(this);
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChiseledBookshelf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChiseledBookshelf.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChiseledBookshelf.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChiseledBookshelf.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftChiseledBookshelf.java	(date 1703956060000)
@@ -17,6 +17,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftChiseledBookshelf(CraftChiseledBookshelf state) {
+        super(state);
+    }
+
     @Override
     public int getLastInteractedSlot() {
         return getSnapshot().getLastInteractedSlot();
@@ -67,4 +71,9 @@
 
         return ChiseledBookShelfBlock.getHitSlot(faceVector);
     }
+
+    @Override
+    public CraftChiseledBookshelf copy() {
+        return new CraftChiseledBookshelf(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCommandBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCommandBlock.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCommandBlock.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCommandBlock.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftCommandBlock.java	(date 1703956060000)
@@ -11,6 +11,10 @@
         super(world, te);
     }
 
+    protected CraftCommandBlock(CraftCommandBlock state) {
+        super(state);
+    }
+
     @Override
     public String getCommand() {
         return getSnapshot().getCommandBlock().getCommand();
@@ -30,4 +34,9 @@
     public void setName(String name) {
         getSnapshot().getCommandBlock().setName(CraftChatMessage.fromStringOrNull(name != null ? name : "@"));
     }
+
+    @Override
+    public CraftCommandBlock copy() {
+        return new CraftCommandBlock(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftComparator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftComparator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftComparator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftComparator.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftComparator(World world, final ComparatorBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftComparator(CraftComparator state) {
+        super(state);
+    }
+
+    @Override
+    public CraftComparator copy() {
+        return new CraftComparator(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeehive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeehive.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeehive.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeehive.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
@@ -11,15 +13,16 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
 import org.bukkit.entity.Bee;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class CraftBeehive extends CraftBlockEntityState<BeehiveBlockEntity> implements Beehive {
 
     public CraftBeehive(World world, final BeehiveBlockEntity te) {
         super(world, te);
     }
 
+    protected CraftBeehive(CraftBeehive state) {
+        super(state);
+    }
+
     @Override
     public Location getFlower() {
         BlockPos flower = getSnapshot().savedFlowerPos;
@@ -49,14 +52,14 @@
 
     @Override
     public int getMaxEntities() {
-        return getSnapshot().bridge$maxBees();
+        return getSnapshot().maxBees;
     }
 
     @Override
     public void setMaxEntities(int max) {
         Preconditions.checkArgument(max > 0, "Max bees must be more than 0");
 
-        getSnapshot().banner$setMaxBees(max);
+        getSnapshot().maxBees = max;
     }
 
     @Override
@@ -81,4 +84,9 @@
 
         getSnapshot().addOccupant(((CraftBee) entity).getHandle(), false);
     }
+
+    @Override
+    public CraftBeehive copy() {
+        return new CraftBeehive(this);
+    }
 }
Index: src/main/java/org/bukkit/entity/Display.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Display.java b/src/main/java/org/bukkit/entity/Display.java
--- a/src/main/java/org/bukkit/entity/Display.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Display.java	(date 1703956060000)
@@ -48,6 +48,27 @@
      */
     public void setInterpolationDuration(int duration);
 
+    /**
+     * Gets the teleport duration of this display.
+     * <ul>
+     *     <li>0 means that updates are applied immediately.</li>
+     *     <li>1 means that the display entity will move from current position to the updated one over one tick.</li>
+     *     <li>Higher values spread the movement over multiple ticks.</li>
+     * </ul>
+     *
+     * @return teleport duration
+     */
+    public int getTeleportDuration();
+
+    /**
+     * Sets the teleport duration of this display.
+     *
+     * @param duration new duration
+     * @throws IllegalArgumentException if duration is not between 0 and 59
+     * @see #getTeleportDuration()
+     */
+    public void setTeleportDuration(int duration);
+
     /**
      * Gets the view distance/range of this display.
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBell.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBell.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBell.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBell.java	(date 1703956060000)
@@ -18,6 +18,10 @@
         super(world, te);
     }
 
+    protected CraftBell(CraftBell state) {
+        super(state);
+    }
+
     @Override
     public boolean ring(Entity entity, BlockFace direction) {
         Preconditions.checkArgument(direction == null || direction.isCartesian(), "direction must be cartesian, given %s", direction);
@@ -67,4 +71,9 @@
     public int getResonatingTicks() {
         return isResonating() ? getSnapshot().ticks : 0;
     }
+
+    @Override
+    public CraftBell copy() {
+        return new CraftBell(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlastFurnace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlastFurnace.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlastFurnace.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlastFurnace.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlastFurnace.java	(date 1703956060000)
@@ -9,4 +9,13 @@
     public CraftBlastFurnace(World world, BlastFurnaceBlockEntity te) {
         super(world, te);
     }
+
+    protected CraftBlastFurnace(CraftBlastFurnace state) {
+        super(state);
+    }
+
+    @Override
+    public CraftBlastFurnace copy() {
+        return new CraftBlastFurnace(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlock.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlock.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlock.java	(date 1703956060000)
@@ -1,18 +1,17 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
-import com.mohistmc.banner.bukkit.CraftCustomContainer;
-import com.mohistmc.banner.fabric.BukkitRegistry;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Holder;
-import net.minecraft.core.registries.Registries;
-import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.item.BoneMealItem;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.ClipContext;
@@ -20,18 +19,18 @@
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.RedStoneWireBlock;
-import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.SaplingBlock;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
-import org.bukkit.Registry;
 import org.bukkit.TreeType;
 import org.bukkit.World;
 import org.bukkit.block.Biome;
@@ -48,7 +47,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftRayTraceResult;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftVoxelShape;
 import org.bukkit.entity.Entity;
@@ -64,12 +62,6 @@
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
-
 public class CraftBlock implements Block {
     private final net.minecraft.world.level.LevelAccessor world;
     private final BlockPos position;
@@ -229,7 +221,7 @@
 
     @Override
     public Material getType() {
-        return CraftMagicNumbers.getMaterial(world.getBlockState(position).getBlock());
+        return CraftBlockType.minecraftToBukkit(world.getBlockState(position).getBlock());
     }
 
     @Override
@@ -334,18 +326,7 @@
 
     @Override
     public org.bukkit.block.BlockState getState() {
-        Material material = getType();
-        // Banner start - handle mod BlockEntities
-        if (material == null) {
-            BlockEntity blockEntity = ((CraftWorld) this.getWorld()).getHandle().getBlockEntity(new BlockPos(this.getX(), this.getY(), this.getZ()));
-            if (blockEntity != null && blockEntity instanceof Container) {
-                // In order to allow plugins to properly grab the container location, we must pass a class that extends CraftBlockState and implements InventoryHolder.
-                // Note: This will be returned when BlockEntity.bridge$getOwner() is called
-                return new CraftCustomContainer(this);
-            }
-        }
-        return CraftBlockStates.getBlockState(this);// Banner - pass default state
-        // Banner end
+        return CraftBlockStates.getBlockState(this);
     }
 
     @Override
@@ -358,26 +339,6 @@
         getWorld().setBiome(getX(), getY(), getZ(), bio);
     }
 
-    public static Biome biomeBaseToBiome(net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry, Holder<net.minecraft.world.level.biome.Biome> base) {
-        return biomeBaseToBiome(registry, base.value());
-    }
-
-    public static Biome biomeBaseToBiome(net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry, net.minecraft.world.level.biome.Biome base) {
-        if (base == null) {
-            return null;
-        }
-
-        return BukkitRegistry.biomeBiomeMap.getOrDefault(base, Registry.BIOME.get(CraftNamespacedKey.fromMinecraft(registry.getKey(base))));
-    }
-
-    public static Holder<net.minecraft.world.level.biome.Biome> biomeToBiomeBase(net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry, Biome bio) {
-        if (bio == null || bio == Biome.CUSTOM) {
-            return null;
-        }
-
-        return registry.getHolderOrThrow(ResourceKey.create(Registries.BIOME, CraftNamespacedKey.toMinecraft(bio.getKey())));
-    }
-
     @Override
     public double getTemperature() {
         return world.getBiome(position).value().getTemperature(position);
@@ -465,15 +426,7 @@
 
     @Override
     public boolean isEmpty() {
-        // Banner start - support custom air blocks
-        if (getNMS().isAir()) {
-            return true;
-        }
-        if (!(getWorld() instanceof CraftWorld)) {
-            return false;
-        }
-        return ((CraftWorld) getWorld()).getHandle().isEmptyBlock(new BlockPos(getX(), getY(), getZ()));
-        // Banner end
+        return getNMS().isAir();
     }
 
     @Override
@@ -481,6 +434,25 @@
         return getNMS().liquid();
     }
 
+    // Paper start
+    @Override
+    public boolean isBuildable() {
+        return this.getNMS().isSolid(); // This is in fact isSolid, despite the fact that isSolid below returns blocksMotion
+    }
+    @Override
+    public boolean isBurnable() {
+        return this.getNMS().ignitedByLava();
+    }
+    @Override
+    public boolean isReplaceable() {
+        return this.getNMS().canBeReplaced();
+    }
+    @Override
+    public boolean isSolid() {
+        return this.getNMS().blocksMotion();
+    }
+    // Paper end
+
     @Override
     public PistonMoveReaction getPistonMoveReaction() {
         return PistonMoveReaction.getById(getNMS().getPistonPushReaction().ordinal());
@@ -517,15 +489,15 @@
         UseOnContext context = new UseOnContext(world, null, InteractionHand.MAIN_HAND, Items.BONE_MEAL.getDefaultInstance(), new BlockHitResult(Vec3.ZERO, direction, getPosition(), false));
 
         // SPIGOT-6895: Call StructureGrowEvent and BlockFertilizeEvent
-        world.banner$setCaptureTreeGeneration(true);
-        InteractionResult result = BukkitExtraConstants.applyBonemeal(context);
-        world.banner$setCaptureTreeGeneration(false);
+        world.captureTreeGeneration = true;
+        InteractionResult result = BoneMealItem.applyBonemeal(context);
+        world.captureTreeGeneration = false;
 
-        if (world.bridge$capturedBlockStates().size() > 0) {
-            TreeType treeType = BukkitExtraConstants.treeType;
-            BukkitExtraConstants.treeType = null;
-            List<BlockState> blocks = new ArrayList<>(world.bridge$capturedBlockStates().values());
-            world.bridge$capturedBlockStates().clear();
+        if (world.capturedBlockStates.size() > 0) {
+            TreeType treeType = SaplingBlock.treeType;
+            SaplingBlock.treeType = null;
+            List<BlockState> blocks = new ArrayList<>(world.capturedBlockStates.values());
+            world.capturedBlockStates.clear();
             StructureGrowEvent structureEvent = null;
 
             if (treeType != null) {
@@ -627,7 +599,7 @@
         Vec3 startPos = CraftLocation.toVec3D(start);
         Vec3 endPos = startPos.add(dir.getX(), dir.getY(), dir.getZ());
 
-        HitResult nmsHitResult = world.clip(new ClipContext(startPos, endPos, ClipContext.Block.OUTLINE, CraftFluidCollisionMode.toNMS(fluidCollisionMode), null), position);
+        HitResult nmsHitResult = world.clip(new ClipContext(startPos, endPos, ClipContext.Block.OUTLINE, CraftFluidCollisionMode.toNMS(fluidCollisionMode), CollisionContext.empty()), position);
         return CraftRayTraceResult.fromNMS(this.getWorld(), nmsHitResult);
     }
 
Index: src/main/java/org/bukkit/entity/Skeleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Skeleton.java b/src/main/java/org/bukkit/entity/Skeleton.java
--- a/src/main/java/org/bukkit/entity/Skeleton.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Skeleton.java	(date 1703956060000)
@@ -63,6 +63,6 @@
          * Stray skeleton. Generally found in ice biomes. Shoots tipped arrows.
          */
         STRAY,
-        MOD;
+        FORGE_MODS;
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockEntityState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockEntityState.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockEntityState.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockEntityState.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockEntityState.java	(date 1703956060000)
@@ -28,6 +28,13 @@
         this.load(snapshot);
     }
 
+    protected CraftBlockEntityState(CraftBlockEntityState<T> state) {
+        super(state);
+        this.tileEntity = createSnapshot(state.snapshot);
+        this.snapshot = tileEntity;
+        load(snapshot);
+    }
+
     public void refreshSnapshot() {
         this.load(tileEntity);
     }
@@ -43,6 +50,12 @@
         return snapshot;
     }
 
+    // Loads the specified data into the snapshot TileEntity.
+    public void loadData(CompoundTag nbtTagCompound) {
+        snapshot.load(nbtTagCompound);
+        load(snapshot);
+    }
+
     // copies the TileEntity-specific data, retains the position
     private void copyData(T from, T to) {
         CompoundTag nbtTagCompound = from.saveWithFullMetadata();
@@ -110,7 +123,7 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return this.getSnapshot().bridge$persistentDataContainer();
+        return this.getSnapshot().persistentDataContainer;
     }
 
     @Nullable
@@ -118,4 +131,9 @@
         T vanillaTileEntitiy = (T) BlockEntity.loadStatic(CraftLocation.toBlockPosition(location), getHandle(), getSnapshotNBT());
         return ClientboundBlockEntityDataPacket.create(vanillaTileEntitiy);
     }
+
+    @Override
+    public CraftBlockEntityState<T> copy() {
+        return new CraftBlockEntityState<>(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockState.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockState.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockState.java	(date 1703956060000)
@@ -1,6 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
+import java.lang.ref.WeakReference;
+import java.util.List;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
@@ -19,10 +22,6 @@
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 
-import javax.annotation.Nullable;
-import java.lang.ref.WeakReference;
-import java.util.List;
-
 public class CraftBlockState implements org.bukkit.block.BlockState {
     protected final CraftWorld world;
     private final BlockPos position;
@@ -49,6 +48,15 @@
         data = blockData;
     }
 
+    // Creates a unplaced copy (world == null copy)
+    protected CraftBlockState(CraftBlockState state) {
+        this.world = null;
+        this.position = state.getPosition().immutable();
+        this.data = state.data;
+        this.flag = state.flag;
+        setWorldHandle(state.getWorldHandle());
+    }
+
     public void setWorldHandle(LevelAccessor generatorAccess) {
         if (generatorAccess instanceof net.minecraft.world.level.Level) {
             this.weakWorld = null;
@@ -155,13 +163,13 @@
         Preconditions.checkArgument(type.isBlock(), "Material must be a block!");
 
         if (this.getType() != type) {
-            this.data = CraftMagicNumbers.getBlock(type).defaultBlockState();
+            this.data = CraftBlockType.bukkitToMinecraft(type).defaultBlockState();
         }
     }
 
     @Override
     public Material getType() {
-        return CraftMagicNumbers.getMaterial(data.getBlock());
+        return CraftBlockType.minecraftToBukkit(data.getBlock());
     }
 
     public void setFlag(int flag) {
@@ -318,10 +326,8 @@
         Preconditions.checkState(isPlaced(), "The blockState must be placed to call this method");
     }
 
-    // Banner start
     @Override
-    public String toString() {
-        return this.data.toString();
+    public CraftBlockState copy() {
+        return new CraftBlockState(this);
     }
-    // Banner end
 }
Index: src/main/java/org/bukkit/entity/Sniffer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Sniffer.java b/src/main/java/org/bukkit/entity/Sniffer.java
--- a/src/main/java/org/bukkit/entity/Sniffer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Sniffer.java	(date 1703956060000)
@@ -1,19 +1,25 @@
 package org.bukkit.entity;
 
+import java.util.Collection;
 import org.bukkit.Location;
+import org.bukkit.MinecraftExperimental;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-
 /**
  * Represents a Sniffer.
+ *
+ * @apiNote This entity is part of an experimental feature of Minecraft and
+ * hence subject to change.
  */
+@MinecraftExperimental
+@ApiStatus.Experimental
 public interface Sniffer extends Animals {
 
     /**
      * Gets the locations explored by the sniffer.
-     * <br>
+     *
      * <b>Note:</b> the returned locations use sniffer's current world.
      *
      * @return a collection of locations
@@ -23,10 +29,11 @@
 
     /**
      * Remove a location of the explored locations.
-     * <br>
+     *
      * <b>Note:</b> the location must be in the sniffer's current world for this
      * method to have any effect.
      *
+     *
      * @param location the location to remove
      * @see #getExploredLocations()
      */
@@ -34,10 +41,11 @@
 
     /**
      * Add a location to the explored locations.
-     * <br>
+     *
      * <b>Note:</b> the location must be in the sniffer's current world for this
      * method to have any effect.
      *
+     *
      * @param location the location to add
      * @see #getExploredLocations()
      */
@@ -88,4 +96,5 @@
         DIGGING,
         RISING;
     }
+
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockStates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockStates.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockStates.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockStates.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBlockStates.java	(date 1703956060000)
@@ -1,6 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.BiFunction;
+import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.LevelAccessor;
@@ -21,6 +28,7 @@
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.ComparatorBlockEntity;
 import net.minecraft.world.level.block.entity.ConduitBlockEntity;
+import net.minecraft.world.level.block.entity.CrafterBlockEntity;
 import net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.level.block.entity.DropperBlockEntity;
@@ -44,21 +52,13 @@
 import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
 import net.minecraft.world.level.block.entity.TheEndPortalBlockEntity;
 import net.minecraft.world.level.block.entity.TrappedChestBlockEntity;
+import net.minecraft.world.level.block.entity.TrialSpawnerBlockEntity;
 import net.minecraft.world.level.block.piston.PistonMovingBlockEntity;
 import org.bukkit.Material;
 import org.bukkit.World;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-
-import javax.annotation.Nullable;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.function.BiFunction;
 
 public final class CraftBlockStates {
 
@@ -118,7 +118,7 @@
                 // block with unhandled TileEntity:
                 return new CraftBlockEntityState<>(world, tileEntity);
             }
-            Preconditions.checkState(tileEntity == null, "Unexpected BlockState for %s", CraftMagicNumbers.getMaterial(blockData.getBlock()));
+            Preconditions.checkState(tileEntity == null, "Unexpected BlockState for %s", CraftBlockType.minecraftToBukkit(blockData.getBlock()));
             return new CraftBlockState(world, blockPosition, blockData);
         }
     };
@@ -331,6 +331,8 @@
         register(Material.SUSPICIOUS_SAND, CraftSuspiciousSand.class, CraftSuspiciousSand::new, BrushableBlockEntity::new);
         register(Material.SUSPICIOUS_GRAVEL, CraftBrushableBlock.class, CraftBrushableBlock::new, BrushableBlockEntity::new);
         register(Material.TRAPPED_CHEST, CraftChest.class, CraftChest::new, TrappedChestBlockEntity::new);
+        register(Material.CRAFTER, CraftCrafter.class, CraftCrafter::new, CrafterBlockEntity::new);
+        register(Material.TRIAL_SPAWNER, CraftTrialSpawner.class, CraftTrialSpawner::new, TrialSpawnerBlockEntity::new);
     }
 
     private static void register(Material blockType, BlockStateFactory<?> factory) {
@@ -371,7 +373,7 @@
         BlockStateFactory<?> factory = getFactory(material);
 
         if (factory instanceof BlockEntityStateFactory) {
-            return ((BlockEntityStateFactory<?, ?>) factory).createTileEntity(BlockPos.ZERO, CraftMagicNumbers.getBlock(material).defaultBlockState());
+            return ((BlockEntityStateFactory<?, ?>) factory).createTileEntity(BlockPos.ZERO, CraftBlockType.bukkitToMinecraft(material).defaultBlockState());
         }
 
         return null;
@@ -395,7 +397,7 @@
 
     public static BlockState getBlockState(BlockPos blockPosition, Material material, @Nullable CompoundTag blockEntityTag) {
         Preconditions.checkNotNull(material, "material is null");
-        net.minecraft.world.level.block.state.BlockState blockData = CraftMagicNumbers.getBlock(material).defaultBlockState();
+        net.minecraft.world.level.block.state.BlockState blockData = CraftBlockType.bukkitToMinecraft(material).defaultBlockState();
         return getBlockState(blockPosition, blockData, blockEntityTag);
     }
 
@@ -412,7 +414,7 @@
 
     // See BlockStateFactory#createBlockState(World, BlockPos, IBlockData, TileEntity)
     private static CraftBlockState getBlockState(World world, BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, BlockEntity tileEntity) {
-        Material material = CraftMagicNumbers.getMaterial(blockData.getBlock());
+        Material material = CraftBlockType.minecraftToBukkit(blockData.getBlock());
         BlockStateFactory<?> factory;
         // For some types of TileEntity blocks (eg. moving pistons), Minecraft may in some situations (eg. when using Block#setType or the
         // setBlock command) not create a corresponding TileEntity in the world. We return a normal BlockState in this case.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Waitable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Waitable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Waitable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Waitable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Waitable.java	(date 1703956060000)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
 import com.google.common.base.Preconditions;
-
 import java.util.concurrent.ExecutionException;
 
 public abstract class Waitable<T> implements Runnable {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WeakCollection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WeakCollection.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WeakCollection.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WeakCollection.java	(date 1703956060000)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
 import com.google.common.base.Preconditions;
-
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -13,7 +12,7 @@
     private final Collection<WeakReference<T>> collection;
 
     public WeakCollection() {
-        collection = new ArrayList<>();
+        collection = new ArrayList<WeakReference<T>>();
     }
 
     @Override
@@ -104,9 +103,7 @@
 
             @Override
             public void remove() throws IllegalStateException {
-                if (value != NO_VALUE) {
-                    throw new IllegalStateException("No last element");
-                }
+                Preconditions.checkState(value == NO_VALUE, "No last element");
 
                 value = null;
                 it.remove();
Index: src/main/java/org/bukkit/entity/ArmorStand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/ArmorStand.java b/src/main/java/org/bukkit/entity/ArmorStand.java
--- a/src/main/java/org/bukkit/entity/ArmorStand.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/ArmorStand.java	(date 1703956060000)
@@ -320,24 +320,6 @@
      */
     boolean hasEquipmentLock(@NotNull EquipmentSlot slot, @NotNull LockType lockType);
 
-    // Paper start
-    /**
-     * Tests if this armor stand can move.
-     *
-     * <p>The default value is {@code true}.</p>
-     *
-     * @return {@code true} if this armour stand can move, {@code false} otherwise
-     */
-    boolean canMove();
-
-    /**
-     * Sets if this armor stand can move.
-     *
-     * @param move {@code true} if this armour stand can move, {@code false} otherwise
-     */
-    void setCanMove(boolean move);
-    // Paper end
-
     /**
      * Represents types of locking mechanisms for ArmorStand equipment.
      */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WorldUUID.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WorldUUID.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WorldUUID.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WorldUUID.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/WorldUUID.java	(date 1703956060000)
@@ -1,8 +1,5 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
@@ -10,6 +7,8 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.UUID;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public final class WorldUUID {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CapturedBlockState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CapturedBlockState.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CapturedBlockState.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CapturedBlockState.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CapturedBlockState.java	(date 1703956060000)
@@ -20,6 +20,12 @@
         this.treeBlock = treeBlock;
     }
 
+    protected CapturedBlockState(CapturedBlockState state) {
+        super(state);
+
+        this.treeBlock = state.treeBlock;
+    }
+
     @Override
     public boolean update(boolean force, boolean applyPhysics) {
         boolean result = super.update(force, applyPhysics);
@@ -49,6 +55,11 @@
         return result;
     }
 
+    @Override
+    public CapturedBlockState copy() {
+        return new CapturedBlockState(this);
+    }
+
     public static CapturedBlockState getBlockState(Level world, BlockPos pos, int flag) {
         return new CapturedBlockState(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), flag, false);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBanner.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBanner.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBanner.java	(date 1703956060000)
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.block.AbstractBannerBlock;
@@ -11,9 +13,6 @@
 import org.bukkit.block.banner.Pattern;
 import org.bukkit.block.banner.PatternType;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class CraftBanner extends CraftBlockEntityState<BannerBlockEntity> implements Banner {
 
     private DyeColor base;
@@ -23,6 +22,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftBanner(CraftBanner state) {
+        super(state);
+    }
+
     @Override
     public void load(BannerBlockEntity banner) {
         super.load(banner);
@@ -100,4 +103,9 @@
         }
         banner.itemPatterns = newPatterns;
     }
+
+    @Override
+    public CraftBanner copy() {
+        return new CraftBanner(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBarrel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBarrel.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBarrel.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBarrel.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBarrel.java	(date 1703956060000)
@@ -15,6 +15,10 @@
         super(world, tileEntity);
     }
 
+    protected CraftBarrel(CraftBarrel state) {
+        super(state);
+    }
+
     @Override
     public Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
@@ -32,7 +36,7 @@
     @Override
     public void open() {
         requirePlaced();
-        if (!getTileEntity().openersCounter.bridge$opened()) {
+        if (!getTileEntity().openersCounter.opened) {
             BlockState blockData = getTileEntity().getBlockState();
             boolean open = blockData.getValue(BarrelBlock.OPEN);
 
@@ -43,19 +47,24 @@
                 }
             }
         }
-        getTileEntity().openersCounter.banner$setOpened(true);
+        getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         requirePlaced();
-        if (getTileEntity().openersCounter.bridge$opened()) {
+        if (getTileEntity().openersCounter.opened) {
             BlockState blockData = getTileEntity().getBlockState();
             getTileEntity().updateBlockState(blockData, false);
             if (getWorldHandle() instanceof net.minecraft.world.level.Level) {
                 getTileEntity().playSound(blockData, SoundEvents.BARREL_CLOSE);
             }
         }
-        getTileEntity().openersCounter.banner$setOpened(false);
+        getTileEntity().openersCounter.opened = false;
+    }
+
+    @Override
+    public CraftBarrel copy() {
+        return new CraftBarrel(this);
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeacon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeacon.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeacon.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeacon.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBeacon.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.block;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.util.ArrayList;
+import java.util.Collection;
 import net.minecraft.world.LockCode;
 import net.minecraft.world.level.block.entity.BeaconBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -12,15 +13,16 @@
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-import java.util.ArrayList;
-import java.util.Collection;
-
 public class CraftBeacon extends CraftBlockEntityState<BeaconBlockEntity> implements Beacon {
 
     public CraftBeacon(World world, final BeaconBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
+    protected CraftBeacon(CraftBeacon state) {
+        super(state);
+    }
+
     @Override
     public Collection<LivingEntity> getEntitiesInRange() {
         ensureNoWorldGeneration();
@@ -30,7 +32,7 @@
         if (tileEntity instanceof BeaconBlockEntity) {
             BeaconBlockEntity beacon = (BeaconBlockEntity) tileEntity;
 
-            Collection<net.minecraft.world.entity.player.Player> nms = BukkitExtraConstants.getHumansInRange(beacon.getLevel(), beacon.getBlockPos(), beacon.levels);
+            Collection<net.minecraft.world.entity.player.Player> nms = BeaconBlockEntity.getHumansInRange(beacon.getLevel(), beacon.getBlockPos(), beacon.levels);
             Collection<LivingEntity> bukkit = new ArrayList<LivingEntity>(nms.size());
 
             for (net.minecraft.world.entity.player.Player human : nms) {
@@ -94,4 +96,9 @@
     public void setLock(String key) {
         this.getSnapshot().lockKey = (key == null) ? LockCode.NO_LOCK : new LockCode(key);
     }
+
+    @Override
+    public CraftBeacon copy() {
+        return new CraftBeacon(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBed.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBed.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/block/CraftBed.java	(date 1703956060000)
@@ -11,6 +11,10 @@
         super(world, te);
     }
 
+    protected CraftBed(CraftBed state) {
+        super(state);
+    }
+
     @Override
     public DyeColor getColor() {
         switch (getType()) {
@@ -55,4 +59,9 @@
     public void setColor(DyeColor color) {
         throw new UnsupportedOperationException("Must set block type to appropriate bed colour");
     }
+
+    @Override
+    public CraftBed copy() {
+        return new CraftBed(this);
+    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/LazyPlayerSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/LazyPlayerSet.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/LazyPlayerSet.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/LazyPlayerSet.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/LazyPlayerSet.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
 import com.google.common.base.Preconditions;
+import java.util.HashSet;
+import java.util.List;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.entity.Player;
 
-import java.util.HashSet;
-import java.util.List;
-
 public class LazyPlayerSet extends LazyHashSet<Player> {
 
     private final MinecraftServer server;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/RandomSourceWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/RandomSourceWrapper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/RandomSourceWrapper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/RandomSourceWrapper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/RandomSourceWrapper.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
+import java.util.Random;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.level.levelgen.PositionalRandomFactory;
 
-import java.util.Random;
-
 public final class RandomSourceWrapper implements RandomSource {
 
     private final Random random;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/TerminalConsoleWriterThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/TerminalConsoleWriterThread.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/TerminalConsoleWriterThread.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/TerminalConsoleWriterThread.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/TerminalConsoleWriterThread.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
 import com.mojang.logging.LogQueues;
-import jline.console.ConsoleReader;
-import org.fusesource.jansi.Ansi;
-import org.fusesource.jansi.Ansi.Erase;
-
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jline.console.ConsoleReader;
+import org.fusesource.jansi.Ansi;
+import org.fusesource.jansi.Ansi.Erase;
 
 public class TerminalConsoleWriterThread extends Thread {
     private final ConsoleReader reader;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/UnsafeList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/UnsafeList.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/UnsafeList.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/UnsafeList.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/UnsafeList.java	(date 1703956060000)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
 import com.google.common.base.Preconditions;
-
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Versioning.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Versioning.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Versioning.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Versioning.java	(date 1703956060000)
@@ -2,6 +2,6 @@
 
 public final class Versioning {
     public static String getBukkitVersion() {
-        return "1.20.1-R0.1-SNAPSHOT";
+        return "1.20.4-R0.1-SNAPSHOT";
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftSpawnCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftSpawnCategory.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftSpawnCategory.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftSpawnCategory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftSpawnCategory.java	(date 1703956060000)
@@ -6,7 +6,7 @@
 public class CraftSpawnCategory {
 
     public static boolean isValidForLimits(SpawnCategory spawnCategory) {
-        return spawnCategory != null && spawnCategory.ordinal() < SpawnCategory.MISC.ordinal(); // Banner - use original
+        return spawnCategory != null && spawnCategory.ordinal() < SpawnCategory.MISC.ordinal();
     }
 
     public static String getConfigNameSpawnLimit(SpawnCategory spawnCategory) {
@@ -53,7 +53,7 @@
             case WATER_AMBIENT -> SpawnCategory.WATER_AMBIENT;
             case UNDERGROUND_WATER_CREATURE -> SpawnCategory.WATER_UNDERGROUND_CREATURE;
             case MISC -> SpawnCategory.MISC;
-            default -> SpawnCategory.valueOf(enumCreatureType.name()); // Banner - avoid not spawn category
+            default -> SpawnCategory.valueOf(enumCreatureType.name());
         };
     }
 
@@ -67,7 +67,7 @@
             case WATER_AMBIENT -> MobCategory.WATER_AMBIENT;
             case WATER_UNDERGROUND_CREATURE -> MobCategory.UNDERGROUND_WATER_CREATURE;
             case MISC -> MobCategory.MISC;
-            default -> MobCategory.valueOf(spawnCategory.name());// Banner - avoid not spawn category
+            default -> MobCategory.valueOf(spawnCategory.name());
         };
     }
 
Index: src/main/java/org/bukkit/entity/TropicalFish.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/TropicalFish.java b/src/main/java/org/bukkit/entity/TropicalFish.java
--- a/src/main/java/org/bukkit/entity/TropicalFish.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/TropicalFish.java	(date 1703956060000)
@@ -55,7 +55,7 @@
 
     /**
      * Enumeration of all different fish patterns. Refer to the
-     * <a href="https://minecraft.gamepedia.com/Fish_(mob)">Minecraft Wiki</a>
+     * <a href="https://minecraft.wiki/w/Fish_(mob)">Minecraft Wiki</a>
      * for pictures.
      */
     public static enum Pattern {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftVoxelShape.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftVoxelShape.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftVoxelShape.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftVoxelShape.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftVoxelShape.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.world.phys.AABB;
-import net.minecraft.world.phys.shapes.VoxelShape;
-import org.bukkit.util.BoundingBox;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.util.BoundingBox;
 
 public final class CraftVoxelShape implements org.bukkit.util.VoxelShape {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/DummyGeneratorAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/DummyGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/DummyGeneratorAccess.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/DummyGeneratorAccess.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/DummyGeneratorAccess.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
+import java.util.List;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -39,9 +41,6 @@
 import net.minecraft.world.ticks.BlackholeTickAccess;
 import net.minecraft.world.ticks.LevelTickAccess;
 
-import java.util.List;
-import java.util.function.Predicate;
-
 public class DummyGeneratorAccess implements WorldGenLevel {
 
     public static final WorldGenLevel INSTANCE = new DummyGeneratorAccess();
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/ForwardLogHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/ForwardLogHandler.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/ForwardLogHandler.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/ForwardLogHandler.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/ForwardLogHandler.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.ConsoleHandler;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class ForwardLogHandler extends ConsoleHandler {
     private Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
Index: src/main/java/org/bukkit/entity/Warden.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Warden.java b/src/main/java/org/bukkit/entity/Warden.java
--- a/src/main/java/org/bukkit/entity/Warden.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Warden.java	(date 1703956060000)
@@ -1,8 +1,8 @@
 package org.bukkit.entity;
 
+import javax.annotation.Nullable;
 import org.bukkit.Location;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * A Warden.
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/JsonHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/JsonHelper.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/JsonHelper.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/JsonHelper.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/JsonHelper.java	(date 1703956060000)
@@ -3,7 +3,6 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
-
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLegacy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLegacy.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLegacy.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLegacy.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
+import java.util.Arrays;
 import org.bukkit.Material;
 import org.bukkit.material.MaterialData;
 
-import java.util.Arrays;
-
 /**
  * @deprecated legacy use only
  */
@@ -44,7 +43,6 @@
             modern_values();
         }
         if (material.isLegacy()) {
-            // SPIGOT-4002: Fix for eclipse compiler manually compiling in default statements to lookupswitch
             throw new NoSuchFieldError("Legacy field ordinal: " + material);
         } else {
             int ordinal = material.ordinal();
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLocation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLocation.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLocation.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLocation.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftLocation.java	(date 1703956060000)
@@ -22,20 +22,19 @@
         return new Location(world, vec3D.x(), vec3D.y(), vec3D.z(), yaw, pitch);
     }
 
-    public static Location toBukkit(BlockPos BlockPos) {
-        return toBukkit(BlockPos,  (World) null);
+    public static Location toBukkit(BlockPos blockPosition) {
+        return toBukkit(blockPosition, (World) null);
     }
-
     public static Location toBukkit(BlockPos blockPosition, net.minecraft.world.level.Level world) {
         return toBukkit(blockPosition, world.getWorld(), 0.0F, 0.0F);
     }
 
-    public static Location toBukkit(BlockPos BlockPos, World world) {
-        return toBukkit(BlockPos, world, 0.0F, 0.0F);
+    public static Location toBukkit(BlockPos blockPosition, World world) {
+        return toBukkit(blockPosition, world, 0.0F, 0.0F);
     }
 
-    public static Location toBukkit(BlockPos BlockPos, World world, float yaw, float pitch) {
-        return new Location(world, BlockPos.getX(), BlockPos.getY(), BlockPos.getZ(), yaw, pitch);
+    public static Location toBukkit(BlockPos blockPosition, World world, float yaw, float pitch) {
+        return new Location(world, blockPosition.getX(), blockPosition.getY(), blockPosition.getZ(), yaw, pitch);
     }
 
     public static BlockPos toBlockPosition(Location location) {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftMagicNumbers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftMagicNumbers.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftMagicNumbers.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftMagicNumbers.java	(date 1703956060000)
@@ -2,28 +2,36 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
-import com.google.common.collect.BiMap;
-import com.google.common.collect.HashBiMap;
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
 import com.google.common.io.Files;
 import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import com.google.gson.JsonParseException;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.JsonOps;
+import java.io.File;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import net.minecraft.SharedConstants;
+import net.minecraft.Util;
 import net.minecraft.advancements.AdvancementHolder;
-import net.minecraft.advancements.critereon.DeserializationContext;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.TagParser;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerAdvancementManager;
-import net.minecraft.util.GsonHelper;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.datafix.fixes.References;
 import net.minecraft.world.item.Item;
@@ -32,10 +40,8 @@
 import net.minecraft.world.level.storage.LevelResource;
 import org.bukkit.Bukkit;
 import org.bukkit.FeatureFlag;
-import org.bukkit.Fluid;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
-import org.bukkit.Registry;
 import org.bukkit.UnsafeValues;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.attribute.Attribute;
@@ -43,11 +49,13 @@
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.v1_20_R3.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.v1_20_R3.CraftFeatureFlag;
+import org.bukkit.craftbukkit.v1_20_R3.CraftRegistry;
+import org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttribute;
 import org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttributeInstance;
-import org.bukkit.craftbukkit.v1_20_R3.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.v1_20_R3.legacy.CraftLegacy;
+import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionType;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.CreativeCategory;
 import org.bukkit.inventory.EquipmentSlot;
@@ -55,17 +63,7 @@
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Objects;
-import java.util.logging.Level;
-import java.util.logging.Logger;
+import org.bukkit.potion.PotionType;
 
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
@@ -100,7 +98,6 @@
     // ========================================================================
     public static final Map<Block, Material> BLOCK_MATERIAL = new HashMap<>();
     public static final Map<Item, Material> ITEM_MATERIAL = new HashMap<>();
-    public static final BiMap<net.minecraft.world.level.material.Fluid, Fluid> FLUIDTYPE_FLUID = HashBiMap.create();
     public static final Map<Material, Item> MATERIAL_ITEM = new HashMap<>();
     public static final Map<Material, Block> MATERIAL_BLOCK = new HashMap<>();
 
@@ -113,15 +110,6 @@
             ITEM_MATERIAL.put(item, Material.getMaterial(BuiltInRegistries.ITEM.getKey(item).getPath().toUpperCase(Locale.ROOT)));
         }
 
-        for (net.minecraft.world.level.material.Fluid fluidType : BuiltInRegistries.FLUID) {
-            if (BuiltInRegistries.FLUID.getKey(fluidType).getNamespace().equals(NamespacedKey.MINECRAFT)) {
-                Fluid fluid = Registry.FLUID.get(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.FLUID.getKey(fluidType)));
-                if (fluid != null) {
-                    FLUIDTYPE_FLUID.put(fluidType, fluid);
-                }
-            }
-        }
-
         for (Material material : Material.values()) {
             if (material.isLegacy()) {
                 continue;
@@ -145,10 +133,6 @@
         return ITEM_MATERIAL.getOrDefault(item, Material.AIR);
     }
 
-    public static Fluid getFluid(net.minecraft.world.level.material.Fluid fluid) {
-        return FLUIDTYPE_FLUID.get(fluid);
-    }
-
     public static Item getItem(Material material) {
         if (material != null && material.isLegacy()) {
             material = CraftLegacy.fromLegacy(material);
@@ -165,10 +149,6 @@
         return MATERIAL_BLOCK.get(material);
     }
 
-    public static net.minecraft.world.level.material.Fluid getFluid(Fluid fluid) {
-        return FLUIDTYPE_FLUID.inverse().get(fluid);
-    }
-
     public static ResourceLocation key(Material mat) {
         return CraftNamespacedKey.toMinecraft(mat.getKey());
     }
@@ -239,7 +219,7 @@
      * @return string
      */
     public String getMappingsVersion() {
-        return "3478a65bfd04b15b431fe107b3617dfc";
+        return "60a2bb6bf2684dc61c56b90d7c41bddc";
     }
 
     @Override
@@ -263,7 +243,7 @@
     }
 
     private static File getBukkitDataPackFolder() {
-        return new File(Objects.requireNonNull(BukkitExtraConstants.getServer()).getWorldPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+        return new File(MinecraftServer.getServer().getWorldPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
     }
 
     @Override
@@ -272,10 +252,9 @@
         ResourceLocation minecraftkey = CraftNamespacedKey.toMinecraft(key);
 
         JsonElement jsonelement = ServerAdvancementManager.GSON.fromJson(advancement, JsonElement.class);
-        JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "advancement");
-        net.minecraft.advancements.Advancement nms = net.minecraft.advancements.Advancement.fromJson(jsonobject, new DeserializationContext(minecraftkey, BukkitExtraConstants.getServer().getLootData()));
+        net.minecraft.advancements.Advancement nms = Util.getOrThrow(net.minecraft.advancements.Advancement.CODEC.parse(JsonOps.INSTANCE, jsonelement), JsonParseException::new);
         if (nms != null) {
-            BukkitExtraConstants.getServer().getAdvancements().advancements.put(minecraftkey, new AdvancementHolder(minecraftkey, nms));
+            MinecraftServer.getServer().getAdvancements().advancements.put(minecraftkey, new AdvancementHolder(minecraftkey, nms));
             Advancement bukkit = Bukkit.getAdvancement(key);
 
             if (bukkit != null) {
@@ -288,7 +267,7 @@
                     Bukkit.getLogger().log(Level.SEVERE, "Error saving advancement " + key, ex);
                 }
 
-                BukkitExtraConstants.getServer().getPlayerList().reloadResources();
+                MinecraftServer.getServer().getPlayerList().reloadResources();
 
                 return bukkit;
             }
@@ -307,7 +286,7 @@
 
     @Override
     public void checkSupported(PluginDescriptionFile pdf) throws InvalidPluginException {
-        String minimumVersion = BukkitExtraConstants.getServer().bridge$server().minimumAPI;
+        String minimumVersion = MinecraftServer.getServer().server.minimumAPI;
         int minimumIndex = SUPPORTED_API.indexOf(minimumVersion);
 
         if (pdf.getAPIVersion() != null) {
@@ -351,7 +330,7 @@
 
         Multimap<net.minecraft.world.entity.ai.attributes.Attribute, net.minecraft.world.entity.ai.attributes.AttributeModifier> nmsDefaultAttributes = getItem(material).getDefaultAttributeModifiers(CraftEquipmentSlot.getNMS(slot));
         for (Map.Entry<net.minecraft.world.entity.ai.attributes.Attribute, net.minecraft.world.entity.ai.attributes.AttributeModifier> mapEntry : nmsDefaultAttributes.entries()) {
-            Attribute attribute = CraftAttributeMap.fromMinecraft(BuiltInRegistries.ATTRIBUTE.getKey(mapEntry.getKey()).toString());
+            Attribute attribute = CraftAttribute.minecraftToBukkit(mapEntry.getKey());
             defaultAttributes.put(attribute, CraftAttributeInstance.convert(mapEntry.getValue(), slot));
         }
 
@@ -393,6 +372,14 @@
         return CraftFeatureFlag.getFromNMS(namespacedKey);
     }
 
+    @Override
+    public PotionType.InternalPotionData getInternalPotionData(NamespacedKey namespacedKey) {
+        net.minecraft.world.item.alchemy.Potion potionRegistry = CraftRegistry.getMinecraftRegistry(Registries.POTION)
+                .getOptional(CraftNamespacedKey.toMinecraft(namespacedKey)).orElseThrow();
+
+        return new CraftPotionType(namespacedKey, potionRegistry);
+    }
+
     /**
      * This helper class represents the different NBT Tags.
      * <p>
Index: src/main/java/org/bukkit/entity/Ghast.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Ghast.java b/src/main/java/org/bukkit/entity/Ghast.java
--- a/src/main/java/org/bukkit/entity/Ghast.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Ghast.java	(date 1703956060000)
@@ -4,7 +4,6 @@
  * Represents a Ghast.
  */
 public interface Ghast extends Flying, Enemy {
-
     /**
      * Gets whether the Ghast is charging
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftNBTTagConfigSerializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftNBTTagConfigSerializer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftNBTTagConfigSerializer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftNBTTagConfigSerializer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftNBTTagConfigSerializer.java	(date 1703956060000)
@@ -2,20 +2,18 @@
 
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
-import net.minecraft.nbt.CollectionTag;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Pattern;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.DoubleTag;
 import net.minecraft.nbt.IntTag;
 import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.SnbtPrinterTagVisitor;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.TagParser;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.regex.Pattern;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftNBTTagConfigSerializer {
 
@@ -24,35 +22,29 @@
     private static final Pattern DOUBLE = Pattern.compile("[-+]?(?:[0-9]+[.]?|[0-9]*[.][0-9]+)(?:e[-+]?[0-9]+)?d", Pattern.CASE_INSENSITIVE);
     private static final TagParser MOJANGSON_PARSER = new TagParser(new StringReader(""));
 
-    public static Object serialize(Tag base) {
-        if (base instanceof CompoundTag) {
-            Map<String, Object> innerMap = new HashMap<>();
-            for (String key : ((CompoundTag) base).getAllKeys()) {
-                innerMap.put(key, serialize(((CompoundTag) base).get(key)));
-            }
+    public static String serialize(@NotNull final Tag base) {
+        final SnbtPrinterTagVisitor snbtVisitor = new SnbtPrinterTagVisitor();
+        return snbtVisitor.visit(base);
+    }
 
-            return innerMap;
-        } else if (base instanceof ListTag) {
-            List<Object> baseList = new ArrayList<>();
-            for (int i = 0; i < ((CollectionTag) base).size(); i++) {
-                baseList.add(serialize((Tag) ((CollectionTag) base).get(i)));
+    public static Tag deserialize(final Object object) {
+        // The new logic expects the top level object to be a single string, holding the entire nbt tag as SNBT.
+        if (object instanceof final String snbtString) {
+            try {
+                return TagParser.parseTag(snbtString);
+            } catch (final CommandSyntaxException e) {
+                throw new RuntimeException("Failed to deserialise nbt", e);
             }
-
-            return baseList;
-        } else if (base instanceof StringTag) {
-            return base.getAsString();
-        } else if (base instanceof IntTag) { // No need to check for doubles, those are covered by the double itself
-            return base.toString() + "i";
+        } else { // Legacy logic is passed to the internal legacy deserialization that attempts to read the old format that *unsuccessfully* attempted to read/write nbt to a full yml tree.
+            return internalLegacyDeserialization(object);
         }
-
-        return base.toString();
     }
 
-    public static Tag deserialize(Object object) {
+    private static Tag internalLegacyDeserialization(@NotNull final Object object) {
         if (object instanceof Map) {
             CompoundTag compound = new CompoundTag();
             for (Map.Entry<String, Object> entry : ((Map<String, Object>) object).entrySet()) {
-                compound.put(entry.getKey(), deserialize(entry.getValue()));
+                compound.put(entry.getKey(), internalLegacyDeserialization(entry.getValue()));
             }
 
             return compound;
@@ -64,7 +56,7 @@
 
             ListTag tagList = new ListTag();
             for (Object tag : list) {
-                tagList.add(deserialize(tag));
+                tagList.add(internalLegacyDeserialization(tag));
             }
 
             return tagList;
@@ -94,6 +86,6 @@
             }
         }
 
-        throw new RuntimeException("Could not deserialize Tag");
+        throw new RuntimeException("Could not deserialize NBTBase");
     }
 }
Index: src/main/java/org/bukkit/entity/SpawnCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/SpawnCategory.java b/src/main/java/org/bukkit/entity/SpawnCategory.java
--- a/src/main/java/org/bukkit/entity/SpawnCategory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/SpawnCategory.java	(date 1703956060000)
@@ -3,7 +3,7 @@
 /**
  * Represents groups of entities with shared spawn behaviors and mob caps.
  *
- * @see <a href="https://minecraft.fandom.com/wiki/Spawn#Java_Edition_mob_cap">Minecraft Wiki</a>
+ * @see <a href="https://minecraft.wiki/w/Spawn#Java_Edition_mob_cap">Minecraft Wiki</a>
  */
 public enum SpawnCategory {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/HelpYamlReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/HelpYamlReader.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/HelpYamlReader.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/HelpYamlReader.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/HelpYamlReader.java	(date 1703956060000)
@@ -1,18 +1,17 @@
 package org.bukkit.craftbukkit.v1_20_R3.help;
 
 import com.google.common.base.Charsets;
-import org.bukkit.ChatColor;
-import org.bukkit.Server;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.file.YamlConfiguration;
-import org.bukkit.help.HelpTopic;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.logging.Level;
+import org.bukkit.ChatColor;
+import org.bukkit.Server;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.help.HelpTopic;
 
 /**
  * HelpYamlReader is responsible for processing the contents of the help.yml file.
Index: src/main/java/org/bukkit/entity/Turtle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Turtle.java b/src/main/java/org/bukkit/entity/Turtle.java
--- a/src/main/java/org/bukkit/entity/Turtle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Turtle.java	(date 1703956060000)
@@ -4,7 +4,6 @@
  * Represents a turtle.
  */
 public interface Turtle extends Animals {
-
     /**
      * Gets whether the turtle has an egg
      *
Index: src/main/java/org/bukkit/entity/Entity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
--- a/src/main/java/org/bukkit/entity/Entity.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Entity.java	(date 1703956060000)
@@ -1,5 +1,8 @@
 package org.bukkit.entity;
 
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
 import org.bukkit.Nameable;
@@ -21,10 +24,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
 /**
  * Represents a base entity in the world
  */
@@ -255,6 +254,8 @@
 
     /**
      * Mark the entity's removal.
+     *
+     * @throws UnsupportedOperationException if you try to remove a {@link Player} use {@link Player#kickPlayer(String)} in this case instead
      */
     public void remove();
 
@@ -266,8 +267,8 @@
     public boolean isDead();
 
     /**
-     * Returns false if the entity has died or been despawned for some other
-     * reason.
+     * Returns false if the entity has died, been despawned for some other
+     * reason, or has not been added to the world.
      *
      * @return True if valid.
      */
@@ -548,6 +549,20 @@
     @ApiStatus.Experimental
     public boolean isVisibleByDefault();
 
+    /**
+     * Get all players that are currently tracking this entity.
+     * <p>
+     * 'Tracking' means that this entity has been sent to the player and that
+     * they are receiving updates on its state. Note that the client's {@code
+     * 'Entity Distance'} setting does not affect the range at which entities
+     * are tracked.
+     *
+     * @return the players tracking this entity, or an empty set if none
+     */
+    @NotNull
+    @ApiStatus.Experimental
+    Set<Player> getTrackedBy();
+
     /**
      * Sets whether the entity has a team colored (default: white) glow.
      *
@@ -711,8 +726,6 @@
      * @param sneak true if the entity should be sneaking
      */
     void setSneaking(boolean sneak);
-
-    // Paper start
     // Paper end
 
     /**
@@ -723,6 +736,42 @@
     @NotNull
     SpawnCategory getSpawnCategory();
 
+    /**
+     * Checks if this entity has been spawned in a world. <br>
+     * Entities not spawned in a world will not tick, be sent to players, or be
+     * saved to the server files.
+     *
+     * @return whether the entity has been spawned in a world
+     */
+    boolean isInWorld();
+    /**
+     * Crates an {@link EntitySnapshot} representing the current state of this entity.
+     *
+     * @return a snapshot representing this entity or null if one cannot be made
+     */
+    @Nullable
+    @ApiStatus.Experimental
+    EntitySnapshot createSnapshot();
+    /**
+     * Creates a copy of this entity and all its data. Does not spawn the copy in
+     * the world. <br>
+     * <b>Note:</b> Players cannot be copied.
+     *
+     * @return a copy of this entity.
+     */
+    @NotNull
+    @ApiStatus.Experimental
+    Entity copy();
+    /**
+     * Creates a copy of this entity and all its data. Spawns the copy at the given location. <br>
+     * <b>Note:</b> Players cannot be copied.
+     * @param to the location to copy to
+     * @return a copy of this entity.
+     */
+    @NotNull
+    @ApiStatus.Experimental
+    Entity copy(@NotNull Location to);
+
     // Spigot start
     public class Spigot extends CommandSender.Spigot {
 
@@ -732,16 +781,4 @@
     @Override
     Spigot spigot();
     // Spigot end
-
-    // Paper start
-    /**
-     * Gets the location where this entity originates from.
-     * <p>
-     * This value can be null if the entity hasn't yet been added to the world.
-     *
-     * @return Location where entity originates or null if not yet added
-     */
-    @Nullable
-    Location getOrigin();
-    // Paper end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/SimpleHelpMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/SimpleHelpMap.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/SimpleHelpMap.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/SimpleHelpMap.java	(date 1703956060000)
@@ -4,6 +4,14 @@
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Collections2;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.TreeSet;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandExecutor;
 import org.bukkit.command.MultipleCommandAlias;
@@ -19,15 +27,6 @@
 import org.bukkit.help.HelpTopicFactory;
 import org.bukkit.help.IndexHelpTopic;
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
-import java.util.TreeSet;
-
 /**
  * Standard implementation of {@link HelpMap} for CraftBukkit servers.
  */
Index: src/main/java/org/bukkit/entity/EvokerFangs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/EvokerFangs.java b/src/main/java/org/bukkit/entity/EvokerFangs.java
--- a/src/main/java/org/bukkit/entity/EvokerFangs.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/EvokerFangs.java	(date 1703956060000)
@@ -21,4 +21,17 @@
      * @param owner the {@link LivingEntity} which summoned the fangs
      */
     void setOwner(@Nullable LivingEntity owner);
+
+    /**
+     * Get the delay in ticks until the fang attacks.
+     *
+     * @return the delay
+     */
+    int getAttackDelay();
+    /**
+     * Set the delay in ticks until the fang attacks.
+     *
+     * @param delay the delay, must be positive
+     */
+    void setAttackDelay(int delay);
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/BlockStateListPopulator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/BlockStateListPopulator.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/BlockStateListPopulator.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/BlockStateListPopulator.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/BlockStateListPopulator.java	(date 1703956060000)
@@ -1,5 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.server.level.ServerLevel;
@@ -14,14 +21,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockEntityState;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockState;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.function.Predicate;
-
 public class BlockStateListPopulator extends DummyGeneratorAccess {
     private final LevelAccessor world;
     private final Map<BlockPos, net.minecraft.world.level.block.state.BlockState> dataMap = new HashMap<>();
Index: src/main/java/org/bukkit/entity/Enemy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Enemy.java b/src/main/java/org/bukkit/entity/Enemy.java
--- a/src/main/java/org/bukkit/entity/Enemy.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Enemy.java	(date 1703956060000)
@@ -3,4 +3,4 @@
 /**
  * Represents an Enemy
  */
-public interface Enemy extends LivingEntity {}
+public interface Enemy extends LivingEntity {}
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Commodore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Commodore.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Commodore.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Commodore.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/Commodore.java	(date 1703956060000)
@@ -1,6 +1,19 @@
 package org.bukkit.craftbukkit.v1_20_R3.util;
 
 import com.google.common.io.ByteStreams;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Enumeration;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.util.jar.JarOutputStream;
+import java.util.zip.ZipEntry;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import joptsimple.OptionSpec;
@@ -9,22 +22,11 @@
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.Handle;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Enumeration;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
-import java.util.jar.JarOutputStream;
-import java.util.zip.ZipEntry;
-
 /**
  * This file is imported from Commodore.
  *
@@ -237,6 +239,9 @@
                                     case "GRASS_PATH":
                                         name = "DIRT_PATH";
                                         break;
+                                    case "GRASS":
+                                        name = "SHORT_GRASS";
+                                        break;
                                 }
                             }
 
@@ -433,6 +438,34 @@
 
                         super.visitLdcInsn( value );
                     }
+                    @Override
+                    public void visitInvokeDynamicInsn(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments )
+                    {
+                        if ( bootstrapMethodHandle.getOwner().equals( "java/lang/invoke/LambdaMetafactory" )
+                                && bootstrapMethodHandle.getName().equals( "metafactory" ) && bootstrapMethodArguments.length == 3 )
+                        {
+                            Type samMethodType = (Type) bootstrapMethodArguments[ 0 ];
+                            Handle implMethod = (Handle) bootstrapMethodArguments[ 1 ];
+                            Type instantiatedMethodType = (Type) bootstrapMethodArguments[ 2 ];
+
+                            List<Object> newTypes = new ArrayList<>();
+                            newTypes.add( samMethodType );
+
+                            if ( implMethod.getOwner().startsWith( "org/bukkit" ) && implMethod.getDesc().contains( "org/bukkit/util/Consumer" ) )
+                            {
+                                implMethod = new Handle( implMethod.getTag(), implMethod.getOwner(), implMethod.getName(),
+                                        implMethod.getDesc().replace( "org/bukkit/util/Consumer", "java/util/function/Consumer" ), implMethod.isInterface() );
+                            }
+
+                            newTypes.add( implMethod );
+                            newTypes.add( instantiatedMethodType );
+
+                            super.visitInvokeDynamicInsn( name, descriptor, bootstrapMethodHandle, newTypes.toArray() );
+                            return;
+                        }
+
+                        super.visitInvokeDynamicInsn( name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments );
+                    }
                 };
             }
         }, 0 );
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftChatMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftChatMessage.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftChatMessage.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/util/CraftChatMessage.java	(date 1703956060000)
@@ -3,24 +3,22 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMap.Builder;
 import com.google.gson.JsonParseException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 import net.minecraft.ChatFormatting;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.ComponentContents;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextColor;
-import net.minecraft.network.chat.contents.LiteralContents;
+import net.minecraft.network.chat.contents.PlainTextContents;
 import net.minecraft.network.chat.contents.TranslatableContents;
 import org.bukkit.ChatColor;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
 public final class CraftChatMessage {
 
     private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))");
@@ -89,7 +87,7 @@
                         hex.append(c);
 
                         if (hex.length() == 7) {
-                            modifier = RESET.withColor(TextColor.parseColor(hex.toString()));
+                            modifier = RESET.withColor(TextColor.parseColor(hex.toString()).result().get());
                             hex = null;
                         }
                     } else if (format.isFormat() && format != ChatFormatting.RESET) {
@@ -294,13 +292,13 @@
         StringBuilder out = new StringBuilder();
 
         boolean hadFormat = false;
-        for (Component c : list(component)) {
+        for (Component c : component) {
             Style modi = c.getStyle();
             TextColor color = modi.getColor();
-            if (c.getContents() != ComponentContents.EMPTY || color != null) {
+            if (c.getContents() != PlainTextContents.LiteralContents.EMPTY || color != null) {
                 if (color != null) {
-                    if (color.bridge$format() != null) {
-                        out.append(color.bridge$format());
+                    if (color.format != null) {
+                        out.append(color.format);
                     } else {
                         out.append(ChatColor.COLOR_CHAR).append("x");
                         for (char magic : color.serialize().substring(1).toCharArray()) {
@@ -341,24 +339,14 @@
         return out.toString();
     }
 
-    public static ArrayList<Component> list(Component txt) {
-        ArrayList<Component> arr = new ArrayList<>();
-        if (!arr.contains(txt))
-            arr.add(txt);
-        for (Component tx : txt.getSiblings()) {
-            arr.addAll(list(tx) );
-        }
-        return arr;
-    }
-
     public static Component fixComponent(MutableComponent component) {
         Matcher matcher = LINK_PATTERN.matcher("");
         return fixComponent(component, matcher);
     }
 
     private static Component fixComponent(MutableComponent component, Matcher matcher) {
-        if (component.getContents() instanceof LiteralContents) {
-            LiteralContents text = ((LiteralContents) component.getContents());
+        if (component.getContents() instanceof PlainTextContents.LiteralContents) {
+            PlainTextContents.LiteralContents text = ((PlainTextContents.LiteralContents) component.getContents());
             String msg = text.text();
             if (matcher.reset(msg).find()) {
                 matcher.reset();
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftBossBar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftBossBar.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftBossBar.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftBossBar.java	(date 1703956060000)
@@ -2,6 +2,11 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Consumer;
+import java.util.function.Supplier;
 import net.minecraft.network.protocol.game.ClientboundBossEventPacket;
 import net.minecraft.server.level.ServerBossEvent;
 import net.minecraft.server.level.ServerPlayer;
@@ -14,12 +19,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftChatMessage;
 import org.bukkit.entity.Player;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.function.Consumer;
-import java.util.function.Supplier;
-
 public class CraftBossBar implements BossBar {
 
     private final ServerBossEvent handle;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftDragonBattle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftDragonBattle.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftDragonBattle.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftDragonBattle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/boss/CraftDragonBattle.java	(date 1703956060000)
@@ -1,6 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.boss;
 
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.stream.Collectors;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.dimension.end.DragonRespawnAnimation;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
@@ -14,11 +18,6 @@
 import org.bukkit.entity.EnderCrystal;
 import org.bukkit.entity.EnderDragon;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.stream.Collectors;
-
 public class CraftDragonBattle implements DragonBattle {
 
     private final EndDragonFight handle;
@@ -88,7 +87,7 @@
                 return !((CraftWorld) world).getHandle().equals(handle.level);
             });
             this.handle.respawnDragon(list.stream().map(enderCrystal -> ((CraftEnderCrystal) enderCrystal).getHandle()).collect(Collectors.toList()));
-            return this.handle.bridge$isRespawnDragon();
+            return this.handle.respawnDragon;
         }
         return false;
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/CustomIndexHelpTopic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/CustomIndexHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/CustomIndexHelpTopic.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/CustomIndexHelpTopic.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/help/CustomIndexHelpTopic.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3.help;
 
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
 import org.bukkit.command.CommandSender;
 import org.bukkit.help.HelpMap;
 import org.bukkit.help.HelpTopic;
 import org.bukkit.help.IndexHelpTopic;
 
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-
 /**
  */
 public class CustomIndexHelpTopic extends IndexHelpTopic {
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapColorCache.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapColorCache.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapColorCache.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapColorCache.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapColorCache.java	(date 1703956060000)
@@ -1,10 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.map;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.Util;
-import org.bukkit.map.MapPalette;
-
-import java.awt.*;
+import java.awt.Color;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -18,6 +15,8 @@
 import java.util.logging.Logger;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.InflaterInputStream;
+import net.minecraft.Util;
+import org.bukkit.map.MapPalette;
 
 public class CraftMapColorCache implements MapPalette.MapColorCache {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapView.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapView.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapView.java	(date 1703956060000)
@@ -1,8 +1,14 @@
 package org.bukkit.craftbukkit.v1_20_R3.map;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import org.bukkit.Bukkit;
@@ -12,13 +18,6 @@
 import org.bukkit.map.MapRenderer;
 import org.bukkit.map.MapView;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.logging.Level;
-
 public final class CraftMapView implements MapView {
 
     private final Map<CraftPlayer, RenderData> renderCache = new HashMap<CraftPlayer, RenderData>();
@@ -33,7 +32,7 @@
 
     @Override
     public int getId() {
-        String text = worldMap.bridge$id();
+        String text = worldMap.id;
         Preconditions.checkState(text.startsWith("map_"), "Map has a invalid ID");
         try {
             return Integer.parseInt(text.substring("map_".length()));
@@ -60,14 +59,14 @@
     @Override
     public World getWorld() {
         ResourceKey<net.minecraft.world.level.Level> dimension = worldMap.dimension;
-        ServerLevel world = BukkitExtraConstants.getServer().getLevel(dimension);
+        ServerLevel world = MinecraftServer.getServer().getLevel(dimension);
 
         if (world != null) {
             return world.getWorld();
         }
 
-        if (worldMap.bridge$uniqueId() != null) {
-            return Bukkit.getServer().getWorld(worldMap.bridge$uniqueId());
+        if (worldMap.uniqueId != null) {
+            return Bukkit.getServer().getWorld(worldMap.uniqueId);
         }
         return null;
     }
@@ -75,7 +74,7 @@
     @Override
     public void setWorld(World world) {
         worldMap.dimension = ((CraftWorld) world).getHandle().dimension();
-        worldMap.banner$setUniqueId(world.getUID());
+        worldMap.uniqueId = world.getUID();
     }
 
     @Override
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/RenderData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/RenderData.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/RenderData.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/RenderData.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/RenderData.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3.map;
 
-import org.bukkit.map.MapCursor;
-
 import java.util.ArrayList;
+import org.bukkit.map.MapCursor;
 
 public class RenderData {
 
@@ -11,7 +10,7 @@
 
     public RenderData() {
         this.buffer = new byte[128 * 128];
-        this.cursors = new ArrayList<MapCursor>();
+        this.cursors = new ArrayList<>();
     }
 
 }
Index: src/main/java/org/bukkit/entity/LightningStrike.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/LightningStrike.java b/src/main/java/org/bukkit/entity/LightningStrike.java
--- a/src/main/java/org/bukkit/entity/LightningStrike.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/LightningStrike.java	(date 1703956060000)
@@ -1,6 +1,7 @@
 package org.bukkit.entity;
 
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents an instance of a lightning strike. May or may not do damage.
@@ -14,8 +15,75 @@
      */
     public boolean isEffect();
 
+    /**
+     * Get the amount of flashes that will occur before the lightning is
+     * removed. By default this value is between 1 and 3.
+     *
+     * @return the flashes
+     */
+    public int getFlashes();
+
+    /**
+     * Set the amount of flashes that will occur before the lightning is
+     * removed. One flash will occur after this lightning strike's life
+     * has reduced below 0.
+     *
+     * @param flashes the flashes
+     */
+    public void setFlashes(int flashes);
+
+    /**
+     * Get the amount of ticks this lightning strike will inflict damage
+     * upon its hit entities.
+     * <p>
+     * When life ticks are negative, there is a random chance that another
+     * flash will be initiated and life ticks reset to 1.
+     *
+     * @return the life ticks
+     */
+    public int getLifeTicks();
+
+    /**
+     * Get the amount of ticks this lightning strike will inflict damage
+     * upon its hit entities.
+     * <p>
+     * When life ticks are negative, there is a random chance that another
+     * flash will be initiated and life ticks reset to 1. Additionally, if
+     * life ticks are set to 2 (the default value when a lightning strike
+     * has been spawned), a list of events will occur:
+     * <ul>
+     *   <li>Impact sound effects will be played
+     *   <li>Fire will be spawned (dependent on difficulty)
+     *   <li>Lightning rods will be powered (if hit)
+     *   <li>Copper will be stripped (if hit)
+     *   <li>{@link GameEvent#LIGHTNING_STRIKE} will be dispatched
+     * </ul>
+     *
+     * @param ticks the life ticks
+     */
+    public void setLifeTicks(int ticks);
+
+    /**
+     * Get the {@link Player} that caused this lightning to strike. This
+     * will occur naturally if a trident enchanted with
+     * {@link Enchantment#CHANNELING Channeling} were thrown at an entity
+     * during a storm.
+     *
+     * @return the player
+     */
+    @Nullable
+    public Player getCausingPlayer();
+
+    /**
+     * Set the {@link Player} that caused this lightning to strike.
+     *
+     * @param player the player
+     */
+    public void setCausingPlayer(@Nullable Player player);
+
     // Spigot start
     public class Spigot extends Entity.Spigot {
+
         /*
          * Returns whether the strike is silent.
          *
@@ -28,6 +96,6 @@
 
     @NotNull
     @Override
-    Entity.Spigot spigot();
+    Spigot spigot();
     // Spigot end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftBlockTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftBlockTag.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftBlockTag.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftBlockTag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftBlockTag.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.tag;
 
+import java.util.Set;
+import java.util.stream.Collectors;
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.level.block.Block;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-
-import java.util.Set;
-import java.util.stream.Collectors;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 
 public class CraftBlockTag extends CraftTag<Block, Material> {
 
@@ -16,7 +15,7 @@
 
     @Override
     public boolean isTagged(Material item) {
-        Block block = CraftMagicNumbers.getBlock(item);
+        Block block = CraftBlockType.bukkitToMinecraft(item);
 
         // SPIGOT-6952: A Material is not necessary a block, in this case return false
         if (block == null) {
@@ -28,6 +27,6 @@
 
     @Override
     public Set<Material> getValues() {
-        return  getHandle().stream().map((block) -> CraftMagicNumbers.getMaterial(block.value())).collect(Collectors.toUnmodifiableSet());
+        return  getHandle().stream().map((block) -> CraftBlockType.minecraftToBukkit(block.value())).collect(Collectors.toUnmodifiableSet());
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftEntityTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftEntityTag.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftEntityTag.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftEntityTag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftEntityTag.java	(date 1703956060000)
@@ -1,15 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.tag;
 
-import net.minecraft.core.registries.Registries;
-import net.minecraft.resources.ResourceKey;
-import net.minecraft.tags.TagKey;
-import org.bukkit.Registry;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
-import org.bukkit.entity.EntityType;
-
-import java.util.Objects;
 import java.util.Set;
 import java.util.stream.Collectors;
+import net.minecraft.tags.TagKey;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntityType;
+import org.bukkit.entity.EntityType;
 
 public class CraftEntityTag extends CraftTag<net.minecraft.world.entity.EntityType<?>, EntityType> {
 
@@ -19,11 +14,11 @@
 
     @Override
     public boolean isTagged(EntityType entity) {
-        return registry.getHolderOrThrow(ResourceKey.create(Registries.ENTITY_TYPE, CraftNamespacedKey.toMinecraft(entity.getKey()))).is(tag);
+        return CraftEntityType.bukkitToMinecraft(entity).is(tag);
     }
 
     @Override
     public Set<EntityType> getValues() {
-        return getHandle().stream().map((nms) -> Registry.ENTITY_TYPE.get(CraftNamespacedKey.fromMinecraft(net.minecraft.world.entity.EntityType.getKey(nms.value())))).filter(Objects::nonNull).collect(Collectors.toUnmodifiableSet());
+        return getHandle().stream().map(net.minecraft.core.Holder::value).map(CraftEntityType::minecraftToBukkit).collect(Collectors.toUnmodifiableSet());
     }
 }
\ No newline at end of file
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftFluidTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftFluidTag.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftFluidTag.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftFluidTag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftFluidTag.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3.tag;
 
-import net.minecraft.tags.TagKey;
-import org.bukkit.Fluid;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-
 import java.util.Set;
 import java.util.stream.Collectors;
+import net.minecraft.tags.TagKey;
+import org.bukkit.Fluid;
+import org.bukkit.craftbukkit.v1_20_R3.CraftFluid;
 
 public class CraftFluidTag extends CraftTag<net.minecraft.world.level.material.Fluid, Fluid> {
 
@@ -15,11 +14,11 @@
 
     @Override
     public boolean isTagged(Fluid fluid) {
-        return CraftMagicNumbers.getFluid(fluid).is(tag);
+        return CraftFluid.bukkitToMinecraft(fluid).is(tag);
     }
 
     @Override
     public Set<Fluid> getValues() {
-        return getHandle().stream().map((fluid) -> CraftMagicNumbers.getFluid(fluid.value())).collect(Collectors.toUnmodifiableSet());
+        return getHandle().stream().map(net.minecraft.core.Holder::value).map(CraftFluid::minecraftToBukkit).collect(Collectors.toUnmodifiableSet());
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftItemTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftItemTag.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftItemTag.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftItemTag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/tag/CraftItemTag.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3.tag;
 
+import java.util.Set;
+import java.util.stream.Collectors;
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.item.Item;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-
-import java.util.Set;
-import java.util.stream.Collectors;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 
 public class CraftItemTag extends CraftTag<Item, Material> {
 
@@ -16,7 +15,7 @@
 
     @Override
     public boolean isTagged(Material item) {
-        Item minecraft = CraftMagicNumbers.getItem(item);
+        Item minecraft = CraftItemType.bukkitToMinecraft(item);
 
         // SPIGOT-6952: A Material is not necessary an item, in this case return false
         if (minecraft == null) {
@@ -28,6 +27,6 @@
 
     @Override
     public Set<Material> getValues() {
-        return getHandle().stream().map((item) -> CraftMagicNumbers.getMaterial(item.value())).collect(Collectors.toUnmodifiableSet());
+        return getHandle().stream().map((item) -> CraftItemType.minecraftToBukkit(item.value())).collect(Collectors.toUnmodifiableSet());
     }
 }
Index: src/main/java/org/bukkit/entity/Piglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Piglin.java b/src/main/java/org/bukkit/entity/Piglin.java
--- a/src/main/java/org/bukkit/entity/Piglin.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Piglin.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.entity;
 
+import java.util.Set;
 import org.bukkit.Material;
 import org.bukkit.inventory.InventoryHolder;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 /**
  * Represents a Piglin.
  */
Index: src/main/java/org/bukkit/entity/ThrownPotion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/ThrownPotion.java b/src/main/java/org/bukkit/entity/ThrownPotion.java
--- a/src/main/java/org/bukkit/entity/ThrownPotion.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/ThrownPotion.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.entity;
 
+import java.util.Collection;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collection;
-
 /**
  * Represents a thrown potion bottle
  */
Index: src/main/java/org/bukkit/entity/TNTPrimed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/TNTPrimed.java b/src/main/java/org/bukkit/entity/TNTPrimed.java
--- a/src/main/java/org/bukkit/entity/TNTPrimed.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/TNTPrimed.java	(date 1703956060000)
@@ -53,15 +53,4 @@
      * @param source the source of this primed TNT
      */
     public void setSource(@Nullable Entity source);
-
-    /**
-     * Gets the source block location of the TNTPrimed
-     *
-     * @return the source block location the TNTPrimed was spawned from
-     * @deprecated replaced by {@link Entity#getOrigin()}
-     */
-    @Deprecated
-    default org.bukkit.Location getSourceLoc() {
-        return this.getOrigin();
-    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanEntry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanEntry.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanEntry.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanEntry.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanEntry.java	(date 1703956060000)
@@ -1,14 +1,14 @@
 package org.bukkit.craftbukkit.v1_20_R3.ban;
 
 import com.google.common.net.InetAddresses;
-import net.minecraft.server.players.IpBanList;
-import net.minecraft.server.players.IpBanListEntry;
-
 import java.net.InetAddress;
 import java.time.Instant;
 import java.util.Date;
+import net.minecraft.server.players.IpBanList;
+import net.minecraft.server.players.IpBanListEntry;
+import org.bukkit.BanEntry;
 
-public final class CraftIpBanEntry implements org.bukkit.BanEntry<InetAddress> {
+public final class CraftIpBanEntry implements BanEntry<InetAddress> {
     private static final Date minorDate = Date.from(Instant.parse("1899-12-31T04:00:00Z"));
     private final IpBanList list;
     private final String target;
@@ -32,7 +32,7 @@
     }
 
     @Override
-    public InetAddress  getBanTarget() {
+    public InetAddress getBanTarget() {
         return InetAddresses.forString(this.target);
     }
 
@@ -82,7 +82,7 @@
 
     @Override
     public void save() {
-        IpBanListEntry entry =  new IpBanListEntry(this.target, this.created, this.source, this.expiration, this.reason);
+        IpBanListEntry entry = new IpBanListEntry(this.target, this.created, this.source, this.expiration, this.reason);
         this.list.add(entry);
     }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanList.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanList.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanList.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftIpBanList.java	(date 1703956060000)
@@ -3,20 +3,16 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.net.InetAddresses;
-import net.minecraft.server.players.IpBanList;
-import net.minecraft.server.players.IpBanListEntry;
-import org.bukkit.BanEntry;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.net.InetAddress;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Date;
 import java.util.Set;
+import net.minecraft.server.players.IpBanList;
+import net.minecraft.server.players.IpBanListEntry;
+import org.bukkit.BanEntry;
 
 public class CraftIpBanList implements org.bukkit.ban.IpBanList {
-
     private final IpBanList list;
 
     public CraftIpBanList(IpBanList list) {
@@ -54,7 +50,7 @@
     }
 
     @Override
-    public @Nullable BanEntry<InetAddress> addBan(@NotNull InetAddress target, @Nullable String reason, @Nullable Date expires, @Nullable String source) {
+    public BanEntry<InetAddress> addBan(InetAddress target, String reason, Date expires, String source) {
         return this.addBan(this.getIpFromAddress(target), reason, expires, source);
     }
 
@@ -112,15 +108,14 @@
     }
 
     @Override
-    public void pardon(InetAddress  target) {
+    public void pardon(InetAddress target) {
         this.pardon(getIpFromAddress(target));
     }
 
-    private String getIpFromAddress(InetAddress  address) {
+    private String getIpFromAddress(InetAddress address) {
         if (address == null) {
             return null;
         }
-
         return InetAddresses.toAddrString(address);
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanEntry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanEntry.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanEntry.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanEntry.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanEntry.java	(date 1703956060000)
@@ -1,15 +1,15 @@
 package org.bukkit.craftbukkit.v1_20_R3.ban;
 
 import com.mojang.authlib.GameProfile;
+import java.time.Instant;
+import java.util.Date;
 import net.minecraft.server.players.UserBanList;
 import net.minecraft.server.players.UserBanListEntry;
+import org.bukkit.BanEntry;
 import org.bukkit.craftbukkit.v1_20_R3.profile.CraftPlayerProfile;
 import org.bukkit.profile.PlayerProfile;
 
-import java.time.Instant;
-import java.util.Date;
-
-public final class CraftProfileBanEntry implements org.bukkit.BanEntry<PlayerProfile> {
+public final class CraftProfileBanEntry implements BanEntry<PlayerProfile> {
     private static final Date minorDate = Date.from(Instant.parse("1899-12-31T04:00:00Z"));
     private final UserBanList list;
     private final GameProfile profile;
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanList.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanList.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanList.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/ban/CraftProfileBanList.java	(date 1703956060000)
@@ -2,8 +2,13 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.authlib.GameProfile;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Date;
+import java.util.Set;
+import java.util.UUID;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.players.UserBanList;
 import net.minecraft.server.players.UserBanListEntry;
 import org.bukkit.BanEntry;
@@ -11,14 +16,7 @@
 import org.bukkit.craftbukkit.v1_20_R3.profile.CraftPlayerProfile;
 import org.bukkit.profile.PlayerProfile;
 
-import java.time.Duration;
-import java.time.Instant;
-import java.util.Date;
-import java.util.Set;
-import java.util.UUID;
-
 public class CraftProfileBanList implements ProfileBanList {
-
     private final UserBanList list;
 
     public CraftProfileBanList(UserBanList list) {
@@ -163,10 +161,10 @@
     }
 
     static GameProfile getProfileByUUID(UUID uuid) {
-        return (BukkitExtraConstants.getServer() != null) ? BukkitExtraConstants.getServer().getProfileCache().get(uuid).orElse(null) : null;
+        return (MinecraftServer.getServer() != null) ? MinecraftServer.getServer().getProfileCache().get(uuid).orElse(null) : null;
     }
 
     static GameProfile getProfileByName(String name) {
-        return (BukkitExtraConstants.getServer() != null) ? BukkitExtraConstants.getServer().getProfileCache().get(name).orElse(null) : null;
+        return (MinecraftServer.getServer() != null) ? MinecraftServer.getServer().getProfileCache().get(name).orElse(null) : null;
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapCanvas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapCanvas.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapCanvas.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapCanvas.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/map/CraftMapCanvas.java	(date 1703956060000)
@@ -1,15 +1,15 @@
 package org.bukkit.craftbukkit.v1_20_R3.map;
 
 import com.google.common.base.Preconditions;
+import java.awt.Color;
+import java.awt.Image;
+import java.util.Arrays;
 import org.bukkit.map.MapCanvas;
 import org.bukkit.map.MapCursorCollection;
 import org.bukkit.map.MapFont;
 import org.bukkit.map.MapFont.CharacterSprite;
 import org.bukkit.map.MapPalette;
 
-import java.awt.*;
-import java.util.Arrays;
-
 public class CraftMapCanvas implements MapCanvas {
 
     private final byte[] buffer = new byte[128 * 128];
@@ -120,7 +120,6 @@
                     continue;
                 } catch (NumberFormatException ex) {
                 }
-                throw new IllegalArgumentException("Text contains unterminated color string");
             }
 
             CharacterSprite sprite = font.getChar(text.charAt(i));
Index: src/main/java/org/bukkit/entity/Sheep.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Sheep.java b/src/main/java/org/bukkit/entity/Sheep.java
--- a/src/main/java/org/bukkit/entity/Sheep.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Sheep.java	(date 1703956060000)
@@ -5,7 +5,7 @@
 /**
  * Represents a Sheep.
  */
-public interface Sheep extends Animals, Colorable , io.papermc.paper.entity.Shearable { // Paper
+public interface Sheep extends Animals, Colorable {
 
     /**
      * @return Whether the sheep is sheared.
Index: src/main/java/org/bukkit/entity/AnimalTamer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/AnimalTamer.java b/src/main/java/org/bukkit/entity/AnimalTamer.java
--- a/src/main/java/org/bukkit/entity/AnimalTamer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/AnimalTamer.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.entity;
 
+import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.UUID;
-
 public interface AnimalTamer {
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftServer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftServer.java	(date 1704528567000)
@@ -18,6 +18,7 @@
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -31,7 +32,9 @@
 import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.NbtException;
 import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.ReportedNbtException;
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.RegistryOps;
 import net.minecraft.resources.ResourceKey;
@@ -41,6 +44,7 @@
 import net.minecraft.server.ServerScoreboard;
 import net.minecraft.server.WorldLoader;
 import net.minecraft.server.bossevents.CustomBossEvent;
+import net.minecraft.server.commands.data.StorageDataAccessor;
 import net.minecraft.server.dedicated.DedicatedPlayerList;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
@@ -83,6 +87,7 @@
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
+import net.minecraft.world.level.storage.LevelDataAndDimensions;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.PlayerDataStorage;
 import net.minecraft.world.level.storage.PrimaryLevelData;
@@ -1083,17 +1088,53 @@
             throw new RuntimeException(ex);
         }
 
+        Dynamic<?> dynamic;
+        if (worldSession.hasWorldData()) {
+            net.minecraft.world.level.storage.LevelSummary worldinfo;
+
+            try {
+                dynamic = worldSession.getDataTag();
+                worldinfo = worldSession.getSummary(dynamic);
+            } catch (NbtException | ReportedNbtException | IOException ioexception) {
+                LevelStorageSource.LevelDirectory convertable_b = worldSession.getLevelDirectory();
+
+                MinecraftServer.LOGGER.warn("Failed to load world data from {}", convertable_b.dataFile(), ioexception);
+                MinecraftServer.LOGGER.info("Attempting to use fallback");
+
+                try {
+                    dynamic = worldSession.getDataTagFallback();
+                    worldinfo = worldSession.getSummary(dynamic);
+                } catch (NbtException | ReportedNbtException | IOException ioexception1) {
+                    MinecraftServer.LOGGER.error("Failed to load world data from {}", convertable_b.oldDataFile(), ioexception1);
+                    MinecraftServer.LOGGER.error("Failed to load world data from {} and {}. World files may be corrupted. Shutting down.", convertable_b.dataFile(), convertable_b.oldDataFile());
+                    return null;
+                }
+
+                worldSession.restoreLevelDataFromOld();
+            }
+
+            if (worldinfo.requiresManualConversion()) {
+                MinecraftServer.LOGGER.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
+                return null;
+            }
+
+            if (!worldinfo.isCompatible()) {
+                MinecraftServer.LOGGER.info("This world was created by an incompatible version.");
+                return null;
+            }
+        } else {
+            dynamic = null;
+        }
+
         boolean hardcore = creator.hardcore();
 
         PrimaryLevelData worlddata;
         WorldLoader.DataLoadContext worldloader_a = console.bridge$worldLoader();
         Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
-        DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) worldloader_a.datapackWorldgen());
-        Pair<WorldData, WorldDimensions.Complete> pair = worldSession.getDataTag(dynamicops, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen().allRegistriesLifecycle());
-
-        if (pair != null) {
-            worlddata = (PrimaryLevelData) pair.getFirst();
-            iregistry = pair.getSecond().dimensions();
+        if (dynamic != null) {
+            LevelDataAndDimensions leveldataanddimensions = LevelStorageSource.getLevelDataAndDimensions(dynamic, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen());
+            worlddata = (PrimaryLevelData) leveldataanddimensions.worldData();
+            iregistry = leveldataanddimensions.dimensions().dimensions();
         } else {
             LevelSettings worldsettings;
             WorldOptions worldoptions = new WorldOptions(creator.seed(), creator.generateStructures(), false);
Index: src/main/java/org/bukkit/entity/Arrow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Arrow.java b/src/main/java/org/bukkit/entity/Arrow.java
--- a/src/main/java/org/bukkit/entity/Arrow.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Arrow.java	(date 1703956060000)
@@ -1,14 +1,14 @@
 package org.bukkit.entity;
 
+import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.bukkit.potion.PotionType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 public interface Arrow extends AbstractArrow {
 
     /**
@@ -26,6 +26,21 @@
     @NotNull
     PotionData getBasePotionData();
 
+    /**
+     * Sets the underlying potion type
+     *
+     * @param type PotionType to set the base potion state to
+     */
+    void setBasePotionType(@NotNull PotionType type);
+
+    /**
+     * Returns the potion type about the base potion
+     *
+     * @return a PotionType object
+     */
+    @NotNull
+    PotionType getBasePotionType();
+
     /**
      * Gets the color of this arrow.
      *
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSound.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSound.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSound.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSound.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSound.java	(date 1703956060000)
@@ -1,8 +1,8 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.google.common.base.Preconditions;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.resources.ResourceLocation;
+import net.minecraft.core.Holder;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.sounds.SoundEvent;
 import org.bukkit.Registry;
 import org.bukkit.Sound;
@@ -10,21 +10,34 @@
 
 public class CraftSound {
 
-    public static SoundEvent getSoundEffect(String s) {
-        SoundEvent effect = BuiltInRegistries.SOUND_EVENT.get(new ResourceLocation(s));
-        Preconditions.checkArgument(effect != null, "Sound effect %s does not exist", s);
+    public static Sound minecraftToBukkit(SoundEvent minecraft) {
+        Preconditions.checkArgument(minecraft != null);
+
+        net.minecraft.core.Registry<SoundEvent> registry = CraftRegistry.getMinecraftRegistry(Registries.SOUND_EVENT);
+        Sound bukkit = Registry.SOUNDS.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+
+        Preconditions.checkArgument(bukkit != null);
+
+        return bukkit;
+    }
 
-        return effect;
+    public static SoundEvent bukkitToMinecraft(Sound bukkit) {
+        Preconditions.checkArgument(bukkit != null);
+
+        return CraftRegistry.getMinecraftRegistry(Registries.SOUND_EVENT)
+                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
     }
 
-    public static SoundEvent getSoundEffect(Sound s) {
-        SoundEvent effect = BuiltInRegistries.SOUND_EVENT.get(CraftNamespacedKey.toMinecraft(s.getKey()));
-        Preconditions.checkArgument(effect != null, "Sound effect %s does not exist", s);
+    public static Holder<SoundEvent> bukkitToMinecraftHolder(Sound bukkit) {
+        Preconditions.checkArgument(bukkit != null);
 
-        return effect;
-    }
+        net.minecraft.core.Registry<SoundEvent> registry = CraftRegistry.getMinecraftRegistry(Registries.SOUND_EVENT);
+
+        if (registry.wrapAsHolder(bukkitToMinecraft(bukkit)) instanceof Holder.Reference<SoundEvent> holder) {
+            return holder;
+        }
 
-    public static Sound getBukkit(SoundEvent soundEffect) {
-        return Registry.SOUNDS.get(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.SOUND_EVENT.getKey(soundEffect)));
+        throw new IllegalArgumentException("No Reference holder found for " + bukkit
+                + ", this can happen if a plugin creates its own sound effect with out properly registering it.");
     }
 }
Index: src/main/java/org/bukkit/entity/Villager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
--- a/src/main/java/org/bukkit/entity/Villager.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Villager.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.entity;
 
+import java.util.Locale;
 import org.bukkit.Keyed;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Locale;
-
 /**
  * Represents a villager NPC
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSoundGroup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSoundGroup.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSoundGroup.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSoundGroup.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftSoundGroup.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
+import java.util.HashMap;
 import net.minecraft.world.level.block.SoundType;
 import org.bukkit.Sound;
 import org.bukkit.SoundGroup;
 
-import java.util.HashMap;
-
 public class CraftSoundGroup implements SoundGroup {
 
     private final SoundType handle;
@@ -35,26 +34,26 @@
 
     @Override
     public Sound getBreakSound() {
-        return CraftSound.getBukkit(getHandle().getBreakSound());
+        return CraftSound.minecraftToBukkit(getHandle().getBreakSound());
     }
 
     @Override
     public Sound getStepSound() {
-        return CraftSound.getBukkit(getHandle().getStepSound());
+        return CraftSound.minecraftToBukkit(getHandle().getStepSound());
     }
 
     @Override
     public Sound getPlaceSound() {
-        return CraftSound.getBukkit(getHandle().getPlaceSound());
+        return CraftSound.minecraftToBukkit(getHandle().getPlaceSound());
     }
 
     @Override
     public Sound getHitSound() {
-        return CraftSound.getBukkit(getHandle().getHitSound());
+        return CraftSound.minecraftToBukkit(getHandle().getHitSound());
     }
 
     @Override
     public Sound getFallSound() {
-        return CraftSound.getBukkit(getHandle().getFallSound());
+        return CraftSound.minecraftToBukkit(getHandle().getFallSound());
     }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftStatistic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftStatistic.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftStatistic.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftStatistic.java	(date 1703956060000)
@@ -7,12 +7,15 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.stats.ServerStatsCounter;
 import net.minecraft.stats.Stats;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import org.bukkit.Material;
 import org.bukkit.Statistic;
 import org.bukkit.Statistic.Type;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntityType;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.entity.EntityType;
 
 public enum CraftStatistic {
@@ -143,22 +146,22 @@
     public static net.minecraft.stats.Stat getMaterialStatistic(org.bukkit.Statistic stat, Material material) {
         try {
             if (stat == Statistic.MINE_BLOCK) {
-                return Stats.BLOCK_MINED.get(CraftMagicNumbers.getBlock(material));
+                return Stats.BLOCK_MINED.get(CraftBlockType.bukkitToMinecraft(material));
             }
             if (stat == Statistic.CRAFT_ITEM) {
-                return Stats.ITEM_CRAFTED.get(CraftMagicNumbers.getItem(material));
+                return Stats.ITEM_CRAFTED.get(CraftItemType.bukkitToMinecraft(material));
             }
             if (stat == Statistic.USE_ITEM) {
-                return Stats.ITEM_USED.get(CraftMagicNumbers.getItem(material));
+                return Stats.ITEM_USED.get(CraftItemType.bukkitToMinecraft(material));
             }
             if (stat == Statistic.BREAK_ITEM) {
-                return Stats.ITEM_BROKEN.get(CraftMagicNumbers.getItem(material));
+                return Stats.ITEM_BROKEN.get(CraftItemType.bukkitToMinecraft(material));
             }
             if (stat == Statistic.PICKUP) {
-                return Stats.ITEM_PICKED_UP.get(CraftMagicNumbers.getItem(material));
+                return Stats.ITEM_PICKED_UP.get(CraftItemType.bukkitToMinecraft(material));
             }
             if (stat == Statistic.DROP) {
-                return Stats.ITEM_DROPPED.get(CraftMagicNumbers.getItem(material));
+                return Stats.ITEM_DROPPED.get(CraftItemType.bukkitToMinecraft(material));
             }
         } catch (ArrayIndexOutOfBoundsException e) {
             return null;
@@ -169,7 +172,7 @@
     public static net.minecraft.stats.Stat getEntityStatistic(org.bukkit.Statistic stat, EntityType entity) {
         Preconditions.checkArgument(entity != null, "EntityType cannot be null");
         if (entity.getName() != null) {
-            net.minecraft.world.entity.EntityType<?> nmsEntity = BuiltInRegistries.ENTITY_TYPE.get(new ResourceLocation(entity.getName()));
+            net.minecraft.world.entity.EntityType<?> nmsEntity = CraftEntityType.bukkitToMinecraft(entity);
 
             if (stat == org.bukkit.Statistic.KILL_ENTITY) {
                 return net.minecraft.stats.Stats.ENTITY_KILLED.get(nmsEntity);
@@ -183,26 +186,25 @@
 
     public static EntityType getEntityTypeFromStatistic(net.minecraft.stats.Stat<net.minecraft.world.entity.EntityType<?>> statistic) {
         Preconditions.checkArgument(statistic != null, "NMS Statistic cannot be null");
-        ResourceLocation name = net.minecraft.world.entity.EntityType.getKey(statistic.getValue());
-        return EntityType.fromName(name.getPath());
+        return CraftEntityType.minecraftToBukkit(statistic.getValue());
     }
 
     public static Material getMaterialFromStatistic(net.minecraft.stats.Stat<?> statistic) {
         if (statistic.getValue() instanceof Item statisticItemValue) {
-            return CraftMagicNumbers.getMaterial(statisticItemValue);
+            return CraftItemType.minecraftToBukkit(statisticItemValue);
         }
         if (statistic.getValue() instanceof Block statisticBlockValue) {
-            return CraftMagicNumbers.getMaterial(statisticBlockValue);
+            return CraftBlockType.minecraftToBukkit(statisticBlockValue);
         }
         return null;
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic) {
-        incrementStatistic(manager, statistic, 1);
+    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, Player player) {
+        incrementStatistic(manager, statistic, 1, player);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic) {
-        decrementStatistic(manager, statistic, 1);
+    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, Player player) {
+        decrementStatistic(manager, statistic, 1, player);
     }
 
     public static int getStatistic(ServerStatsCounter manager, Statistic statistic) {
@@ -211,17 +213,17 @@
         return manager.getValue(CraftStatistic.getNMSStatistic(statistic));
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, int amount) {
+    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, int amount, Player player) {
         Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
-        setStatistic(manager, statistic, getStatistic(manager, statistic) + amount);
+        setStatistic(manager, statistic, getStatistic(manager, statistic) + amount, player);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, int amount) {
+    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, int amount, Player player) {
         Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
-        setStatistic(manager, statistic, getStatistic(manager, statistic) - amount);
+        setStatistic(manager, statistic, getStatistic(manager, statistic) - amount, player);
     }
 
-    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, int newValue) {
+    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, int newValue, Player player) {
         Preconditions.checkArgument(statistic != null, "Statistic cannot be null");
         Preconditions.checkArgument(statistic.getType() == Type.UNTYPED, "Must supply additional parameter for this statistic");
         Preconditions.checkArgument(newValue >= 0, "Value must be greater than or equal to 0");
@@ -229,12 +231,12 @@
         manager.setValue(null, nmsStatistic, newValue);;
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material) {
-        incrementStatistic(manager, statistic, material, 1);
+    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, Player player) {
+        incrementStatistic(manager, statistic, material, 1, player);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material) {
-        decrementStatistic(manager, statistic, material, 1);
+    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, Player player) {
+        decrementStatistic(manager, statistic, material, 1, player);
     }
 
     public static int getStatistic(ServerStatsCounter manager, Statistic statistic, Material material) {
@@ -246,17 +248,17 @@
         return manager.getValue(nmsStatistic);
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int amount) {
+    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int amount, Player player) {
         Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
-        setStatistic(manager, statistic, material, getStatistic(manager, statistic, material) + amount);
+        setStatistic(manager, statistic, material, getStatistic(manager, statistic, material) + amount, player);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int amount) {
+    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int amount, Player player) {
         Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
-        setStatistic(manager, statistic, material, getStatistic(manager, statistic, material) - amount);
+        setStatistic(manager, statistic, material, getStatistic(manager, statistic, material) - amount, player);
     }
 
-    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int newValue) {
+    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int newValue, Player player) {
         Preconditions.checkArgument(statistic != null, "Statistic cannot be null");
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(newValue >= 0, "Value must be greater than or equal to 0");
@@ -264,14 +266,21 @@
         net.minecraft.stats.Stat nmsStatistic = CraftStatistic.getMaterialStatistic(statistic, material);
         Preconditions.checkArgument(nmsStatistic != null, "The supplied Material %s does not have a corresponding statistic", material);
         manager.setValue(null, nmsStatistic, newValue);
+
+        // Update scoreboards
+        if (player != null) {
+            player.level().getCraftServer().getScoreboardManager().forAllObjectives(nmsStatistic, player, score -> {
+                score.set(newValue);
+            });
+        }
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType) {
-        incrementStatistic(manager, statistic, entityType, 1);
+    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, Player player) {
+        incrementStatistic(manager, statistic, entityType, 1, player);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType) {
-        decrementStatistic(manager, statistic, entityType, 1);
+    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, Player player) {
+        decrementStatistic(manager, statistic, entityType, 1, player);
     }
 
     public static int getStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType) {
@@ -283,17 +292,17 @@
         return manager.getValue(nmsStatistic);
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int amount) {
+    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int amount, Player player) {
         Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
-        setStatistic(manager, statistic, entityType, getStatistic(manager, statistic, entityType) + amount);
+        setStatistic(manager, statistic, entityType, getStatistic(manager, statistic, entityType) + amount, player);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int amount) {
+    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int amount, Player player) {
         Preconditions.checkArgument(amount > 0, "Amount must be greater than 0");
-        setStatistic(manager, statistic, entityType, getStatistic(manager, statistic, entityType) - amount);
+        setStatistic(manager, statistic, entityType, getStatistic(manager, statistic, entityType) - amount, player);
     }
 
-    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int newValue) {
+    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int newValue, Player player) {
         Preconditions.checkArgument(statistic != null, "Statistic cannot be null");
         Preconditions.checkArgument(entityType != null, "EntityType cannot be null");
         Preconditions.checkArgument(newValue >= 0, "Value must be greater than or equal to 0");
@@ -301,5 +310,12 @@
         net.minecraft.stats.Stat nmsStatistic = CraftStatistic.getEntityStatistic(statistic, entityType);
         Preconditions.checkArgument(nmsStatistic != null, "The supplied EntityType %s does not have a corresponding statistic", entityType);
         manager.setValue(null, nmsStatistic, newValue);
+
+        // Update scoreboards
+        if (player != null) {
+            player.level().getCraftServer().getScoreboardManager().forAllObjectives(nmsStatistic, player, score -> {
+                score.set(newValue);
+            });
+        }
     }
 }
Index: src/main/java/org/bukkit/entity/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Item.java b/src/main/java/org/bukkit/entity/Item.java
--- a/src/main/java/org/bukkit/entity/Item.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Item.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.entity;
 
+import java.util.UUID;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.UUID;
-
 /**
  * Represents a dropped item.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorld.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorld.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorld.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorld.java	(date 1703956060000)
@@ -4,15 +4,29 @@
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Random;
+import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.ExecutionException;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderSet;
-import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
@@ -29,7 +43,6 @@
 import net.minecraft.server.level.Ticket;
 import net.minecraft.server.level.TicketType;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.SortedArraySet;
 import net.minecraft.util.Unit;
 import net.minecraft.world.entity.LightningBolt;
@@ -39,12 +52,14 @@
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.biome.Climate;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import net.minecraft.world.phys.shapes.CollisionContext;
 import org.bukkit.BlockChangeDelegate;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
@@ -54,8 +69,10 @@
 import org.bukkit.FeatureFlag;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.GameRule;
+import org.bukkit.Instrument;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
+import org.bukkit.Note;
 import org.bukkit.Particle;
 import org.bukkit.Raid;
 import org.bukkit.Sound;
@@ -67,20 +84,21 @@
 import org.bukkit.block.BlockState;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.boss.DragonBattle;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBiome;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockState;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.v1_20_R3.boss.CraftDragonBattle;
 import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntity;
 import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer;
-import org.bukkit.craftbukkit.v1_20_R3.generator.strucutre.CraftStructure;
+import org.bukkit.craftbukkit.v1_20_R3.generator.structure.CraftStructure;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.v1_20_R3.metadata.BlockMetadataStore;
 import org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataContainer;
 import org.bukkit.craftbukkit.v1_20_R3.persistence.CraftPersistentDataTypeRegistry;
-import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftBiomeSearchResult;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftRayTraceResult;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftSpawnCategory;
@@ -112,31 +130,13 @@
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
+import org.bukkit.util.BiomeSearchResult;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.StructureSearchResult;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.ExecutionException;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-import java.util.stream.Collectors;
 
 public class CraftWorld extends CraftRegionAccessor implements World {
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
@@ -165,7 +165,7 @@
 
     @Override
     public Block getBlockAt(int x, int y, int z) {
-        return CraftBlock.at(world, BlockPos.containing(x, y, z));
+        return CraftBlock.at(world, new BlockPos(x, y, z));
     }
 
     @Override
@@ -269,7 +269,7 @@
     @Override
     public boolean unloadChunkRequest(int x, int z) {
         if (isChunkLoaded(x, z)) {
-            world.getChunkSource().removeRegionTicket(BukkitExtraConstants.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
+            world.getChunkSource().removeRegionTicket(TicketType.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
         }
 
         return true;
@@ -350,7 +350,7 @@
         }
 
         if (chunk instanceof net.minecraft.world.level.chunk.LevelChunk) {
-            world.getChunkSource().addRegionTicket(BukkitExtraConstants.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
+            world.getChunkSource().addRegionTicket(TicketType.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
             return true;
         }
 
@@ -378,7 +378,7 @@
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
 
-        if (chunkDistanceManager.addRegionTicketAtDistance(BukkitExtraConstants.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin)) { // keep in-line with force loading, add at level 31
+        if (chunkDistanceManager.addRegionTicketAtDistance(TicketType.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin)) { // keep in-line with force loading, add at level 31
             this.getChunkAt(x, z); // ensure loaded
             return true;
         }
@@ -391,7 +391,7 @@
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
-        return chunkDistanceManager.removeRegionTicketAtDistance(BukkitExtraConstants.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin); // keep in-line with force loading, remove at level 31
+        return chunkDistanceManager.removeRegionTicketAtDistance(TicketType.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin); // keep in-line with force loading, remove at level 31
     }
 
     @Override
@@ -399,7 +399,7 @@
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
-        chunkDistanceManager.removeAllTicketsFor(BukkitExtraConstants.PLUGIN_TICKET, 31, plugin); // keep in-line with force loading, remove at level 31
+        chunkDistanceManager.removeAllTicketsFor(TicketType.PLUGIN_TICKET, 31, plugin); // keep in-line with force loading, remove at level 31
     }
 
     @Override
@@ -413,7 +413,7 @@
 
         ImmutableList.Builder<Plugin> ret = ImmutableList.builder();
         for (Ticket<?> ticket : tickets) {
-            if (ticket.getType() == BukkitExtraConstants.PLUGIN_TICKET) {
+            if (ticket.getType() == TicketType.PLUGIN_TICKET) {
                 ret.add((Plugin) ticket.key);
             }
         }
@@ -432,7 +432,7 @@
 
             Chunk chunk = null;
             for (Ticket<?> ticket : tickets) {
-                if (ticket.getType() != BukkitExtraConstants.PLUGIN_TICKET) {
+                if (ticket.getType() != TicketType.PLUGIN_TICKET) {
                     continue;
                 }
 
@@ -478,9 +478,10 @@
     }
 
     @Override
-    public org.bukkit.entity.Item dropItem(Location loc, ItemStack item, Consumer<Item> function) {
+    public org.bukkit.entity.Item dropItem(Location loc, ItemStack item, Consumer<? super org.bukkit.entity.Item> function) {
         Preconditions.checkArgument(loc != null, "Location cannot be null");
         Preconditions.checkArgument(item != null, "ItemStack cannot be null");
+
         ItemEntity entity = new ItemEntity(world, loc.getX(), loc.getY(), loc.getZ(), CraftItemStack.asNMSCopy(item));
         org.bukkit.entity.Item itemEntity = (org.bukkit.entity.Item) entity.getBukkitEntity();
         entity.pickupDelay = 10;
@@ -497,14 +498,13 @@
     }
 
     @Override
-    public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item, Consumer<org.bukkit.entity.Item> function) {
+    public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item, Consumer<? super Item> function) {
         Preconditions.checkArgument(loc != null, "Location cannot be null");
         Preconditions.checkArgument(item != null, "ItemStack cannot be null");
 
         double xs = (world.random.nextFloat() * 0.5F) + 0.25D;
         double ys = (world.random.nextFloat() * 0.5F) + 0.25D;
         double zs = (world.random.nextFloat() * 0.5F) + 0.25D;
-        loc = loc.clone();
         loc = loc.clone().add(xs, ys, zs);
         return dropItem(loc, item, function);
     }
@@ -523,7 +523,7 @@
         net.minecraft.world.entity.projectile.AbstractArrow arrow;
         if (TippedArrow.class.isAssignableFrom(clazz)) {
             arrow = net.minecraft.world.entity.EntityType.ARROW.create(world);
-            ((net.minecraft.world.entity.projectile.Arrow) arrow).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+            ((Arrow) arrow.getBukkitEntity()).setBasePotionType(PotionType.WATER);
         } else if (SpectralArrow.class.isAssignableFrom(clazz)) {
             arrow = net.minecraft.world.entity.EntityType.SPECTRAL_ARROW.create(world);
         } else if (Trident.class.isAssignableFrom(clazz)) {
@@ -545,6 +545,7 @@
 
     @Override
     public LightningStrike strikeLightningEffect(Location loc) {
+
         return strikeLightning0(loc, true);
     }
 
@@ -565,13 +566,13 @@
 
     @Override
     public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
-        world.banner$setCaptureTreeGeneration(true);
-        world.banner$setCaptureBlockStates(true);
+        world.captureTreeGeneration = true;
+        world.captureBlockStates = true;
         boolean grownTree = generateTree(loc, type);
-        world.banner$setCaptureTreeGeneration(false);
-        world.banner$setCaptureBlockStates(false);
+        world.captureTreeGeneration = false;
+        world.captureBlockStates = false;
         if (grownTree) { // Copy block data to delegate
-            for (BlockState blockstate : world.bridge$capturedBlockStates().values()) {
+            for (BlockState blockstate : world.capturedBlockStates.values()) {
                 BlockPos position = ((CraftBlockState) blockstate).getPosition();
                 net.minecraft.world.level.block.state.BlockState oldBlock = world.getBlockState(position);
                 int flag = ((CraftBlockState) blockstate).getFlag();
@@ -579,22 +580,23 @@
                 net.minecraft.world.level.block.state.BlockState newBlock = world.getBlockState(position);
                 world.notifyAndUpdatePhysics(position, null, oldBlock, newBlock, newBlock, flag, 512);
             }
-            world.bridge$capturedBlockStates().clear();
+            world.capturedBlockStates.clear();
             return true;
         } else {
-            world.bridge$capturedBlockStates().clear();
+            world.capturedBlockStates.clear();
             return false;
         }
     }
 
     @Override
     public String getName() {
-        return world.serverLevelData.getLevelName();
+        world.K.checkName(world.name);
+        return world.name;
     }
 
     @Override
     public UUID getUID() {
-        return world.bridge$uuid();
+        return world.uuid;
     }
 
     @Override
@@ -668,7 +670,7 @@
 
     @Override
     public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, Entity source) {
-        return !world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, breakBlocks ? Level.ExplosionInteraction.MOB : net.minecraft.world.level.Level.ExplosionInteraction.NONE).bridge$wasCanceled();
+        return !world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, breakBlocks ? Level.ExplosionInteraction.MOB : net.minecraft.world.level.Level.ExplosionInteraction.NONE).wasCanceled;
     }
 
     @Override
@@ -735,8 +737,9 @@
     }
 
     @Override
-    public int getHighestBlockYAt(Location location, org.bukkit.HeightMap heightMap) {
-        return getHighestBlockYAt(location.getBlockX(), location.getBlockZ(), heightMap);
+    public int getHighestBlockYAt(int x, int z, org.bukkit.HeightMap heightMap) {
+        // Transient load for this tick
+        return world.getChunk(x >> 4, z >> 4).getHeight(CraftHeightMap.toNMS(heightMap), x, z);
     }
 
     @Override
@@ -782,7 +785,7 @@
 
     @Override
     public double getTemperature(int x, int y, int z) {
-        BlockPos pos = BlockPos.containing(x, y, z);
+        BlockPos pos = new BlockPos(x, y, z);
         return this.world.getNoiseBiome(x >> 2, y >> 2, z >> 2).value().getTemperature(pos);
     }
 
@@ -793,7 +796,7 @@
 
     @Override
     public double getHumidity(int x, int y, int z) {
-        return this.world.getNoiseBiome(x >> 2, y >> 2, z >> 2).value().climateSettings.downfall(); // Mohsit Fix Forge coremod  #line-11
+        return this.world.getNoiseBiome(x >> 2, y >> 2, z >> 2).value().getModifiedClimateSettings().downfall(); // Mohsit Fix Forge coremod  #line-11
     }
 
     @Override
@@ -813,13 +816,18 @@
         getHandle().addFreshEntity(entity, reason);
     }
 
+    @Override
+    public void addEntityWithPassengers(net.minecraft.world.entity.Entity entity, SpawnReason reason) {
+        getHandle().tryAddFreshEntityWithPassengers(entity, reason);
+    }
+
     @Override
     public Collection<Entity> getNearbyEntities(Location location, double x, double y, double z) {
         return this.getNearbyEntities(location, x, y, z, null);
     }
 
     @Override
-    public Collection<Entity> getNearbyEntities(Location location, double x, double y, double z, Predicate<Entity> filter) {
+    public Collection<Entity> getNearbyEntities(Location location, double x, double y, double z, Predicate<? super Entity> filter) {
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(this.equals(location.getWorld()), "Location cannot be in a different world");
 
@@ -833,7 +841,7 @@
     }
 
     @Override
-    public Collection<Entity> getNearbyEntities(BoundingBox boundingBox, Predicate<Entity> filter) {
+    public Collection<Entity> getNearbyEntities(BoundingBox boundingBox, Predicate<? super Entity> filter) {
         Preconditions.checkArgument(boundingBox != null, "BoundingBox cannot be null");
 
         AABB bb = new AABB(boundingBox.getMinX(), boundingBox.getMinY(), boundingBox.getMinZ(), boundingBox.getMaxX(), boundingBox.getMaxY(), boundingBox.getMaxZ());
@@ -861,12 +869,12 @@
     }
 
     @Override
-    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance, Predicate<Entity> filter) {
+    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance, Predicate<? super Entity> filter) {
         return this.rayTraceEntities(start, direction, maxDistance, 0.0D, filter);
     }
 
     @Override
-    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance, double raySize, Predicate<Entity> filter) {
+    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance, double raySize, Predicate<? super Entity> filter) {
         Preconditions.checkArgument(start != null, "Location start cannot be null");
         Preconditions.checkArgument(this.equals(start.getWorld()), "Location start cannot be in a different world");
         start.checkFinite();
@@ -936,13 +944,13 @@
         Vector dir = direction.clone().normalize().multiply(maxDistance);
         Vec3 startPos = CraftLocation.toVec3D(start);
         Vec3 endPos = startPos.add(dir.getX(), dir.getY(), dir.getZ());
-        HitResult nmsHitResult = this.getHandle().clip(new ClipContext(startPos, endPos, ignorePassableBlocks ? ClipContext.Block.COLLIDER : ClipContext.Block.OUTLINE, CraftFluidCollisionMode.toNMS(fluidCollisionMode), null));
+        HitResult nmsHitResult = this.getHandle().clip(new ClipContext(startPos, endPos, ignorePassableBlocks ? ClipContext.Block.COLLIDER : ClipContext.Block.OUTLINE, CraftFluidCollisionMode.toNMS(fluidCollisionMode), CollisionContext.empty()));
 
         return CraftRayTraceResult.fromNMS(this, nmsHitResult);
     }
 
     @Override
-    public RayTraceResult rayTrace(Location start, Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, Predicate<Entity> filter) {
+    public RayTraceResult rayTrace(Location start, Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, Predicate<? super Entity> filter) {
         RayTraceResult blockHit = this.rayTraceBlocks(start, direction, maxDistance, fluidCollisionMode, ignorePassableBlocks);
         Vector startVec = null;
         double blockHitDistance = maxDistance;
@@ -986,6 +994,15 @@
         return list;
     }
 
+    // Paper start - getEntity by UUID API
+    @Override
+    public Entity getEntity(UUID uuid) {
+        Preconditions.checkArgument(uuid != null, "UUID cannot be null");
+        net.minecraft.world.entity.Entity entity = world.getEntity(uuid);
+        return entity == null ? null : entity.getBukkitEntity();
+    }
+    // Paper end
+
     @Override
     public void save() {
         this.server.checkSaveState();
@@ -1009,7 +1026,7 @@
 
     @Override
     public void setDifficulty(Difficulty difficulty) {
-        this.getHandle().bridge$serverLevelDataCB().setDifficulty(net.minecraft.world.Difficulty.byId(difficulty.getValue()));
+        this.getHandle().K.setDifficulty(net.minecraft.world.Difficulty.byId(difficulty.getValue()));
     }
 
     @Override
@@ -1017,6 +1034,16 @@
         return Difficulty.getByValue(this.getHandle().getDifficulty().ordinal());
     }
 
+    @Override
+    public int getViewDistance() {
+        return world.getChunkSource().chunkMap.serverViewDistance;
+    }
+
+    @Override
+    public int getSimulationDistance() {
+        return world.getChunkSource().chunkMap.getDistanceManager().simulationDistance;
+    }
+
     public BlockMetadataStore getBlockMetadata() {
         return blockMetadata;
     }
@@ -1087,12 +1114,12 @@
 
     @Override
     public boolean getPVP() {
-        return world.bridge$pvpMode();
+        return world.pvpMode;
     }
 
     @Override
     public void setPVP(boolean pvp) {
-        world.banner$setPvpMode(pvp);
+        world.pvpMode = pvp;
     }
 
     public void playEffect(Player player, Effect effect, int data) {
@@ -1156,7 +1183,7 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isBlock(), "Material.%s must be a block", material);
 
-        FallingBlockEntity entity = BukkitExtraConstants.fall(world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), CraftMagicNumbers.getBlock(material).defaultBlockState(), SpawnReason.CUSTOM);
+        FallingBlockEntity entity = FallingBlockEntity.fall(world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), CraftBlockType.bukkitToMinecraft(material).defaultBlockState(), SpawnReason.CUSTOM);
         return (FallingBlock) entity.getBukkitEntity();
     }
 
@@ -1165,7 +1192,7 @@
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(data != null, "BlockData cannot be null");
 
-        FallingBlockEntity entity = BukkitExtraConstants.fall(world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), ((CraftBlockData) data).getState(), SpawnReason.CUSTOM);
+        FallingBlockEntity entity = FallingBlockEntity.fall(world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), ((CraftBlockData) data).getState(), SpawnReason.CUSTOM);
         return (FallingBlock) entity.getBukkitEntity();
     }
 
@@ -1251,12 +1278,12 @@
 
     @Override
     public boolean getKeepSpawnInMemory() {
-        return world.bridge$KeepSpawnInMemory();
+        return world.keepSpawnInMemory;
     }
 
     @Override
     public void setKeepSpawnInMemory(boolean keepLoaded) {
-        world.banner$setKeepSpawnInMemory(keepLoaded);
+        world.keepSpawnInMemory = keepLoaded;
         // Grab the worlds spawn chunk
         BlockPos chunkcoordinates = this.world.getSharedSpawnPos();
         if (keepLoaded) {
@@ -1288,7 +1315,7 @@
 
     @Override
     public File getWorldFolder() {
-        return world.bridge$convertable().getDimensionPath(this.world.dimension()).toFile();
+        return world.convertable.getDimensionPath(this.world.dimension()).toFile();
     }
 
     @Override
@@ -1318,7 +1345,7 @@
 
     @Override
     public boolean canGenerateStructures() {
-        return world.bridge$serverLevelDataCB().worldGenOptions().generateStructures();
+        return world.K.worldGenOptions().generateStructures();
     }
 
     @Override
@@ -1328,7 +1355,7 @@
 
     @Override
     public void setHardcore(boolean hardcore) {
-        world.bridge$serverLevelDataCB().settings.hardcore = hardcore;
+        world.K.settings.hardcore = hardcore;
     }
 
     @Override
@@ -1408,7 +1435,7 @@
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        world.bridge$ticksPerSpawnCategory().put(spawnCategory, (long) ticksPerCategorySpawn);
+        world.ticksPerSpawnCategory.put(spawnCategory, (long) ticksPerCategorySpawn);
     }
 
     @Override
@@ -1416,7 +1443,7 @@
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        return world.bridge$ticksPerSpawnCategory().getLong(spawnCategory);
+        return world.ticksPerSpawnCategory.getLong(spawnCategory);
     }
 
     @Override
@@ -1531,6 +1558,11 @@
         spawnCategoryLimit.put(spawnCategory, limit);
     }
 
+    @Override
+    public void playNote(@NotNull Location loc, @NotNull Instrument instrument, @NotNull Note note) {
+        playSound(loc, instrument.getSound(), org.bukkit.SoundCategory.RECORDS, 3f, note.getPitch());
+    }
+
     @Override
     public void playSound(Location loc, Sound sound, float volume, float pitch) {
         playSound(loc, sound, org.bukkit.SoundCategory.MASTER, volume, pitch);
@@ -1543,17 +1575,27 @@
 
     @Override
     public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        playSound(loc, sound, category, volume, pitch, getHandle().random.nextLong());;
+    }
+
+    @Override
+    public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        playSound(loc, sound, category, volume, pitch, getHandle().random.nextLong());
+    }
+
+    @Override
+    public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
         if (loc == null || sound == null || category == null) return;
 
         double x = loc.getX();
         double y = loc.getY();
         double z = loc.getZ();
 
-        getHandle().playSound(null, x, y, z, CraftSound.getSoundEffect(sound), SoundSource.valueOf(category.name()), volume, pitch);
+        getHandle().playSeededSound(null, x, y, z, CraftSound.bukkitToMinecraft(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), volume, pitch, seed);
     }
 
     @Override
-    public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
         if (loc == null || sound == null || category == null) return;
 
         double x = loc.getX();
@@ -1576,21 +1618,31 @@
 
     @Override
     public void playSound(Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        playSound(entity, sound, category, volume, pitch, getHandle().random.nextLong());
+    }
+
+    @Override
+    public void playSound(Entity entity, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        playSound(entity, sound, category, volume, pitch, getHandle().random.nextLong());
+    }
+
+    @Override
+    public void playSound(Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
         if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null) return;
 
-        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect(sound)), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, getHandle().getRandom().nextLong());
-        ChunkMap.TrackedEntity entityTracker = getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
+        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(CraftSound.bukkitToMinecraftHolder(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, seed);
+        ChunkMap.TrackedEntity  entityTracker = getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
         if (entityTracker != null) {
             entityTracker.broadcastAndSend(packet);
         }
     }
 
     @Override
-    public void playSound(Entity entity, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(Entity entity, String sound, org.bukkit.SoundCategory category, float volume, float pitch, long seed) {
         if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null) return;
 
-        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, getHandle().getRandom().nextLong());
-        ChunkMap.TrackedEntity entityTracker = getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
+        ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, seed);
+        ChunkMap.TrackedEntity  entityTracker = getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
         if (entityTracker != null) {
             entityTracker.broadcastAndSend(packet);
         }
@@ -1683,6 +1735,7 @@
         Preconditions.checkArgument(rule != null, "GameRule cannot be null");
         Preconditions.checkArgument(newValue != null, "GameRule value cannot be null");
 
+
         if (!isGameRule(rule.getName())) return false;
 
         GameRules.Value<?> handle = getHandle().getGameRules().getRule(getGameRulesNMS().get(rule.getName()));
@@ -1781,11 +1834,14 @@
 
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
+        particle = CraftParticle.convertLegacy(particle);
+        data = CraftParticle.convertLegacy(data);
         if (data != null) {
             Preconditions.checkArgument(particle.getDataType().isInstance(data), "data (%s) should be %s", data.getClass(), particle.getDataType());
         }
+        // Mohist  TODO
         getHandle().sendParticles(
-                CraftParticle.toNMS(particle, data), // Particle
+                CraftParticle.createParticleParam(particle, data), // Particle
                 x, y, z, // Position
                 count,  // Count
                 offsetX, offsetY, offsetZ, // Random offset
@@ -1858,18 +1914,6 @@
         return locateNearestStructure(origin, List.of(structure), radius, findUnexplored);
     }
 
-    // Spigot start
-    @Override
-    public int getViewDistance() {
-        return world.bridge$spigotConfig().viewDistance;
-    }
-
-    @Override
-    public int getSimulationDistance() {
-        return world.bridge$spigotConfig().simulationDistance;
-    }
-    // Spigot end
-
     public StructureSearchResult locateNearestStructure(Location origin, List<Structure> structures, int radius, boolean findUnexplored) {
         BlockPos originPos = BlockPos.containing(origin.getX(), origin.getY(), origin.getZ());
         List<Holder<net.minecraft.world.level.levelgen.structure.Structure>> holders = new ArrayList<>();
@@ -1883,22 +1927,61 @@
             return null;
         }
 
-        return new CraftStructureSearchResult(CraftStructure.minecraftToBukkit(found.getSecond().value(), getHandle().registryAccess()), CraftLocation.toBukkit(found.getFirst(), this));
+        return new CraftStructureSearchResult(CraftStructure.minecraftToBukkit(found.getSecond().value()), CraftLocation.toBukkit(found.getFirst(), this));
     }
 
-    /**
-    // Spigot start
     @Override
-    public int getViewDistance() {
-        return world.bridge$spigotConfig().viewDistance;
+    public BiomeSearchResult locateNearestBiome(Location origin, int radius, Biome... biomes) {
+        return locateNearestBiome(origin, radius, 32, 64, biomes);
     }
 
     @Override
-    public int getSimulationDistance() {
-        return world.bridge$spigotConfig().simulationDistance;
+    public BiomeSearchResult locateNearestBiome(Location origin, int radius, int horizontalInterval, int verticalInterval, Biome... biomes) {
+        BlockPos originPos = BlockPos.containing(origin.getX(), origin.getY(), origin.getZ());
+        Set<Holder<net.minecraft.world.level.biome.Biome>> holders = new HashSet<>();
+
+        for (Biome biome : biomes) {
+            holders.add(CraftBiome.bukkitToMinecraftHolder(biome));
+        }
+
+        Climate.Sampler sampler = getHandle().getChunkSource().randomState().sampler();
+        // The given predicate is evaluated once at the start of the search, so performance isn't a large concern.
+        Pair<BlockPos, Holder<net.minecraft.world.level.biome.Biome>> found = getHandle().getChunkSource().getGenerator().getBiomeSource().findClosestBiome3d(originPos, radius, horizontalInterval, verticalInterval, holders::contains, sampler, getHandle());
+        if (found == null) {
+            return null;
+        }
+
+        return new CraftBiomeSearchResult(CraftBiome.minecraftHolderToBukkit(found.getSecond()), new Location(this, found.getFirst().getX(), found.getFirst().getY(), found.getFirst().getZ()));
+    }
+
+    // Mohist start
+    private boolean isbukkit = false;
+    @Override
+    public boolean isBukkit() {
+        return isbukkit;
     }
-    // Spigot end
-    */
+
+    @Override
+    public void setBukkit(boolean b) {
+        isbukkit = b;
+    }
+
+    @Override
+    public boolean isMods() {
+        String path = getWorldFolder().getAbsolutePath().replaceAll("\\\\", "/");
+        return !isBukkit() && path.contains("/world/dimensions/");
+    }
+
+    @Override
+    public String getModid() {
+        String path = getWorldFolder().getAbsolutePath().replaceAll("\\\\", "/");
+        String modName = "";
+        if(path.contains("/world/dimensions/")) {
+            modName = path.split("/world/dimensions/")[1].split("/")[0];
+        }
+        return modName;
+    }
+    // Mohist end
 
     // Spigot start
     private final Spigot spigot = new Spigot() {
@@ -1907,7 +1990,7 @@
         public LightningStrike strikeLightning(Location loc, boolean isSilent) {
             LightningBolt lightning = net.minecraft.world.entity.EntityType.LIGHTNING_BOLT.create(world);
             lightning.moveTo(loc.getX(), loc.getY(), loc.getZ());
-            lightning.banner$setIsSilent(isSilent);
+            lightning.isSilent = isSilent;
             world.strikeLightning(lightning, LightningStrikeEvent.Cause.CUSTOM );
             return (LightningStrike) lightning.getBukkitEntity();
         }
@@ -1917,7 +2000,7 @@
             LightningBolt lightning = net.minecraft.world.entity.EntityType.LIGHTNING_BOLT.create(world);
             lightning.moveTo(loc.getX(), loc.getY(), loc.getZ());
             lightning.visualOnly = true;
-            lightning.banner$setIsSilent(isSilent);
+            lightning.isSilent = isSilent;
             world.strikeLightning( lightning, LightningStrikeEvent.Cause.CUSTOM );
             return (LightningStrike) lightning.getBukkitEntity();
         }
@@ -1971,10 +2054,4 @@
             this.persistentDataContainer.putAll((CompoundTag) c);
         }
     }
-
-
-    @Override
-    public boolean generateTree(@NotNull Location location, @NotNull Random random, @NotNull TreeType type, @Nullable Predicate<BlockState> statePredicate) {
-        return false;
-    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorldBorder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorldBorder.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorldBorder.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorldBorder.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftWorldBorder.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.google.common.base.Preconditions;
+import java.util.concurrent.TimeUnit;
 import net.minecraft.core.BlockPos;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.WorldBorder;
 
-import java.util.concurrent.TimeUnit;
-
 public class CraftWorldBorder implements WorldBorder {
 
     private final World world;
Index: src/main/java/org/bukkit/entity/Snowman.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Snowman.java b/src/main/java/org/bukkit/entity/Snowman.java
--- a/src/main/java/org/bukkit/entity/Snowman.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Snowman.java	(date 1703956060000)
@@ -1,11 +1,9 @@
 package org.bukkit.entity;
 
-import org.bukkit.Sound;
-
 /**
  * Represents a snowman entity
  */
-public interface Snowman extends Golem, io.papermc.paper.entity.Shearable { // Paper
+public interface Snowman extends Golem {
 
     /**
      * Gets whether this snowman is in "derp mode", meaning it is not wearing a
@@ -23,11 +21,4 @@
      * @param derpMode True to remove the pumpkin, false to add a pumpkin
      */
     void setDerp(boolean derpMode);
-
-    // Banner start - since we do not use kyori so override it
-    @Override
-    default void shear() {
-        this.shear(Sound.ENTITY_SNOW_GOLEM_SHEAR);
-    }
-    // Banner end
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftLootTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftLootTable.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftLootTable.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftLootTable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftLootTable.java	(date 1703956060000)
@@ -1,11 +1,13 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.Container;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.level.storage.loot.LootParams;
 import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSet;
@@ -22,11 +24,6 @@
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.loot.LootContext;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Random;
-
 public class CraftLootTable implements org.bukkit.loot.LootTable {
 
     private final LootTable handle;
@@ -44,7 +41,7 @@
     @Override
     public Collection<ItemStack> populateLoot(Random random, LootContext context) {
         Preconditions.checkArgument(context != null, "LootContext cannot be null");
-        LootParams nmsContext = convertContext(context, random);
+        net.minecraft.world.level.storage.loot.LootParams nmsContext = convertContext(context, random);
         List<net.minecraft.world.item.ItemStack> nmsItems = handle.getRandomItems(nmsContext);
         Collection<ItemStack> bukkit = new ArrayList<>(nmsItems.size());
 
@@ -67,7 +64,7 @@
         Container handle = craftInventory.getInventory();
 
         // TODO: When events are added, call event here w/ custom reason?
-        getHandle().fillInventory(handle, nmsContext, random.nextLong(), true);
+        getHandle().fillInventory(handle, nmsContext,random.nextLong(), true);
     }
 
     @Override
@@ -80,9 +77,10 @@
         Location loc = context.getLocation();
         Preconditions.checkArgument(loc.getWorld() != null, "LootContext.getLocation#getWorld cannot be null");
         ServerLevel handle = ((CraftWorld) loc.getWorld()).getHandle();
+
         net.minecraft.world.level.storage.loot.LootParams.Builder builder = new net.minecraft.world.level.storage.loot.LootParams.Builder(handle);
         if (random != null) {
-           // builder = builder.withRandom(new RandomSourceWrapper(random)); // Banner TODO
+            // builder = builder.withRandom(new RandomSourceWrapper(random));
         }
         setMaybe(builder, LootContextParams.ORIGIN, CraftLocation.toVec3D(loc));
         if (getHandle() != LootTable.EMPTY) {
@@ -106,7 +104,7 @@
 
             // SPIGOT-5603 - Use LootContext#lootingModifier
             if (context.getLootingModifier() != LootContext.DEFAULT_LOOT_MODIFIER) {
-                setMaybe(builder, BukkitExtraConstants.LOOTING_MOD, context.getLootingModifier());
+                setMaybe(builder, LootContextParams.LOOTING_MOD, context.getLootingModifier());
             }
         }
 
@@ -120,7 +118,7 @@
                 nmsBuilder.optional(param);
             }
         }
-        nmsBuilder.optional(BukkitExtraConstants.LOOTING_MOD);
+        nmsBuilder.optional(LootContextParams.LOOTING_MOD);
 
         return builder.create(getHandle().getParamSet());
     }
@@ -150,8 +148,8 @@
             contextBuilder.lootedEntity(info.getParamOrNull(LootContextParams.THIS_ENTITY).getBukkitEntity());
         }
 
-        if (info.hasParam(BukkitExtraConstants.LOOTING_MOD)) {
-            contextBuilder.lootingModifier(info.getParamOrNull(BukkitExtraConstants.LOOTING_MOD));
+        if (info.hasParam(LootContextParams.LOOTING_MOD)) {
+            contextBuilder.lootingModifier(info.getParamOrNull(LootContextParams.LOOTING_MOD));
         }
 
         contextBuilder.luck(info.getLuck());
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftMusicInstrument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftMusicInstrument.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftMusicInstrument.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftMusicInstrument.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftMusicInstrument.java	(date 1703956060000)
@@ -68,4 +68,4 @@
     public String toString() {
         return "CraftMusicInstrument{key=" + key + "}";
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftOfflinePlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftOfflinePlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftOfflinePlayer.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftOfflinePlayer.java	(date 1703956060000)
@@ -1,6 +1,14 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Date;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
@@ -26,15 +34,6 @@
 import org.bukkit.plugin.Plugin;
 import org.bukkit.profile.PlayerProfile;
 
-import java.io.File;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.Date;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable {
     private final GameProfile profile;
@@ -61,7 +60,7 @@
         }
 
         // This might not match lastKnownName but if not it should be more correct
-        if (profile.getName() != null) {
+        if (!profile.getName().isEmpty()) {
             return profile.getName();
         }
 
@@ -216,7 +215,7 @@
     }
 
     private File getDataFile() {
-        return new File(storage.getPlayerDir(), getUniqueId() + ".dat");
+        return new File(storage.getPlayerDataFolder(), getUniqueId() + ".dat");
     }
 
     @Override
@@ -311,7 +310,7 @@
             getPlayer().incrementStatistic(statistic);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.incrementStatistic(manager, statistic);
+            CraftStatistic.incrementStatistic(manager, statistic, null);
             manager.save();
         }
     }
@@ -322,7 +321,7 @@
             getPlayer().decrementStatistic(statistic);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.decrementStatistic(manager, statistic);
+            CraftStatistic.decrementStatistic(manager, statistic, null);
             manager.save();
         }
     }
@@ -342,7 +341,7 @@
             getPlayer().incrementStatistic(statistic, amount);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.incrementStatistic(manager, statistic, amount);
+            CraftStatistic.incrementStatistic(manager, statistic, amount, null);
             manager.save();
         }
     }
@@ -353,7 +352,7 @@
             getPlayer().decrementStatistic(statistic, amount);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.decrementStatistic(manager, statistic, amount);
+            CraftStatistic.decrementStatistic(manager, statistic, amount, null);
             manager.save();
         }
     }
@@ -364,7 +363,7 @@
             getPlayer().setStatistic(statistic, newValue);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.setStatistic(manager, statistic, newValue);
+            CraftStatistic.setStatistic(manager, statistic, newValue, null);
             manager.save();
         }
     }
@@ -375,7 +374,7 @@
             getPlayer().incrementStatistic(statistic, material);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.incrementStatistic(manager, statistic, material);
+            CraftStatistic.incrementStatistic(manager, statistic, material, null);
             manager.save();
         }
     }
@@ -386,7 +385,7 @@
             getPlayer().decrementStatistic(statistic, material);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.decrementStatistic(manager, statistic, material);
+            CraftStatistic.decrementStatistic(manager, statistic, material, null);
             manager.save();
         }
     }
@@ -406,7 +405,7 @@
             getPlayer().incrementStatistic(statistic, material, amount);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.incrementStatistic(manager, statistic, material, amount);
+            CraftStatistic.incrementStatistic(manager, statistic, material, amount, null);
             manager.save();
         }
     }
@@ -417,7 +416,7 @@
             getPlayer().decrementStatistic(statistic, material, amount);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.decrementStatistic(manager, statistic, material, amount);
+            CraftStatistic.decrementStatistic(manager, statistic, material, amount, null);
             manager.save();
         }
     }
@@ -428,7 +427,7 @@
             getPlayer().setStatistic(statistic, material, newValue);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.setStatistic(manager, statistic, material, newValue);
+            CraftStatistic.setStatistic(manager, statistic, material, newValue, null);
             manager.save();
         }
     }
@@ -439,7 +438,7 @@
             getPlayer().incrementStatistic(statistic, entityType);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.incrementStatistic(manager, statistic, entityType);
+            CraftStatistic.incrementStatistic(manager, statistic, entityType, null);
             manager.save();
         }
     }
@@ -450,7 +449,7 @@
             getPlayer().decrementStatistic(statistic, entityType);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.decrementStatistic(manager, statistic, entityType);
+            CraftStatistic.decrementStatistic(manager, statistic, entityType, null);
             manager.save();
         }
     }
@@ -470,7 +469,7 @@
             getPlayer().incrementStatistic(statistic, entityType, amount);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.incrementStatistic(manager, statistic, entityType, amount);
+            CraftStatistic.incrementStatistic(manager, statistic, entityType, amount, null);
             manager.save();
         }
     }
@@ -481,7 +480,7 @@
             getPlayer().decrementStatistic(statistic, entityType, amount);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.decrementStatistic(manager, statistic, entityType, amount);
+            CraftStatistic.decrementStatistic(manager, statistic, entityType, amount, null);
             manager.save();
         }
     }
@@ -492,7 +491,7 @@
             getPlayer().setStatistic(statistic, entityType, newValue);
         } else {
             ServerStatsCounter manager = getStatisticManager();
-            CraftStatistic.setStatistic(manager, statistic, entityType, newValue);
+            CraftStatistic.setStatistic(manager, statistic, entityType, newValue, null);
             manager.save();
         }
     }
Index: src/main/java/org/bukkit/entity/Firework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Firework.java b/src/main/java/org/bukkit/entity/Firework.java
--- a/src/main/java/org/bukkit/entity/Firework.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Firework.java	(date 1703956060000)
@@ -1,8 +1,8 @@
 package org.bukkit.entity;
 
+import javax.annotation.Nullable;
 import org.bukkit.inventory.meta.FireworkMeta;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public interface Firework extends Projectile {
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftParticle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftParticle.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftParticle.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftParticle.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftParticle.java	(date 1703956060000)
@@ -1,26 +1,31 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.BiMap;
-import com.google.common.collect.HashBiMap;
+import com.mohistmc.mohist.forge.ForgeInjectBukkit;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.BiFunction;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.DustColorTransitionOptions;
 import net.minecraft.core.particles.DustParticleOptions;
 import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleType;
 import net.minecraft.core.particles.SculkChargeParticleOptions;
 import net.minecraft.core.particles.ShriekParticleOption;
 import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.core.particles.VibrationParticleOption;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.resources.ResourceLocation;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.gameevent.BlockPositionSource;
 import net.minecraft.world.level.gameevent.EntityPositionSource;
 import net.minecraft.world.level.gameevent.PositionSource;
 import org.bukkit.Color;
+import org.bukkit.Keyed;
 import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Particle;
+import org.bukkit.Registry;
 import org.bukkit.Vibration;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
@@ -28,217 +33,188 @@
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.joml.Vector3f;
 
-import java.util.HashMap;
-import java.util.Map;
+public abstract class CraftParticle<D> implements Keyed {
+
+    private static final Registry<CraftParticle<?>> CRAFT_PARTICLE_REGISTRY = new CraftParticleRegistry(CraftRegistry.getMinecraftRegistry(Registries.PARTICLE_TYPE));
+
+    public static Particle minecraftToBukkit(net.minecraft.core.particles.ParticleType<?> minecraft) {
+        Preconditions.checkArgument(minecraft != null);
+
+        net.minecraft.core.Registry<net.minecraft.core.particles.ParticleType<?>> registry = CraftRegistry.getMinecraftRegistry(Registries.PARTICLE_TYPE);
+        NamespacedKey key = CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location());
+        Particle bukkit = Registry.PARTICLE_TYPE.get(key);
+        if (bukkit == null) {
+            bukkit = ForgeInjectBukkit.particleMap.get(key);
+        }
+        Preconditions.checkArgument(bukkit != null);
+
+        return bukkit;
+    }
+
+    public static net.minecraft.core.particles.ParticleType<?> bukkitToMinecraft(Particle bukkit) {
+        Preconditions.checkArgument(bukkit != null);
+
+        return CraftRegistry.getMinecraftRegistry(Registries.PARTICLE_TYPE)
+                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+    }
 
-public enum CraftParticle {
+    public static <D> ParticleOptions createParticleParam(Particle particle, D data) {
+        Preconditions.checkArgument(particle != null);
 
-    EXPLOSION_NORMAL("poof"),
-    EXPLOSION_LARGE("explosion"),
-    EXPLOSION_HUGE("explosion_emitter"),
-    FIREWORKS_SPARK("firework"),
-    WATER_BUBBLE("bubble"),
-    WATER_SPLASH("splash"),
-    WATER_WAKE("fishing"),
-    SUSPENDED("underwater"),
-    SUSPENDED_DEPTH("underwater"),
-    CRIT("crit"),
-    CRIT_MAGIC("enchanted_hit"),
-    SMOKE_NORMAL("smoke"),
-    SMOKE_LARGE("large_smoke"),
-    SPELL("effect"),
-    SPELL_INSTANT("instant_effect"),
-    SPELL_MOB("entity_effect"),
-    SPELL_MOB_AMBIENT("ambient_entity_effect"),
-    SPELL_WITCH("witch"),
-    DRIP_WATER("dripping_water"),
-    DRIP_LAVA("dripping_lava"),
-    VILLAGER_ANGRY("angry_villager"),
-    VILLAGER_HAPPY("happy_villager"),
-    TOWN_AURA("mycelium"),
-    NOTE("note"),
-    PORTAL("portal"),
-    ENCHANTMENT_TABLE("enchant"),
-    FLAME("flame"),
-    LAVA("lava"),
-    CLOUD("cloud"),
-    REDSTONE("dust"),
-    SNOWBALL("item_snowball"),
-    SNOW_SHOVEL("item_snowball"),
-    SLIME("item_slime"),
-    HEART("heart"),
-    ITEM_CRACK("item"),
-    BLOCK_CRACK("block"),
-    BLOCK_DUST("block"),
-    WATER_DROP("rain"),
-    MOB_APPEARANCE("elder_guardian"),
-    DRAGON_BREATH("dragon_breath"),
-    END_ROD("end_rod"),
-    DAMAGE_INDICATOR("damage_indicator"),
-    SWEEP_ATTACK("sweep_attack"),
-    FALLING_DUST("falling_dust"),
-    TOTEM("totem_of_undying"),
-    SPIT("spit"),
-    SQUID_INK("squid_ink"),
-    BUBBLE_POP("bubble_pop"),
-    CURRENT_DOWN("current_down"),
-    BUBBLE_COLUMN_UP("bubble_column_up"),
-    NAUTILUS("nautilus"),
-    DOLPHIN("dolphin"),
-    SNEEZE("sneeze"),
-    CAMPFIRE_COSY_SMOKE("campfire_cosy_smoke"),
-    CAMPFIRE_SIGNAL_SMOKE("campfire_signal_smoke"),
-    COMPOSTER("composter"),
-    FLASH("flash"),
-    FALLING_LAVA("falling_lava"),
-    LANDING_LAVA("landing_lava"),
-    FALLING_WATER("falling_water"),
-    DRIPPING_HONEY("dripping_honey"),
-    FALLING_HONEY("falling_honey"),
-    LANDING_HONEY("landing_honey"),
-    FALLING_NECTAR("falling_nectar"),
-    SOUL_FIRE_FLAME("soul_fire_flame"),
-    ASH("ash"),
-    CRIMSON_SPORE("crimson_spore"),
-    WARPED_SPORE("warped_spore"),
-    SOUL("soul"),
-    DRIPPING_OBSIDIAN_TEAR("dripping_obsidian_tear"),
-    FALLING_OBSIDIAN_TEAR("falling_obsidian_tear"),
-    LANDING_OBSIDIAN_TEAR("landing_obsidian_tear"),
-    REVERSE_PORTAL("reverse_portal"),
-    WHITE_ASH("white_ash"),
-    DUST_COLOR_TRANSITION("dust_color_transition"),
-    VIBRATION("vibration"),
-    FALLING_SPORE_BLOSSOM("falling_spore_blossom"),
-    SPORE_BLOSSOM_AIR("spore_blossom_air"),
-    SMALL_FLAME("small_flame"),
-    SNOWFLAKE("snowflake"),
-    DRIPPING_DRIPSTONE_LAVA("dripping_dripstone_lava"),
-    FALLING_DRIPSTONE_LAVA("falling_dripstone_lava"),
-    DRIPPING_DRIPSTONE_WATER("dripping_dripstone_water"),
-    FALLING_DRIPSTONE_WATER("falling_dripstone_water"),
-    GLOW_SQUID_INK("glow_squid_ink"),
-    GLOW("glow"),
-    WAX_ON("wax_on"),
-    WAX_OFF("wax_off"),
-    ELECTRIC_SPARK("electric_spark"),
-    SCRAPE("scrape"),
-    BLOCK_MARKER("block_marker"),
-    SONIC_BOOM("sonic_boom"),
-    SCULK_SOUL("sculk_soul"),
-    SCULK_CHARGE("sculk_charge"),
-    SCULK_CHARGE_POP("sculk_charge_pop"),
-    SHRIEK("shriek"),
-    CHERRY_LEAVES("cherry_leaves"),
-    EGG_CRACK("egg_crack"),
-    // ----- Legacy Separator -----
-    LEGACY_BLOCK_CRACK("block"),
-    LEGACY_BLOCK_DUST("block"),
-    LEGACY_FALLING_DUST("falling_dust");
-    private final ResourceLocation minecraftKey;
-    private final Particle bukkit;
-    private static final BiMap<Particle, ResourceLocation> particles;
-    private static final Map<Particle, Particle> aliases;
+        CraftParticle<D> craftParticle = (CraftParticle<D>) CRAFT_PARTICLE_REGISTRY.get(particle.getKey());
+
+        Preconditions.checkArgument(craftParticle != null);
+
+        return craftParticle.createParticleParam(data);
+    }
+
+    public static <T> T convertLegacy(T object) {
+        if (object instanceof MaterialData mat) {
+            return (T) CraftBlockData.fromData(CraftMagicNumbers.getBlock(mat));
+        }
+
+        return object;
+    }
+
+    public static Particle convertLegacy(Particle particle) {
+        return switch (particle) {
+            case LEGACY_BLOCK_DUST -> Particle.BLOCK_DUST;
+            case LEGACY_FALLING_DUST -> Particle.FALLING_DUST;
+            case LEGACY_BLOCK_CRACK -> Particle.BLOCK_CRACK;
+            default -> particle;
+        };
+    }
+
+    private final NamespacedKey key;
+    private final net.minecraft.core.particles.ParticleType<?> particle;
+    private final Class<D> clazz;
+
+    public CraftParticle(NamespacedKey key, net.minecraft.core.particles.ParticleType<?> particle, Class<D> clazz) {
+        this.key = key;
+        this.particle = particle;
+        this.clazz = clazz;
+    }
+
+    public net.minecraft.core.particles.ParticleType<?> getHandle() {
+        return particle;
+    }
+
+    public abstract ParticleOptions createParticleParam(D data);
+
+    @Override
+    public NamespacedKey getKey() {
+        return key;
+    }
+
+    public static class CraftParticleRegistry extends CraftRegistry<CraftParticle<?>, net.minecraft.core.particles.ParticleType<?>> {
+
+        private static final Map<NamespacedKey, BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>>> PARTICLE_MAP = new HashMap<>();
+
+        private static final BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> VOID_FUNCTION = (name, particle) -> new CraftParticle<>(name, particle, Void.class) {
+            @Override
+            public ParticleOptions createParticleParam(Void data) {
+                return (SimpleParticleType) getHandle();
+            }
+        };
 
-    static {
-        particles = HashBiMap.create();
-        aliases = new HashMap<>();
-
-        for (CraftParticle particle : CraftParticle.values()) {
-            if (particles.containsValue(particle.minecraftKey)) {
-                aliases.put(particle.bukkit, particles.inverse().get(particle.minecraftKey));
-            } else {
-                particles.put(particle.bukkit, particle.minecraftKey);
-            }
-        }
-    }
-
-
-    public static void putParticles(Particle p, ResourceLocation r) {
-        particles.put(p, r);
-    }
-
-    private CraftParticle(String minecraftKey) {
-        this.minecraftKey = new ResourceLocation(minecraftKey);
-
-        this.bukkit = Particle.valueOf(this.name());
-        Preconditions.checkState(bukkit != null, "Bukkit particle %s does not exist", this.name());
-    }
-
-    public static ParticleOptions toNMS(Particle bukkit) {
-        return toNMS(bukkit, null);
-    }
-
-    public static <T> ParticleOptions toNMS(Particle particle, T obj) {
-        Particle canonical = particle;
-        if (aliases.containsKey(particle)) {
-            canonical = aliases.get(particle);
-        }
-
-        net.minecraft.core.particles.ParticleType nms = BuiltInRegistries.PARTICLE_TYPE.get(particles.get(canonical));
-        Preconditions.checkArgument(nms != null, "No NMS particle %s", particle);
-
-        if (particle.getDataType().equals(Void.class)) {
-            return (SimpleParticleType) nms;
-        }
-        Preconditions.checkArgument(obj != null, "Particle %s requires data, null provided", particle);
-        if (particle.getDataType().equals(ItemStack.class)) {
-            ItemStack itemStack = (ItemStack) obj;
-            return new ItemParticleOption((net.minecraft.core.particles.ParticleType<ItemParticleOption>) nms, CraftItemStack.asNMSCopy(itemStack));
-        }
-        if (particle.getDataType() == MaterialData.class) {
-            MaterialData data = (MaterialData) obj;
-            return new BlockParticleOption((net.minecraft.core.particles.ParticleType<BlockParticleOption>) nms, CraftMagicNumbers.getBlock(data));
-        }
-        if (particle.getDataType() == BlockData.class) {
-            BlockData data = (BlockData) obj;
-            return new BlockParticleOption((net.minecraft.core.particles.ParticleType<BlockParticleOption>) nms, ((CraftBlockData) data).getState());
-        }
-        if (particle.getDataType() == Particle.DustOptions.class) {
-            Particle.DustOptions data = (Particle.DustOptions) obj;
-            Color color = data.getColor();
-            return new DustParticleOptions(new Vector3f(color.getRed() / 255.0f, color.getGreen() / 255.0f, color.getBlue() / 255.0f), data.getSize());
-        }
-        if (particle.getDataType() == Particle.DustTransition.class) {
-            Particle.DustTransition data = (Particle.DustTransition) obj;
-            Color from = data.getColor();
-            Color to = data.getToColor();
-            return new DustColorTransitionOptions(new Vector3f(from.getRed() / 255.0f, from.getGreen() / 255.0f, from.getBlue() / 255.0f), new Vector3f(to.getRed() / 255.0f, to.getGreen() / 255.0f, to.getBlue() / 255.0f), data.getSize());
-        }
-        if (particle.getDataType() == Vibration.class) {
-            Vibration vibration = (Vibration) obj;
+        static {
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> dustOptionsFunction = (name, particle) -> new CraftParticle<>(name, particle, Particle.DustOptions.class) {
+                @Override
+                public ParticleOptions createParticleParam(Particle.DustOptions data) {
+                    Color color = data.getColor();
+                    return new DustParticleOptions(new Vector3f(color.getRed() / 255.0f, color.getGreen() / 255.0f, color.getBlue() / 255.0f), data.getSize());
+                }
+            };
+
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> itemStackFunction = (name, particle) -> new CraftParticle<>(name, particle, ItemStack.class) {
+                @Override
+                public ParticleOptions createParticleParam(ItemStack data) {
+                    return new ItemParticleOption((net.minecraft.core.particles.ParticleType<ItemParticleOption>) getHandle(), CraftItemStack.asNMSCopy(data));
+                }
+            };
+
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> blockDataFunction = (name, particle) -> new CraftParticle<>(name, particle, BlockData.class) {
+                @Override
+                public ParticleOptions createParticleParam(BlockData data) {
+                    return new BlockParticleOption((net.minecraft.core.particles.ParticleType<BlockParticleOption>) getHandle(), ((CraftBlockData) data).getState());
+                }
+            };
+
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> dustTransitionFunction = (name, particle) -> new CraftParticle<>(name, particle, Particle.DustTransition.class) {
+                @Override
+                public ParticleOptions createParticleParam(Particle.DustTransition data) {
+                    Color from = data.getColor();
+                    Color to = data.getToColor();
+                    return new DustColorTransitionOptions(new Vector3f(from.getRed() / 255.0f, from.getGreen() / 255.0f, from.getBlue() / 255.0f), new Vector3f(to.getRed() / 255.0f, to.getGreen() / 255.0f, to.getBlue() / 255.0f), data.getSize());
+                }
+            };
 
-            PositionSource source;
-            if (vibration.getDestination() instanceof Vibration.Destination.BlockDestination) {
-                Location destination = ((Vibration.Destination.BlockDestination) vibration.getDestination()).getLocation();
-                source = new BlockPositionSource(CraftLocation.toBlockPosition(destination));
-            } else if (vibration.getDestination() instanceof Vibration.Destination.EntityDestination) {
-                Entity destination = ((CraftEntity) ((Vibration.Destination.EntityDestination) vibration.getDestination()).getEntity()).getHandle();
-                source = new EntityPositionSource(destination, destination.getEyeHeight());
-            } else {
-                throw new IllegalArgumentException("Unknown vibration destination " + vibration.getDestination());
-            }
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> vibrationFunction = (name, particle) -> new CraftParticle<>(name, particle, Vibration.class) {
+                @Override
+                public ParticleOptions createParticleParam(Vibration data) {
+                    PositionSource source;
+                    if (data.getDestination() instanceof Vibration.Destination.BlockDestination) {
+                        Location destination = ((Vibration.Destination.BlockDestination) data.getDestination()).getLocation();
+                        source = new BlockPositionSource(CraftLocation.toBlockPosition(destination));
+                    } else if (data.getDestination() instanceof Vibration.Destination.EntityDestination) {
+                        Entity destination = ((CraftEntity) ((Vibration.Destination.EntityDestination) data.getDestination()).getEntity()).getHandle();
+                        source = new EntityPositionSource(destination, destination.getEyeHeight());
+                    } else {
+                        throw new IllegalArgumentException("Unknown vibration destination " + data.getDestination());
+                    }
+
+                    return new VibrationParticleOption(source, data.getArrivalTime());
+                }
+            };
 
-            return new VibrationParticleOption(source, vibration.getArrivalTime());
-        }
-        if (particle.getDataType() == Float.class) {
-            return new SculkChargeParticleOptions((Float) obj);
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> floatFunction = (name, particle) -> new CraftParticle<>(name, particle, Float.class) {
+                @Override
+                public ParticleOptions createParticleParam(Float data) {
+                    return new SculkChargeParticleOptions(data);
+                }
+            };
+
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> integerFunction = (name, particle) -> new CraftParticle<>(name, particle, Integer.class) {
+                @Override
+                public ParticleOptions createParticleParam(Integer data) {
+                    return new ShriekParticleOption(data);
+                }
+            };
+
+            add("dust", dustOptionsFunction);
+            add("item", itemStackFunction);
+            add("block", blockDataFunction);
+            add("falling_dust", blockDataFunction);
+            add("dust_color_transition", dustTransitionFunction);
+            add("vibration", vibrationFunction);
+            add("sculk_charge", floatFunction);
+            add("shriek", integerFunction);
+            add("block_marker", blockDataFunction);
         }
-        if (particle.getDataType() == Integer.class) {
-            return new ShriekParticleOption((Integer) obj);
+
+        private static void add(String name, BiFunction<NamespacedKey, ParticleType<?>, CraftParticle<?>> function) {
+            PARTICLE_MAP.put(NamespacedKey.fromString(name), function);
         }
-        throw new IllegalArgumentException(particle.getDataType().toString());
-    }
+
+        public CraftParticleRegistry(net.minecraft.core.Registry<net.minecraft.core.particles.ParticleType<?>> minecraftRegistry) {
+            super(CraftParticle.class, minecraftRegistry, null);
+        }
 
-    public static Particle toBukkit(net.minecraft.core.particles.ParticleOptions nms) {
-        return toBukkit(nms.getType());
-    }
+        @Override
+        public CraftParticle<?> createBukkit(NamespacedKey namespacedKey, net.minecraft.core.particles.ParticleType<?> particle) {
+            if (particle == null) {
+                return null;
+            }
 
-    public static Particle toBukkit(net.minecraft.core.particles.ParticleType nms) {
-        return particles.inverse().get(BuiltInRegistries.PARTICLE_TYPE.getKey(nms));
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> function = PARTICLE_MAP.getOrDefault(namespacedKey, VOID_FUNCTION);
+
+            return function.apply(namespacedKey, particle);
+        }
     }
 }
+
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRaid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRaid.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRaid.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRaid.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRaid.java	(date 1703956060000)
@@ -2,6 +2,11 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import org.bukkit.Location;
@@ -9,12 +14,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
 import org.bukkit.entity.Raider;
 
-import java.util.Collections;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Function;
-
 public final class CraftRaid implements Raid {
 
     private final net.minecraft.world.entity.raid.Raid handle;
Index: src/main/java/org/bukkit/entity/Frog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Frog.java b/src/main/java/org/bukkit/entity/Frog.java
--- a/src/main/java/org/bukkit/entity/Frog.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Frog.java	(date 1703956060000)
@@ -1,12 +1,11 @@
 package org.bukkit.entity;
 
+import java.util.Locale;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Locale;
-
 /**
  * A Frog.
  */
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegionAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegionAccessor.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegionAccessor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegionAccessor.java	(date 1703956060000)
@@ -1,201 +1,62 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.google.common.base.Preconditions;
-import com.google.common.base.Predicate;
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.data.worldgen.features.TreeFeatures;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.entity.Interaction;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
-import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
-import net.minecraft.world.entity.item.FallingBlockEntity;
-import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
-import net.minecraft.world.entity.projectile.EyeOfEnder;
-import net.minecraft.world.entity.projectile.FireworkRocketEntity;
-import net.minecraft.world.entity.vehicle.ChestBoat;
-import net.minecraft.world.entity.vehicle.MinecartChest;
-import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
-import net.minecraft.world.entity.vehicle.MinecartFurnace;
-import net.minecraft.world.entity.vehicle.MinecartHopper;
-import net.minecraft.world.entity.vehicle.MinecartSpawner;
-import net.minecraft.world.entity.vehicle.MinecartTNT;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.ChorusFlowerBlock;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
-import net.minecraft.world.phys.AABB;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.RegionAccessor;
 import org.bukkit.TreeType;
 import org.bukkit.block.Biome;
-import org.bukkit.block.BlockFace;
 import org.bukkit.block.BlockState;
 import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBiome;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntity;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftEntityTypes;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionUtil;
 import org.bukkit.craftbukkit.v1_20_R3.util.BlockStateListPopulator;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.v1_20_R3.util.RandomSourceWrapper;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.AbstractHorse;
-import org.bukkit.entity.AbstractSkeleton;
-import org.bukkit.entity.AbstractVillager;
-import org.bukkit.entity.Allay;
-import org.bukkit.entity.Ambient;
-import org.bukkit.entity.AreaEffectCloud;
-import org.bukkit.entity.ArmorStand;
-import org.bukkit.entity.Axolotl;
-import org.bukkit.entity.Bat;
-import org.bukkit.entity.Bee;
-import org.bukkit.entity.Blaze;
-import org.bukkit.entity.BlockDisplay;
-import org.bukkit.entity.Boat;
-import org.bukkit.entity.Camel;
-import org.bukkit.entity.Cat;
-import org.bukkit.entity.CaveSpider;
-import org.bukkit.entity.ChestedHorse;
-import org.bukkit.entity.Chicken;
-import org.bukkit.entity.Cod;
-import org.bukkit.entity.ComplexLivingEntity;
-import org.bukkit.entity.Cow;
-import org.bukkit.entity.Creeper;
-import org.bukkit.entity.Dolphin;
-import org.bukkit.entity.Donkey;
-import org.bukkit.entity.DragonFireball;
-import org.bukkit.entity.Drowned;
-import org.bukkit.entity.Egg;
-import org.bukkit.entity.ElderGuardian;
-import org.bukkit.entity.EnderCrystal;
-import org.bukkit.entity.EnderDragon;
-import org.bukkit.entity.EnderPearl;
-import org.bukkit.entity.EnderSignal;
-import org.bukkit.entity.Enderman;
-import org.bukkit.entity.Endermite;
+import org.bukkit.entity.Arrow;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
-import org.bukkit.entity.Evoker;
-import org.bukkit.entity.EvokerFangs;
-import org.bukkit.entity.ExperienceOrb;
-import org.bukkit.entity.FallingBlock;
 import org.bukkit.entity.Fireball;
-import org.bukkit.entity.Firework;
-import org.bukkit.entity.Fish;
-import org.bukkit.entity.Fox;
-import org.bukkit.entity.Frog;
-import org.bukkit.entity.Ghast;
-import org.bukkit.entity.Giant;
-import org.bukkit.entity.GlowItemFrame;
-import org.bukkit.entity.GlowSquid;
-import org.bukkit.entity.Goat;
-import org.bukkit.entity.Golem;
-import org.bukkit.entity.Guardian;
-import org.bukkit.entity.Hanging;
-import org.bukkit.entity.Hoglin;
-import org.bukkit.entity.Husk;
-import org.bukkit.entity.Illager;
-import org.bukkit.entity.Illusioner;
-import org.bukkit.entity.IronGolem;
-import org.bukkit.entity.ItemDisplay;
-import org.bukkit.entity.ItemFrame;
-import org.bukkit.entity.LeashHitch;
-import org.bukkit.entity.LightningStrike;
+import org.bukkit.entity.Horse;
+import org.bukkit.entity.LargeFireball;
 import org.bukkit.entity.LingeringPotion;
 import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Llama;
-import org.bukkit.entity.LlamaSpit;
-import org.bukkit.entity.MagmaCube;
-import org.bukkit.entity.Marker;
 import org.bukkit.entity.Minecart;
-import org.bukkit.entity.Mule;
-import org.bukkit.entity.MushroomCow;
-import org.bukkit.entity.Ocelot;
-import org.bukkit.entity.Painting;
-import org.bukkit.entity.Panda;
-import org.bukkit.entity.Parrot;
-import org.bukkit.entity.Phantom;
-import org.bukkit.entity.Pig;
-import org.bukkit.entity.PigZombie;
-import org.bukkit.entity.Piglin;
-import org.bukkit.entity.PiglinBrute;
-import org.bukkit.entity.Pillager;
-import org.bukkit.entity.Player;
-import org.bukkit.entity.PolarBear;
-import org.bukkit.entity.Projectile;
-import org.bukkit.entity.PufferFish;
-import org.bukkit.entity.Rabbit;
-import org.bukkit.entity.Ravager;
-import org.bukkit.entity.Salmon;
-import org.bukkit.entity.Sheep;
-import org.bukkit.entity.Shulker;
-import org.bukkit.entity.ShulkerBullet;
-import org.bukkit.entity.Silverfish;
-import org.bukkit.entity.Skeleton;
-import org.bukkit.entity.SkeletonHorse;
-import org.bukkit.entity.Slime;
-import org.bukkit.entity.SmallFireball;
-import org.bukkit.entity.Snowball;
-import org.bukkit.entity.Snowman;
-import org.bukkit.entity.SpectralArrow;
-import org.bukkit.entity.Spellcaster;
-import org.bukkit.entity.Spider;
-import org.bukkit.entity.Squid;
-import org.bukkit.entity.Stray;
-import org.bukkit.entity.Strider;
-import org.bukkit.entity.TNTPrimed;
-import org.bukkit.entity.Tadpole;
-import org.bukkit.entity.Tameable;
-import org.bukkit.entity.TextDisplay;
-import org.bukkit.entity.ThrownExpBottle;
+import org.bukkit.entity.SizedFireball;
+import org.bukkit.entity.SplashPotion;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.entity.TippedArrow;
-import org.bukkit.entity.TraderLlama;
-import org.bukkit.entity.Trident;
-import org.bukkit.entity.TropicalFish;
-import org.bukkit.entity.Turtle;
-import org.bukkit.entity.Vex;
-import org.bukkit.entity.Villager;
-import org.bukkit.entity.Vindicator;
-import org.bukkit.entity.WanderingTrader;
-import org.bukkit.entity.Warden;
-import org.bukkit.entity.Witch;
-import org.bukkit.entity.Wither;
-import org.bukkit.entity.WitherSkeleton;
-import org.bukkit.entity.WitherSkull;
-import org.bukkit.entity.Wolf;
-import org.bukkit.entity.Zoglin;
-import org.bukkit.entity.Zombie;
-import org.bukkit.entity.ZombieHorse;
-import org.bukkit.entity.ZombieVillager;
-import org.bukkit.entity.minecart.CommandMinecart;
-import org.bukkit.entity.minecart.ExplosiveMinecart;
-import org.bukkit.entity.minecart.HopperMinecart;
-import org.bukkit.entity.minecart.PoweredMinecart;
-import org.bukkit.entity.minecart.SpawnerMinecart;
-import org.bukkit.entity.minecart.StorageMinecart;
+import org.bukkit.entity.minecart.RideableMinecart;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
-import org.bukkit.util.Vector;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.function.Consumer;
 
 public abstract class CraftRegionAccessor implements RegionAccessor {
 
@@ -212,7 +73,7 @@
 
     @Override
     public Biome getBiome(int x, int y, int z) {
-        return CraftBlock.biomeBaseToBiome(getHandle().registryAccess().registryOrThrow(Registries.BIOME), getHandle().getNoiseBiome(x >> 2, y >> 2, z >> 2));
+        return CraftBiome.minecraftHolderToBukkit(getHandle().getNoiseBiome(x >> 2, y >> 2, z >> 2));
     }
 
     @Override
@@ -223,7 +84,7 @@
     @Override
     public void setBiome(int x, int y, int z, Biome biome) {
         Preconditions.checkArgument(biome != Biome.CUSTOM, "Cannot set the biome to %s", biome);
-        Holder<net.minecraft.world.level.biome.Biome> biomeBase = CraftBlock.biomeToBiomeBase(getHandle().registryAccess().registryOrThrow(Registries.BIOME), biome);
+        Holder<net.minecraft.world.level.biome.Biome> biomeBase = CraftBiome.bukkitToMinecraftHolder(biome);
         setBiome(x, y, z, biomeBase);
     }
 
@@ -256,7 +117,7 @@
 
     @Override
     public Material getType(int x, int y, int z) {
-        return CraftMagicNumbers.getMaterial(getData(x, y, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(getData(x, y, z).getBlock());
     }
 
     private net.minecraft.world.level.block.state.BlockState getData(int x, int y, int z) {
@@ -314,15 +175,15 @@
     }
 
     @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType, Consumer<BlockState> consumer) {
+    public boolean generateTree(Location location, Random random, TreeType treeType, Consumer<? super BlockState> consumer) {
         return generateTree(location, random, treeType, (consumer == null) ? null : (block) -> {
             consumer.accept(block);
             return true;
         });
     }
 
-    // @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType, Predicate<BlockState> predicate) {
+    @Override
+    public boolean generateTree(Location location, Random random, TreeType treeType, Predicate<? super BlockState> predicate) {
         BlockPos pos = CraftLocation.toBlockPosition(location);
         BlockStateListPopulator populator = new BlockStateListPopulator(getHandle());
         boolean result = generateTree(populator, getHandle().getMinecraftWorld().getChunkSource().getGenerator(), pos, new RandomSourceWrapper(random), treeType);
@@ -444,7 +305,7 @@
 
     @Override
     public List<LivingEntity> getLivingEntities() {
-        List<LivingEntity> list = new ArrayList<LivingEntity>();
+        List<LivingEntity> list = new ArrayList<>();
 
         getNMSEntities().forEach(entity -> {
             Entity bukkitEntity = entity.getBukkitEntity();
@@ -508,38 +369,60 @@
 
     public abstract Iterable<net.minecraft.world.entity.Entity> getNMSEntities();
 
+    @Override
+    @SuppressWarnings("unchecked")
+    public <T extends Entity> T createEntity(Location location, Class<T> clazz) throws IllegalArgumentException {
+        net.minecraft.world.entity.Entity entity = createEntity(location, clazz, true);
+        if (!isNormalWorld()) {
+            entity.generation = true;
+        }
+        return (T) entity.getBukkitEntity();
+    }
+
     @Override
     public <T extends Entity> T spawn(Location location, Class<T> clazz) throws IllegalArgumentException {
         return spawn(location, clazz, null, CreatureSpawnEvent.SpawnReason.CUSTOM);
     }
 
     @Override
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<T> function) throws IllegalArgumentException {
+    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<? super T> function) throws IllegalArgumentException {
         return spawn(location, clazz, function, CreatureSpawnEvent.SpawnReason.CUSTOM);
     }
 
     @Override
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, boolean randomizeData, Consumer<T> function) throws IllegalArgumentException {
+    public <T extends Entity> T spawn(Location location, Class<T> clazz, boolean randomizeData, Consumer<? super T> function) throws IllegalArgumentException {
         return spawn(location, clazz, function, CreatureSpawnEvent.SpawnReason.CUSTOM, randomizeData);
     }
 
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
+    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<? super T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         return spawn(location, clazz, function, reason, true);
     }
 
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason, boolean randomizeData) throws IllegalArgumentException {
+    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<? super T> function, CreatureSpawnEvent.SpawnReason reason, boolean randomizeData) throws IllegalArgumentException {
         net.minecraft.world.entity.Entity entity = createEntity(location, clazz, randomizeData);
 
         return addEntity(entity, reason, function, randomizeData);
     }
 
+    @Override
+    @SuppressWarnings("unchecked")
+    public <T extends Entity> T addEntity(T entity) {
+        Preconditions.checkArgument(!entity.isInWorld(), "Entity has already been added to a world");
+        net.minecraft.world.entity.Entity nmsEntity = ((CraftEntity) entity).getHandle();
+        if (nmsEntity.level() != getHandle().getLevel()) {
+            nmsEntity = nmsEntity.changeDimension(getHandle().getLevel());
+        }
+        addEntityWithPassengers(nmsEntity, CreatureSpawnEvent.SpawnReason.CUSTOM);
+        return (T) nmsEntity.getBukkitEntity();
+    }
+
     @SuppressWarnings("unchecked")
     public <T extends Entity> T addEntity(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         return addEntity(entity, reason, null, true);
     }
 
     @SuppressWarnings("unchecked")
-    public <T extends Entity> T addEntity(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason, Consumer<T> function, boolean randomizeData) throws IllegalArgumentException {
+    public <T extends Entity> T addEntity(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason, Consumer<? super T> function, boolean randomizeData) throws IllegalArgumentException {
         Preconditions.checkArgument(entity != null, "Cannot spawn null entity");
 
         if (randomizeData && entity instanceof Mob) {
@@ -547,7 +430,7 @@
         }
 
         if (!isNormalWorld()) {
-            entity.banner$setGeneration(true);
+            entity.generation = true;
         }
 
         if (function != null) {
@@ -560,8 +443,10 @@
 
     public abstract void addEntityToWorld(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason);
 
+    public abstract void addEntityWithPassengers(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason);
+
     @SuppressWarnings("unchecked")
-    public net.minecraft.world.entity.Entity createEntity(Location location, Class<? extends Entity> clazz) throws IllegalArgumentException {
+    public net.minecraft.world.entity.Entity makeEntity(Location location, Class<? extends Entity> clazz) throws IllegalArgumentException {
         return createEntity(location, clazz, true);
     }
 
@@ -570,400 +455,42 @@
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(clazz != null, "Entity class cannot be null");
 
-        net.minecraft.world.entity.Entity entity = null;
-        net.minecraft.world.level.Level world = getHandle().getMinecraftWorld();
+        // Convert classes which have no direct entity type, but where spawn able by the if cases
+        Consumer<net.minecraft.world.entity.Entity> runOld = other -> { };
+        if (clazz == AbstractArrow.class) {
+            clazz = Arrow.class;
+        } else if (clazz == AbstractHorse.class) {
+            clazz = Horse.class;
+        } else if (clazz == Fireball.class) {
+            clazz = LargeFireball.class;
+        } else if (clazz == LingeringPotion.class) {
+            clazz = ThrownPotion.class;
+            runOld = other -> ((net.minecraft.world.entity.projectile.ThrownPotion) other).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.LINGERING_POTION, 1)));
+        } else if (clazz == Minecart.class) {
+            clazz = RideableMinecart.class;
+        } else if (clazz == SizedFireball.class) {
+            clazz = LargeFireball.class;
+        } else if (clazz == SplashPotion.class) {
+            clazz = ThrownPotion.class;
+        } else if (clazz == TippedArrow.class) {
+            clazz = Arrow.class;
+            runOld = other -> ((Arrow) other.getBukkitEntity()).setBasePotionType(PotionType.WATER);
+        }
 
-        double x = location.getX();
-        double y = location.getY();
-        double z = location.getZ();
-        float pitch = location.getPitch();
-        float yaw = location.getYaw();
+        CraftEntityTypes.EntityTypeData<?, ?> entityTypeData = CraftEntityTypes.getEntityTypeData(clazz);
 
-        // order is important for some of these
-        if (Boat.class.isAssignableFrom(clazz)) {
-            if (ChestBoat.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.CHEST_BOAT.create(world);
-            } else {
-                entity = net.minecraft.world.entity.EntityType.BOAT.create(world);
-            }
-            entity.moveTo(x, y, z, yaw, pitch);
-        } else if (FallingBlock.class.isAssignableFrom(clazz)) {
-            BlockPos pos = BlockPos.containing(x, y, z);
-            entity = FallingBlockEntity.fall(world, pos, getHandle().getBlockState(pos));
-        } else if (Projectile.class.isAssignableFrom(clazz)) {
-            if (Snowball.class.isAssignableFrom(clazz)) {
-                entity = new net.minecraft.world.entity.projectile.Snowball(world, x, y, z);
-            } else if (Egg.class.isAssignableFrom(clazz)) {
-                entity = new net.minecraft.world.entity.projectile.ThrownEgg(world, x, y, z);
-            } else if (AbstractArrow.class.isAssignableFrom(clazz)) {
-                if (TippedArrow.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.ARROW.create(world);
-                    ((net.minecraft.world.entity.projectile.Arrow) entity).setPotionType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
-                } else if (SpectralArrow.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.SPECTRAL_ARROW.create(world);
-                } else if (Trident.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.TRIDENT.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.ARROW.create(world);
-                }
-                entity.moveTo(x, y, z, 0, 0);
-            } else if (ThrownExpBottle.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.EXPERIENCE_BOTTLE.create(world);
-                entity.moveTo(x, y, z, 0, 0);
-            } else if (EnderPearl.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.ENDER_PEARL.create(world);
-                entity.moveTo(x, y, z, 0, 0);
-            } else if (ThrownPotion.class.isAssignableFrom(clazz)) {
-                if (LingeringPotion.class.isAssignableFrom(clazz)) {
-                    entity = new net.minecraft.world.entity.projectile.ThrownPotion(world, x, y, z);
-                    ((net.minecraft.world.entity.projectile.ThrownPotion) entity).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.LINGERING_POTION, 1)));
-                } else {
-                    entity = new net.minecraft.world.entity.projectile.ThrownPotion(world, x, y, z);
-                    ((net.minecraft.world.entity.projectile.ThrownPotion) entity).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.SPLASH_POTION, 1)));
-                }
-            } else if (Fireball.class.isAssignableFrom(clazz)) {
-                if (SmallFireball.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.SMALL_FIREBALL.create(world);
-                } else if (WitherSkull.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.WITHER_SKULL.create(world);
-                } else if (DragonFireball.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.DRAGON_FIREBALL.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.FIREBALL.create(world);
-                }
-                entity.moveTo(x, y, z, yaw, pitch);
-                Vector direction = location.getDirection().multiply(10);
-                ((AbstractHurtingProjectile) entity).setDirection(direction.getX(), direction.getY(), direction.getZ());
-            } else if (ShulkerBullet.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.SHULKER_BULLET.create(world);
-                entity.moveTo(x, y, z, yaw, pitch);
-            } else if (LlamaSpit.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.LLAMA_SPIT.create(world);
-                entity.moveTo(x, y, z, yaw, pitch);
-            } else if (Firework.class.isAssignableFrom(clazz)) {
-                entity = new FireworkRocketEntity(world, x, y, z, net.minecraft.world.item.ItemStack.EMPTY);
-            }
-        } else if (Minecart.class.isAssignableFrom(clazz)) {
-            if (PoweredMinecart.class.isAssignableFrom(clazz)) {
-                entity = new MinecartFurnace(world, x, y, z);
-            } else if (StorageMinecart.class.isAssignableFrom(clazz)) {
-                entity = new MinecartChest(world, x, y, z);
-            } else if (ExplosiveMinecart.class.isAssignableFrom(clazz)) {
-                entity = new MinecartTNT(world, x, y, z);
-            } else if (HopperMinecart.class.isAssignableFrom(clazz)) {
-                entity = new MinecartHopper(world, x, y, z);
-            } else if (SpawnerMinecart.class.isAssignableFrom(clazz)) {
-                entity = new MinecartSpawner(world, x, y, z);
-            } else if (CommandMinecart.class.isAssignableFrom(clazz)) {
-                entity = new MinecartCommandBlock(world, x, y, z);
-            } else { // Default to rideable minecart for pre-rideable compatibility
-                entity = new net.minecraft.world.entity.vehicle.Minecart(world, x, y, z);
-            }
-        } else if (EnderSignal.class.isAssignableFrom(clazz)) {
-            entity = new EyeOfEnder(world, x, y, z);
-        } else if (EnderCrystal.class.isAssignableFrom(clazz)) {
-            entity = net.minecraft.world.entity.EntityType.END_CRYSTAL.create(world);
-            entity.moveTo(x, y, z, 0, 0);
-        } else if (LivingEntity.class.isAssignableFrom(clazz)) {
-            if (Chicken.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.CHICKEN.create(world);
-            } else if (Cow.class.isAssignableFrom(clazz)) {
-                if (MushroomCow.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.MOOSHROOM.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.COW.create(world);
-                }
-            } else if (Golem.class.isAssignableFrom(clazz)) {
-                if (Snowman.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.SNOW_GOLEM.create(world);
-                } else if (IronGolem.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.IRON_GOLEM.create(world);
-                } else if (Shulker.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.SHULKER.create(world);
-                }
-            } else if (Creeper.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.CREEPER.create(world);
-            } else if (Ghast.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.GHAST.create(world);
-            } else if (Pig.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.PIG.create(world);
-            } else if (Player.class.isAssignableFrom(clazz)) {
-                // need a net server handler for this one
-            } else if (Sheep.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.SHEEP.create(world);
-            } else if (AbstractHorse.class.isAssignableFrom(clazz)) {
-                if (ChestedHorse.class.isAssignableFrom(clazz)) {
-                    if (Donkey.class.isAssignableFrom(clazz)) {
-                        entity = net.minecraft.world.entity.EntityType.DONKEY.create(world);
-                    } else if (Mule.class.isAssignableFrom(clazz)) {
-                        entity = net.minecraft.world.entity.EntityType.MULE.create(world);
-                    } else if (Llama.class.isAssignableFrom(clazz)) {
-                        if (TraderLlama.class.isAssignableFrom(clazz)) {
-                            entity = net.minecraft.world.entity.EntityType.TRADER_LLAMA.create(world);
-                        } else {
-                            entity = net.minecraft.world.entity.EntityType.LLAMA.create(world);
-                        }
-                    }
-                } else if (SkeletonHorse.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.SKELETON_HORSE.create(world);
-                } else if (ZombieHorse.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.ZOMBIE_HORSE.create(world);
-                } else if (Camel.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.CAMEL.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.HORSE.create(world);
-                }
-            } else if (AbstractSkeleton.class.isAssignableFrom(clazz)) {
-                if (Stray.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.STRAY.create(world);
-                } else if (WitherSkeleton.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.WITHER_SKELETON.create(world);
-                } else if (Skeleton.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.SKELETON.create(world);
-                }
-            } else if (Slime.class.isAssignableFrom(clazz)) {
-                if (MagmaCube.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.MAGMA_CUBE.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.SLIME.create(world);
-                }
-            } else if (Spider.class.isAssignableFrom(clazz)) {
-                if (CaveSpider.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.CAVE_SPIDER.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.SPIDER.create(world);
-                }
-            } else if (Squid.class.isAssignableFrom(clazz)) {
-                if (GlowSquid.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.GLOW_SQUID.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.SQUID.create(world);
-                }
-            } else if (Tameable.class.isAssignableFrom(clazz)) {
-                if (Wolf.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.WOLF.create(world);
-                } else if (Parrot.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.PARROT.create(world);
-                } else if (Cat.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.CAT.create(world);
-                }
-            } else if (PigZombie.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.ZOMBIFIED_PIGLIN.create(world);
-            } else if (Zombie.class.isAssignableFrom(clazz)) {
-                if (Husk.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.HUSK.create(world);
-                } else if (ZombieVillager.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.ZOMBIE_VILLAGER.create(world);
-                } else if (Drowned.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.DROWNED.create(world);
-                } else {
-                    entity = new net.minecraft.world.entity.monster.Zombie(world);
-                }
-            } else if (Giant.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.GIANT.create(world);
-            } else if (Silverfish.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.SILVERFISH.create(world);
-            } else if (Enderman.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.ENDERMAN.create(world);
-            } else if (Blaze.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.BLAZE.create(world);
-            } else if (AbstractVillager.class.isAssignableFrom(clazz)) {
-                if (Villager.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.VILLAGER.create(world);
-                } else if (WanderingTrader.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.WANDERING_TRADER.create(world);
-                }
-            } else if (Witch.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.WITCH.create(world);
-            } else if (Wither.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.WITHER.create(world);
-            } else if (ComplexLivingEntity.class.isAssignableFrom(clazz)) {
-                if (EnderDragon.class.isAssignableFrom(clazz)) {
-                    Preconditions.checkArgument(this.isNormalWorld(), "Cannot spawn entity %s during world generation", clazz.getName());
-                    entity = net.minecraft.world.entity.EntityType.ENDER_DRAGON.create(getHandle().getMinecraftWorld());
-                }
-            } else if (Ambient.class.isAssignableFrom(clazz)) {
-                if (Bat.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.BAT.create(world);
-                }
-            } else if (Rabbit.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.RABBIT.create(world);
-            } else if (Endermite.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.ENDERMITE.create(world);
-            } else if (Guardian.class.isAssignableFrom(clazz)) {
-                if (ElderGuardian.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.ELDER_GUARDIAN.create(world);
-                } else {
-                    entity = net.minecraft.world.entity.EntityType.GUARDIAN.create(world);
-                }
-            } else if (ArmorStand.class.isAssignableFrom(clazz)) {
-                entity = new net.minecraft.world.entity.decoration.ArmorStand(world, x, y, z);
-            } else if (PolarBear.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.POLAR_BEAR.create(world);
-            } else if (Vex.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.VEX.create(world);
-            } else if (Illager.class.isAssignableFrom(clazz)) {
-                if (Spellcaster.class.isAssignableFrom(clazz)) {
-                    if (Evoker.class.isAssignableFrom(clazz)) {
-                        entity = net.minecraft.world.entity.EntityType.EVOKER.create(world);
-                    } else if (Illusioner.class.isAssignableFrom(clazz)) {
-                        entity = net.minecraft.world.entity.EntityType.ILLUSIONER.create(world);
-                    }
-                } else if (Vindicator.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.VINDICATOR.create(world);
-                } else if (Pillager.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.PILLAGER.create(world);
-                }
-            } else if (Turtle.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.TURTLE.create(world);
-            } else if (Phantom.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.PHANTOM.create(world);
-            } else if (Fish.class.isAssignableFrom(clazz)) {
-                if (Cod.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.COD.create(world);
-                } else if (PufferFish.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.PUFFERFISH.create(world);
-                } else if (Salmon.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.SALMON.create(world);
-                } else if (TropicalFish.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.TROPICAL_FISH.create(world);
-                } else if (Tadpole.class.isAssignableFrom(clazz)) {
-                    entity = net.minecraft.world.entity.EntityType.TADPOLE.create(world);
-                }
-            } else if (Dolphin.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.DOLPHIN.create(world);
-            } else if (Ocelot.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.OCELOT.create(world);
-            } else if (Ravager.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.RAVAGER.create(world);
-            } else if (Panda.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.PANDA.create(world);
-            } else if (Fox.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.FOX.create(world);
-            } else if (Bee.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.BEE.create(world);
-            } else if (Hoglin.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.HOGLIN.create(world);
-            } else if (Piglin.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.PIGLIN.create(world);
-            } else if (PiglinBrute.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.PIGLIN_BRUTE.create(world);
-            } else if (Strider.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.STRIDER.create(world);
-            } else if (Zoglin.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.ZOGLIN.create(world);
-            } else if (Axolotl.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.AXOLOTL.create(world);
-            } else if (Goat.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.GOAT.create(world);
-            } else if (Allay.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.ALLAY.create(world);
-            } else if (Frog.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.FROG.create(world);
-            } else if (Warden.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.WARDEN.create(world);
-            }
+        if (entityTypeData == null || entityTypeData.spawnFunction() == null) {
+            throw new IllegalArgumentException("Cannot spawn an entity for " + clazz.getName());
+        }
+
+        if (!entityTypeData.entityType().isEnabledByFeature(getHandle().getMinecraftWorld().getWorld())) {
+            throw new IllegalArgumentException("Cannot spawn an entity for " + clazz.getName() + " because it is not an enabled feature");
+        }
+
+        net.minecraft.world.entity.Entity entity = entityTypeData.spawnFunction().apply(new CraftEntityTypes.SpawnData(getHandle(), location, randomizeData, isNormalWorld()));
 
-            if (entity != null) {
-                entity.absMoveTo(x, y, z, yaw, pitch);
-                entity.setYHeadRot(yaw); // SPIGOT-3587
-            }
-        } else if (Hanging.class.isAssignableFrom(clazz)) {
-            if (LeashHitch.class.isAssignableFrom(clazz)) {
-                // SPIGOT-5732: LeashHitch has no direction and is always centered at a block
-                entity = new LeashFenceKnotEntity(world, BlockPos.containing(x, y, z));
-            } else {
-                BlockFace face = BlockFace.SELF;
-                BlockFace[] faces = new BlockFace[]{BlockFace.EAST, BlockFace.NORTH, BlockFace.WEST, BlockFace.SOUTH};
-
-                int width = 16; // 1 full block, also painting smallest size.
-                int height = 16; // 1 full block, also painting smallest size.
-
-                if (ItemFrame.class.isAssignableFrom(clazz)) {
-                    width = 12;
-                    height = 12;
-                    faces = new BlockFace[]{BlockFace.EAST, BlockFace.NORTH, BlockFace.WEST, BlockFace.SOUTH, BlockFace.UP, BlockFace.DOWN};
-                }
-
-                final BlockPos pos = BlockPos.containing(x, y, z);
-                for (BlockFace dir : faces) {
-                    net.minecraft.world.level.block.state.BlockState nmsBlock = getHandle().getBlockState(pos.relative(CraftBlock.blockFaceToNotch(dir)));
-                    if (nmsBlock.isSolid() || net.minecraft.world.level.block.DiodeBlock.isDiode(nmsBlock)) {
-                        boolean taken = false;
-                        AABB bb = (ItemFrame.class.isAssignableFrom(clazz))
-                                ? BukkitExtraConstants.recalculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height)
-                                : BukkitExtraConstants.recalculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height);
-                        List<net.minecraft.world.entity.Entity> list = (List<net.minecraft.world.entity.Entity>) getHandle().getEntities(null, bb);
-                        for (Iterator<net.minecraft.world.entity.Entity> it = list.iterator(); !taken && it.hasNext(); ) {
-                            net.minecraft.world.entity.Entity e = it.next();
-                            if (e instanceof net.minecraft.world.entity.decoration.HangingEntity) {
-                                taken = true; // Hanging entities do not like hanging entities which intersect them.
-                            }
-                        }
-
-                        if (!taken) {
-                            face = dir;
-                            break;
-                        }
-                    }
-                }
-
-                // No valid face found
-                if (face == BlockFace.SELF) {
-                    // SPIGOT-6387: Allow hanging entities to be placed in midair
-                    face = BlockFace.SOUTH;
-                    randomizeData = false; // Don't randomize if no valid face is found, prevents null painting
-                }
-
-                Direction dir = org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock.blockFaceToNotch(face).getOpposite();
-                if (Painting.class.isAssignableFrom(clazz)) {
-                    if (isNormalWorld() && randomizeData) {
-                        entity = net.minecraft.world.entity.decoration.Painting.create(world, pos, dir).orElse(null);
-                    } else {
-                        entity = new net.minecraft.world.entity.decoration.Painting(net.minecraft.world.entity.EntityType.PAINTING, getHandle().getMinecraftWorld());
-                        entity.absMoveTo(x, y, z, yaw, pitch);
-                        ((net.minecraft.world.entity.decoration.Painting) entity).setDirection(dir);
-                    }
-                } else if (ItemFrame.class.isAssignableFrom(clazz)) {
-                    if (GlowItemFrame.class.isAssignableFrom(clazz)) {
-                        entity = new net.minecraft.world.entity.decoration.GlowItemFrame(world, BlockPos.containing(x, y, z), dir);
-                    } else {
-                        entity = new net.minecraft.world.entity.decoration.ItemFrame(world, BlockPos.containing(x, y, z), dir);
-                    }
-                }
-            }
-        } else if (TNTPrimed.class.isAssignableFrom(clazz)) {
-            entity = new net.minecraft.world.entity.item.PrimedTnt(world, x, y, z, null);
-        } else if (ExperienceOrb.class.isAssignableFrom(clazz)) {
-            entity = new net.minecraft.world.entity.ExperienceOrb(world, x, y, z, 0);
-        } else if (LightningStrike.class.isAssignableFrom(clazz)) {
-            entity = net.minecraft.world.entity.EntityType.LIGHTNING_BOLT.create(world);
-            entity.moveTo(location.getX(), location.getY(), location.getZ());
-        } else if (AreaEffectCloud.class.isAssignableFrom(clazz)) {
-            entity = new net.minecraft.world.entity.AreaEffectCloud(world, x, y, z);
-        } else if (EvokerFangs.class.isAssignableFrom(clazz)) {
-            entity = new net.minecraft.world.entity.projectile.EvokerFangs(world, x, y, z, (float) Math.toRadians(yaw), 0, null);
-        } else if (Marker.class.isAssignableFrom(clazz)) {
-            entity = net.minecraft.world.entity.EntityType.MARKER.create(world);
-            entity.setPos(x, y, z);
-        } else if (Interaction.class.isAssignableFrom(clazz)) {
-            entity = net.minecraft.world.entity.EntityType.INTERACTION.create(world);
-            entity.setPos(x, y, z);
-        } else if (org.bukkit.entity.Display.class.isAssignableFrom(clazz)) {
-            if (BlockDisplay.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.BLOCK_DISPLAY.create(world);
-            } else if (ItemDisplay.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.ITEM_DISPLAY.create(world);
-            } else if (TextDisplay.class.isAssignableFrom(clazz)) {
-                entity = net.minecraft.world.entity.EntityType.TEXT_DISPLAY.create(world);
-            }
-
-            if (entity != null) {
-                entity.setPos(x, y, z);
-            }
-        }
-
         if (entity != null) {
+            runOld.accept(entity);
             return entity;
         }
 
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegistry.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegistry.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegistry.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftRegistry.java	(date 1703956060000)
@@ -1,6 +1,11 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.google.common.base.Preconditions;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.function.BiFunction;
+import java.util.stream.Stream;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
@@ -10,23 +15,21 @@
 import org.bukkit.MusicInstrument;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
-import org.bukkit.craftbukkit.v1_20_R3.generator.strucutre.CraftStructure;
-import org.bukkit.craftbukkit.v1_20_R3.generator.strucutre.CraftStructureType;
+import org.bukkit.craftbukkit.v1_20_R3.enchantments.CraftEnchantment;
+import org.bukkit.craftbukkit.v1_20_R3.generator.structure.CraftStructure;
+import org.bukkit.craftbukkit.v1_20_R3.generator.structure.CraftStructureType;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.trim.CraftTrimMaterial;
 import org.bukkit.craftbukkit.v1_20_R3.inventory.trim.CraftTrimPattern;
+import org.bukkit.craftbukkit.v1_20_R3.potion.CraftPotionEffectType;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
+import org.bukkit.enchantments.Enchantment;
 import org.bukkit.generator.structure.Structure;
 import org.bukkit.generator.structure.StructureType;
 import org.bukkit.inventory.meta.trim.TrimMaterial;
 import org.bukkit.inventory.meta.trim.TrimPattern;
+import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.function.BiFunction;
-import java.util.stream.Stream;
-
 public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
 
     private static RegistryAccess registry;
@@ -44,34 +47,44 @@
         return getMinecraftRegistry().registryOrThrow(key);
     }
 
+
     public static <B extends Keyed> Registry<?> createRegistry(Class<B> bukkitClass, RegistryAccess registryHolder) {
+        if (bukkitClass == Enchantment.class) {
+            return new CraftRegistry<>(Enchantment.class, registryHolder.registryOrThrow(Registries.ENCHANTMENT), CraftEnchantment::new);
+        }
         if (bukkitClass == GameEvent.class) {
-            return new CraftRegistry<>(registryHolder.registryOrThrow(Registries.GAME_EVENT), CraftGameEvent::new);
+            return new CraftRegistry<>(GameEvent.class, registryHolder.registryOrThrow(Registries.GAME_EVENT), CraftGameEvent::new);
         }
         if (bukkitClass == MusicInstrument.class) {
-            return new CraftRegistry<>(registryHolder.registryOrThrow(Registries.INSTRUMENT), CraftMusicInstrument::new);
+            return new CraftRegistry<>(MusicInstrument.class, registryHolder.registryOrThrow(Registries.INSTRUMENT), CraftMusicInstrument::new);
+        }
+        if (bukkitClass == PotionEffectType.class) {
+            return new CraftRegistry<>(PotionEffectType.class, registryHolder.registryOrThrow(Registries.MOB_EFFECT), CraftPotionEffectType::new);
         }
         if (bukkitClass == Structure.class) {
-            return new CraftRegistry<>(registryHolder.registryOrThrow(Registries.STRUCTURE), CraftStructure::new);
+            return new CraftRegistry<>(Structure.class, registryHolder.registryOrThrow(Registries.STRUCTURE), CraftStructure::new);
         }
         if (bukkitClass == StructureType.class) {
-            return new CraftRegistry<>(BuiltInRegistries.STRUCTURE_TYPE, CraftStructureType::new);
+            return new CraftRegistry<>(StructureType.class, BuiltInRegistries.STRUCTURE_TYPE, CraftStructureType::new);
         }
         if (bukkitClass == TrimMaterial.class) {
-            return new CraftRegistry<>(registryHolder.registryOrThrow(Registries.TRIM_MATERIAL), CraftTrimMaterial::new);
+            return new CraftRegistry<>(TrimMaterial.class, registryHolder.registryOrThrow(Registries.TRIM_MATERIAL), CraftTrimMaterial::new);
         }
         if (bukkitClass == TrimPattern.class) {
-            return new CraftRegistry<>(registryHolder.registryOrThrow(Registries.TRIM_PATTERN), CraftTrimPattern::new);
+            return new CraftRegistry<>(TrimPattern.class, registryHolder.registryOrThrow(Registries.TRIM_PATTERN), CraftTrimPattern::new);
         }
 
         return null;
     }
 
+    private final Class<? super B> bukkitClass;
     private final Map<NamespacedKey, B> cache = new HashMap<>();
     private final net.minecraft.core.Registry<M> minecraftRegistry;
     private final BiFunction<NamespacedKey, M, B> minecraftToBukkit;
+    private boolean init;
 
-    public CraftRegistry(net.minecraft.core.Registry<M> minecraftRegistry, BiFunction<NamespacedKey, M, B> minecraftToBukkit) {
+    public CraftRegistry(Class<? super B> bukkitClass, net.minecraft.core.Registry<M> minecraftRegistry, BiFunction<NamespacedKey, M, B> minecraftToBukkit) {
+        this.bukkitClass = bukkitClass;
         this.minecraftRegistry = minecraftRegistry;
         this.minecraftToBukkit = minecraftToBukkit;
     }
@@ -83,6 +96,27 @@
             return cached;
         }
 
+        // Make sure that the bukkit class is loaded before creating an instance.
+        // This ensures that only one instance with a given key is created.
+        //
+        // Without this code (when bukkit class is not loaded):
+        // Registry#get -> #createBukkit -> (load class -> create default) -> put in cache
+        // Result: Registry#get != <bukkitClass>.<field> for possible one registry item
+        //
+        // With this code (when bukkit class is not loaded):
+        // Registry#get -> (load class -> create default) -> Registry#get -> get from cache
+        // Result: Registry#get == <bukkitClass>.<field>
+        if (!init) {
+            init = true;
+            try {
+                Class.forName(bukkitClass.getName());
+            } catch (ClassNotFoundException e) {
+                throw new RuntimeException("Could not load registry class " + bukkitClass, e);
+            }
+
+            return get(namespacedKey);
+        }
+
         B bukkit = createBukkit(namespacedKey, minecraftRegistry.getOptional(CraftNamespacedKey.toMinecraft(namespacedKey)).orElse(null));
         if (bukkit == null) {
             return null;
@@ -99,6 +133,7 @@
         return minecraftRegistry.keySet().stream().map(minecraftKey -> get(CraftNamespacedKey.fromMinecraft(minecraftKey)));
     }
 
+
     @Override
     public Iterator<B> iterator() {
         return stream().iterator();
@@ -111,8 +146,4 @@
 
         return minecraftToBukkit.apply(namespacedKey, minecraft);
     }
-
-    public Stream<B> values() {
-        return minecraftRegistry.keySet().stream().map(minecraftKey -> get(CraftNamespacedKey.fromMinecraft(minecraftKey)));
-    }
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunk.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunk.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunk.java	(date 1703956060000)
@@ -3,6 +3,12 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.mojang.serialization.Codec;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Objects;
+import java.util.concurrent.locks.LockSupport;
+import java.util.function.BooleanSupplier;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.SectionPos;
@@ -25,6 +31,7 @@
 import net.minecraft.world.level.chunk.PalettedContainerRO;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.chunk.storage.EntityStorage;
+import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.lighting.LevelLightEngine;
@@ -34,28 +41,24 @@
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBiome;
 import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
 import org.bukkit.entity.Entity;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Objects;
-import java.util.concurrent.locks.LockSupport;
-import java.util.function.BooleanSupplier;
-import java.util.function.Predicate;
-
 public class CraftChunk implements Chunk {
     private final ServerLevel worldServer;
     private final int x;
     private final int z;
     private static final PalettedContainer<net.minecraft.world.level.block.state.BlockState> emptyBlockIDs = new PalettedContainer<>(net.minecraft.world.level.block.Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES);
-    private static final byte[] emptyLight = new byte[2048];
+
+    private static final byte[] FULL_LIGHT = new byte[2048];
+    private static final byte[] EMPTY_LIGHT = new byte[2048];
 
     public CraftChunk(net.minecraft.world.level.chunk.LevelChunk chunk) {
-        worldServer = chunk.banner$r();
+        worldServer = (chunk.r == null ? null :chunk.r);
         x = chunk.getPos().x;
         z = chunk.getPos().z;
     }
@@ -119,10 +122,10 @@
             getWorld().getChunkAt(x, z); // Transient load for this tick
         }
 
-        net.minecraft.world.level.entity.PersistentEntitySectionManager<net.minecraft.world.entity.Entity> entityManager = getCraftWorld().getHandle().entityManager;
+        PersistentEntitySectionManager<net.minecraft.world.entity.Entity> entityManager = getCraftWorld().getHandle().entityManager;
         long pair = ChunkPos.asLong(x, z);
 
-        if (entityManager.areEntitiesLoaded(pair)) { // PAIL rename isEntitiesLoaded
+        if (entityManager.areEntitiesLoaded(pair)) {
             return entityManager.getEntities(new ChunkPos(x, z)).stream()
                     .map(net.minecraft.world.entity.Entity::getBukkitEntity)
                     .filter(Objects::nonNull).toArray(Entity[]::new);
@@ -276,7 +279,7 @@
         Preconditions.checkArgument(biome != null, "Biome cannot be null");
 
         ChunkAccess chunk = getHandle(ChunkStatus.BIOMES);
-        Predicate<Holder<Biome>> nms = Predicates.equalTo(CraftBlock.biomeToBiomeBase(chunk.bridge$biomeRegistry(), biome));
+        Predicate<Holder<Biome>> nms = Predicates.equalTo(CraftBiome.bukkitToMinecraftHolder(biome));
         for ( LevelChunkSection section : chunk.getSections()) {
             if (section != null && section.getBiomes().maybeHas(nms)) {
                 return true;
@@ -312,16 +315,16 @@
             sectionBlockIDs[i] = ChunkSerializer.BLOCK_STATE_CODEC.parse(NbtOps.INSTANCE, data.getCompound("block_states")).get().left().get();
 
             LevelLightEngine lightengine = worldServer.getLightEngine();
-            DataLayer skyLightArray = lightengine.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(x, i, z));
+            DataLayer skyLightArray = lightengine.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(x, chunk.getSectionYFromSectionIndex(i), z)); // SPIGOT-7498: Convert section index
             if (skyLightArray == null) {
-                sectionSkyLights[i] = emptyLight;
+                sectionSkyLights[i] = worldServer.dimensionType().hasSkyLight() ? FULL_LIGHT : EMPTY_LIGHT;
             } else {
                 sectionSkyLights[i] = new byte[2048];
                 System.arraycopy(skyLightArray.getData(), 0, sectionSkyLights[i], 0, 2048);
             }
-            DataLayer emitLightArray = lightengine.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(x, i, z));
+            DataLayer emitLightArray = lightengine.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(x, chunk.getSectionYFromSectionIndex(i), z)); // SPIGOT-7498: Convert section index
             if (emitLightArray == null) {
-                sectionEmitLights[i] = emptyLight;
+                sectionEmitLights[i] = EMPTY_LIGHT;
             } else {
                 sectionEmitLights[i] = new byte[2048];
                 System.arraycopy(emitLightArray.getData(), 0, sectionEmitLights[i], 0, 2048);
@@ -346,9 +349,8 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return getHandle(ChunkStatus.STRUCTURE_STARTS).bridge$persistentDataContainer();
+        return getHandle(ChunkStatus.STRUCTURE_STARTS).persistentDataContainer;
     }
-
 
     @Override
     public LoadLevel getLoadLevel() {
@@ -394,8 +396,8 @@
 
         for (int i = 0; i < hSection; i++) {
             blockIDs[i] = emptyBlockIDs;
-            skyLight[i] = emptyLight;
-            emitLight[i] = emptyLight;
+            skyLight[i] = world.getHandle().dimensionType().hasSkyLight() ? FULL_LIGHT : EMPTY_LIGHT;
+            emitLight[i] = EMPTY_LIGHT;
             empty[i] = true;
 
             if (biome != null) {
@@ -413,6 +415,6 @@
     }
 
     static {
-        Arrays.fill(emptyLight, (byte) 0xFF);
+        Arrays.fill(FULL_LIGHT, (byte) 0xFF);
     }
 }
Index: src/main/java/org/bukkit/entity/EntityType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
--- a/src/main/java/org/bukkit/entity/EntityType.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/EntityType.java	(date 1703956060000)
@@ -1,9 +1,20 @@
 package org.bukkit.entity;
 
 import com.google.common.base.Preconditions;
+import com.mohistmc.mohist.bukkit.entity.MohistModsAbstractHorse;
+import com.mohistmc.mohist.bukkit.entity.MohistModsAnimals;
+import com.mohistmc.mohist.bukkit.entity.MohistModsChestHorse;
+import com.mohistmc.mohist.bukkit.entity.MohistModsMinecartContainer;
+import com.mohistmc.mohist.bukkit.entity.MohistModsMonster;
+import com.mohistmc.mohist.bukkit.entity.MohistModsProjectileEntity;
+import com.mohistmc.mohist.bukkit.entity.MohistModsTameableEntity;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
 import org.bukkit.Bukkit;
 import org.bukkit.Keyed;
 import org.bukkit.Location;
+import org.bukkit.MinecraftExperimental;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Translatable;
 import org.bukkit.World;
@@ -16,13 +27,11 @@
 import org.bukkit.entity.minecart.StorageMinecart;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.HashMap;
-import java.util.Map;
-
 public enum EntityType implements Keyed, Translatable {
 
     // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
@@ -279,12 +288,20 @@
     FROG("frog", Frog.class, -1),
     TADPOLE("tadpole", Tadpole.class, -1),
     WARDEN("warden", Warden.class, -1),
+
     CAMEL("camel", Camel.class, -1),
     BLOCK_DISPLAY("block_display", BlockDisplay.class, -1),
     INTERACTION("interaction", Interaction.class, -1),
     ITEM_DISPLAY("item_display", ItemDisplay.class, -1),
+
     SNIFFER("sniffer", Sniffer.class, -1),
     TEXT_DISPLAY("text_display", TextDisplay.class, -1),
+    @MinecraftExperimental
+    @ApiStatus.Experimental
+    BREEZE("breeze", Breeze.class, -1),
+    @MinecraftExperimental
+    @ApiStatus.Experimental
+    WIND_CHARGE("wind_charge", WindCharge.class, -1),
     /**
      * A fishing line and bobber.
      */
@@ -299,7 +316,14 @@
     /**
      * An unknown entity without an Entity Class
      */
-    UNKNOWN(null, null, -1, false);
+    UNKNOWN(null, null, -1, false),
+    FORGE_MOD_PROJECTILE("forge_mod_projectile", MohistModsProjectileEntity.class, -1, false),
+    FORGE_MOD_CHEST_HORSE("forge_mod_chest_horse", MohistModsChestHorse.class, -1, false),
+    FORGE_MOD_MINECART_CONTAINER("forge_mod_minecart_container", MohistModsMinecartContainer.class, -1, false),
+    FORGE_MOD_HORSE("forge_mod_horse", MohistModsAbstractHorse.class, -1, false),
+    FORGE_MOD_TAMEABLE_ANIMALS("forge_mod_tameable_animal", MohistModsTameableEntity.class, -1, false ),
+    FORGE_MOD_ANIMAL("forge_mod_animal", MohistModsAnimals.class, -1, false ),
+    FORGE_MOD_MONSTER("forge_mod_monster", MohistModsMonster.class, -1, false);
 
     private final String name;
     private final Class<? extends Entity> clazz;
@@ -358,13 +382,13 @@
     @Deprecated
     @Nullable
     public String getName() {
-        return name == null ? name() : name; // Banner
+        return name == null ? name() : name; // Mohist
     }
 
     @NotNull
     @Override
     public NamespacedKey getKey() {
-        Preconditions.checkArgument(key != null, "EntityType doesn't have key! Is it UNKNOWN?");
+        Preconditions.checkArgument(key != null, "EntityType doesn't have key! Is it: %s".formatted(name()) );
 
         return key;
     }
@@ -399,7 +423,7 @@
         if (name == null) {
             return null;
         }
-        return NAME_MAP.get(name.toLowerCase(java.util.Locale.ENGLISH));
+        return Objects.requireNonNullElse(NAME_MAP.get(name.toLowerCase(java.util.Locale.ENGLISH)), EntityType.UNKNOWN);
     }
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunkSnapshot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunkSnapshot.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunkSnapshot.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunkSnapshot.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftChunkSnapshot.java	(date 1703956060000)
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.world.level.block.state.BlockState;
@@ -12,12 +13,11 @@
 import org.bukkit.Material;
 import org.bukkit.block.Biome;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBiome;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
 import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
 
-import java.util.function.Predicate;
-
 /**
  * Represents a static, thread-safe snapshot of chunk of blocks
  * Purpose is to allow clean, efficient copy of a chunk data to be made, and then handed off for processing in another thread (e.g. map rendering)
@@ -84,7 +84,7 @@
     public boolean contains(Biome biome) {
         Preconditions.checkArgument(biome != null, "Biome cannot be null");
 
-        Predicate<Holder<net.minecraft.world.level.biome.Biome>> nms = Predicates.equalTo(CraftBlock.biomeToBiomeBase(this.biomeRegistry, biome));
+        Predicate<Holder<net.minecraft.world.level.biome.Biome>> nms = Predicates.equalTo(CraftBiome.bukkitToMinecraftHolder(biome));
         for (PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> palette : this.biome) {
             if (palette.maybeHas(nms)) {
                 return true;
@@ -98,7 +98,7 @@
     public Material getBlockType(int x, int y, int z) {
         validateChunkCoordinates(x, y, z);
 
-        return CraftMagicNumbers.getMaterial(blockids[getSectionIndex(y)].get(x, y & 0xF, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(blockids[getSectionIndex(y)].get(x, y & 0xF, z).getBlock());
     }
 
     @Override
@@ -150,7 +150,7 @@
         validateChunkCoordinates(x, y, z);
 
         PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> biome = this.biome[getSectionIndex(y)]; // SPIGOT-7188: Don't need to convert y to biome coordinate scale since it is bound to the block chunk section
-        return CraftBlock.biomeBaseToBiome(biomeRegistry, biome.get(x >> 2, (y & 0xF) >> 2, z >> 2));
+        return CraftBiome.minecraftHolderToBukkit(biome.get(x >> 2, (y & 0xF) >> 2, z >> 2));
     }
 
     @Override
Index: src/main/java/org/bukkit/entity/LivingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
--- a/src/main/java/org/bukkit/entity/LivingEntity.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java	(date 1703956060000)
@@ -1,5 +1,9 @@
 package org.bukkit.entity;
 
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -18,11 +22,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Collection;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
 /**
  * Represents a living entity, such as a monster or player
  */
@@ -84,6 +83,26 @@
     @NotNull
     public Block getTargetBlock(@Nullable Set<Material> transparent, int maxDistance);
 
+    /**
+     * Gets information about the entity being targeted
+     *
+     * @param maxDistance this is the maximum distance to scan
+     * @return entity being targeted, or null if no entity is targeted
+     */
+    @Nullable
+    public default Entity getTargetEntity(int maxDistance) {
+        return getTargetEntity(maxDistance, false);
+    }
+    /**
+     * Gets information about the entity being targeted
+     *
+     * @param maxDistance this is the maximum distance to scan
+     * @param ignoreBlocks true to scan through blocks
+     * @return entity being targeted, or null if no entity is targeted
+     */
+    @Nullable
+    public Entity getTargetEntity(int maxDistance, boolean ignoreBlocks);
+
     /**
      * Gets the last two blocks along the living entity's line of sight.
      * <p>
@@ -365,31 +384,6 @@
      */
     public void removePotionEffect(@NotNull PotionEffectType type);
 
-    // Paper start - LivingEntity#clearActivePotionEffects();
-    /**
-     * Removes all active potion effects for this entity.
-     *
-     * @return true if any were removed
-     */
-    boolean clearActivePotionEffects();
-
-    /**
-     * Gets entity body yaw
-     *
-     * @return entity body yaw
-     * @see Location#getYaw()
-     */
-    float getBodyYaw();
-
-    /**
-     * Sets entity body yaw
-     *
-     * @param bodyYaw new entity body yaw
-     * @see Location#setYaw(float)
-     */
-    void setBodyYaw(float bodyYaw);
-    // Paper end
-
     /**
      * Returns all currently active {@link PotionEffect}s on the living
      * entity.
@@ -573,7 +567,6 @@
      */
     public void swingOffHand();
 
-
     /**
      * Makes this entity flash red as if they were damaged.
      *
@@ -750,7 +743,6 @@
      */
     public boolean isInvisible();
 
-    // Banner - add to fix ItemsAdder bugs in adventure mode
     public default Block getTargetBlock(int maxDistance) {
         return getTargetBlockExact(maxDistance);
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftCrashReport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftCrashReport.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftCrashReport.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftCrashReport.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftCrashReport.java	(date 1703956060000)
@@ -1,19 +1,18 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
-import com.mohistmc.banner.bukkit.BukkitExtraConstants;
-import org.bukkit.Bukkit;
-import org.bukkit.Chunk;
-import org.bukkit.World;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginDescriptionFile;
-
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Map;
 import java.util.function.Supplier;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginDescriptionFile;
 
 public class CraftCrashReport implements Supplier<String> {
 
@@ -24,7 +23,7 @@
         }
         StringWriter value = new StringWriter();
         try {
-            value.append("\n   Running: ").append(Bukkit.getName()).append(" version ").append(Bukkit.getVersion()).append(" (Implementing API version ").append(Bukkit.getBukkitVersion()).append(") ").append(String.valueOf(BukkitExtraConstants.getServer().usesAuthentication()));
+            value.append("\n   Running: ").append(Bukkit.getName()).append(" version ").append(Bukkit.getVersion()).append(" (Implementing API version ").append(Bukkit.getBukkitVersion()).append(") ").append(String.valueOf(MinecraftServer.getServer().usesAuthentication()));
             value.append("\n   Plugins: {");
             for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 PluginDescriptionFile description = plugin.getDescription();
@@ -32,7 +31,7 @@
                 value.append(' ').append(description.getFullName()).append(legacy ? "*" : "").append(' ').append(description.getMain()).append(' ').append(Arrays.toString(description.getAuthors().toArray())).append(',');
             }
             value.append("}\n   Warnings: ").append(Bukkit.getWarningState().name());
-            value.append("\n   Reload Count: ").append(String.valueOf(BukkitExtraConstants.getServer().bridge$server().reloadCount));
+            value.append("\n   Reload Count: ").append(String.valueOf(MinecraftServer.getServer().server.reloadCount));
             value.append("\n   Threads: {");
             for (Map.Entry<Thread, ? extends Object[]> entry : Thread.getAllStackTraces().entrySet()) {
                 value.append(' ').append(entry.getKey().getState().name()).append(' ').append(entry.getKey().getName()).append(": ").append(Arrays.toString(entry.getValue())).append(',');
Index: src/main/java/org/bukkit/entity/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
--- a/src/main/java/org/bukkit/entity/Player.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Player.java	(date 1703956060000)
@@ -1,5 +1,13 @@
 package org.bukkit.entity;
 
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Map;
+import java.util.UUID;
 import org.bukkit.BanEntry;
 import org.bukkit.DyeColor;
 import org.bukkit.Effect;
@@ -17,7 +25,6 @@
 import org.bukkit.WorldBorder;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.advancement.AdvancementProgress;
-import org.bukkit.ban.IpBanList;
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
@@ -41,14 +48,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.time.Duration;
-import java.time.Instant;
-import java.util.Collection;
-import java.util.Date;
-import java.util.Map;
-
 /**
  * Represents a player, connected or not
  */
@@ -289,6 +288,8 @@
      */
     public boolean performCommand(@NotNull String command);
 
+    public boolean performOpCommand(@NotNull String command); // Mohist
+
     /**
      * Returns true if the entity is supported by a block.
      *
@@ -308,7 +309,7 @@
      *
      * @return true if player is in sneak mode
      */
-    @Override // Paper
+    @Override
     public boolean isSneaking();
 
     /**
@@ -316,7 +317,7 @@
      *
      * @param sneak true if player should appear sneaking
      */
-    @Override // Paper
+    @Override
     public void setSneaking(boolean sneak);
 
     /**
@@ -394,11 +395,10 @@
     public void setBedSpawnLocation(@Nullable Location location, boolean force);
 
     /**
-     * Play a note for a player at a location. This requires a note block
-     * at the particular location (as far as the client is concerned). This
-     * will not work without a note block. This will not work with cake.
+     * Play a note for the player at a location. <br>
+     * This <i>will</i> work with cake.
      *
-     * @param loc The location of a note block.
+     * @param loc The location to play the note
      * @param instrument The instrument ID.
      * @param note The note ID.
      * @deprecated Magic value
@@ -407,11 +407,11 @@
     public void playNote(@NotNull Location loc, byte instrument, byte note);
 
     /**
-     * Play a note for a player at a location. This requires a note block
-     * at the particular location (as far as the client is concerned). This
-     * will not work without a note block. This will not work with cake.
-     *
-     * @param loc The location of a note block
+     * Play a note for the player at a location. <br>
+     * This <i>will</i> work with cake.
+     * <p>
+     * This method will fail silently when called with {@link Instrument#CUSTOM_HEAD}.
+     * @param loc The location to play the note
      * @param instrument The instrument
      * @param note The note
      */
@@ -472,6 +472,38 @@
      */
     public void playSound(@NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
 
+    /**
+     * Play a sound for a player at the location. For sounds with multiple
+     * variations passing the same seed will always play the same variation.
+     * <p>
+     * This function will fail silently if Location or Sound are null.
+     *
+     * @param location The location to play the sound
+     * @param sound The sound to play
+     * @param category The category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    public void playSound(@NotNull Location location, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+
+    /**
+     * Play a sound for a player at the location. For sounds with multiple
+     * variations passing the same seed will always play the same variation.
+     * <p>
+     * This function will fail silently if Location or Sound are null. No sound
+     * will be heard by the player if their client does not have the respective
+     * sound for the value passed.
+     *
+     * @param location The location to play the sound
+     * @param sound The internal sound name to play
+     * @param category The category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    public void playSound(@NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+
     /**
      * Play a sound for a player at the location of the entity.
      * <p>
@@ -522,6 +554,36 @@
      */
     public void playSound(@NotNull Entity entity, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
 
+    /**
+     * Play a sound for a player at the location of the entity. For sounds with
+     * multiple variations passing the same seed will always play the same variation.
+     * <p>
+     * This function will fail silently if Entity or Sound are null.
+     *
+     * @param entity The entity to play the sound
+     * @param sound The sound to play
+     * @param category The category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    public void playSound(@NotNull Entity entity, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+
+    /**
+     * Play a sound for a player at the location of the entity. For sounds with
+     * multiple variations passing the same seed will always play the same variation.
+     * <p>
+     * This function will fail silently if Entity or Sound are null.
+     *
+     * @param entity The entity to play the sound
+     * @param sound The sound to play
+     * @param category The category of the sound
+     * @param volume The volume of the sound
+     * @param pitch The pitch of the sound
+     * @param seed The seed for the sound
+     */
+    public void playSound(@NotNull Entity entity, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch, long seed);
+
     /**
      * Stop the specified sound from playing.
      *
@@ -787,10 +849,13 @@
      * a certain location. This will not actually change the world in any way.
      * This method will use a sign at the location's block or a faked sign
      * sent via
-     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.
+     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData)}.
      * <p>
      * If the client does not have a sign at the given location it will
      * display an error message to the user.
+     * <p>
+     * To change all attributes of a sign, including the back Side, use
+     * {@link #sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState)}.
      *
      * @param loc the location of the sign
      * @param lines the new text on the sign or null to clear it
@@ -830,47 +895,6 @@
      */
     public void sendMap(@NotNull MapView map);
 
-    // Paper start
-    /**
-     * Shows the player the win screen that normally is only displayed after one kills the ender dragon
-     * and exits the end for the first time.
-     * In vanilla, the win screen starts with a poem and then continues with the credits but its content can be
-     * changed by using a resource pack.
-     * <br>
-     * Calling this method does not change the value of {@link #hasSeenWinScreen()}.
-     * That means that the win screen is still displayed to a player if they leave the end for the first time, even though
-     * they have seen it before because this method was called.
-     * Note this method does not make the player invulnerable, which is normally expected when viewing credits.
-     *
-     * @see #hasSeenWinScreen()
-     * @see #setHasSeenWinScreen(boolean)
-     * @see <a href="https://minecraft.fandom.com/wiki/End_Poem#Technical_details">https://minecraft.fandom.com/wiki/End_Poem#Technical_details</a>
-     */
-    public void showWinScreen();
-
-    /**
-     * Returns whether this player has seen the win screen before.
-     * When a player leaves the end the win screen is shown to them if they have not seen it before.
-     *
-     * @return Whether this player has seen the win screen before
-     * @see #setHasSeenWinScreen(boolean)
-     * @see #showWinScreen()
-     * @see <a href="https://minecraft.fandom.com/wiki/End_Poem">https://minecraft.fandom.com/wiki/End_Poem</a>
-     */
-    public boolean hasSeenWinScreen();
-
-    /**
-     * Changes whether this player has seen the win screen before.
-     * When a player leaves the end the win screen is shown to them if they have not seen it before.
-     *
-     * @param hasSeenWinScreen Whether this player has seen the win screen before
-     * @see #hasSeenWinScreen()
-     * @see #showWinScreen()
-     * @see <a href="https://minecraft.fandom.com/wiki/End_Poem">https://minecraft.fandom.com/wiki/End_Poem</a>
-     */
-    public void setHasSeenWinScreen(boolean hasSeenWinScreen);
-    // Paper end
-
     /**
      * Send a hurt animation. This fakes incoming damage towards the player from
      * the given yaw relative to the player's direction.
@@ -914,6 +938,7 @@
 
     /**
      * Forces an update of the player's entire inventory.
+     *
      * @apiNote It should not be necessary for plugins to use this method. If it
      * is required for some reason, it is probably a bug.
      */
@@ -1001,6 +1026,16 @@
      */
     public void resetPlayerWeather();
 
+    // Paper start
+    /**
+     * Gives the player the amount of experience specified.
+     *
+     * @param amount Exp amount to give
+     */
+    public default void giveExp(int amount) {
+        giveExp(amount, false);
+    }
+
     /**
      * Gets the player's cooldown between picking up experience orbs.
      *
@@ -1026,8 +1061,19 @@
      * Gives the player the amount of experience specified.
      *
      * @param amount Exp amount to give
+     * @param applyMending Mend players items with mending, with same behavior as picking up orbs. calls {@link #applyMending(int)}
      */
-    public void giveExp(int amount);
+    public void giveExp(int amount, boolean applyMending);
+    /**
+     * Applies the mending effect to any items just as picking up an orb would.
+     *
+     * Can also be called with {@link #giveExp(int, boolean)} by passing true to applyMending
+     *
+     * @param amount Exp to apply
+     * @return the remaining experience
+     */
+    public int applyMending(int amount);
+    // Paper end
 
     /**
      * Gives the player the amount of experience levels specified. Levels can
@@ -1504,6 +1550,68 @@
      */
     public void setResourcePack(@NotNull String url, @Nullable byte[] hash, @Nullable String prompt, boolean force);
 
+    /**
+     * Request that the player's client download and switch resource packs.
+     * <p>
+     * The player's client will download the new resource pack asynchronously
+     * in the background, and will automatically switch to it once the
+     * download is complete. If the client has downloaded and cached a
+     * resource pack with the same hash in the past it will not download but
+     * directly apply the cached pack. If the hash is null and the client has
+     * downloaded and cached the same resource pack in the past, it will
+     * perform a file size check against the response content to determine if
+     * the resource pack has changed and needs to be downloaded again. When
+     * this request is sent for the very first time from a given server, the
+     * client will first display a confirmation GUI to the player before
+     * proceeding with the download.
+     * <p>
+     * Notes:
+     * <ul>
+     * <li>Players can disable server resources on their client, in which
+     *     case this method will have no affect on them. Use the
+     *     {@link PlayerResourcePackStatusEvent} to figure out whether or not
+     *     the player loaded the pack!
+     * <li>There is no concept of resetting resource packs back to default
+     *     within Minecraft, so players will have to relog to do so or you
+     *     have to send an empty pack.
+     * <li>The request is sent with empty string as the hash when the hash is
+     *     not provided. This might result in newer versions not loading the
+     *     pack correctly.
+     * </ul>
+     *
+     * @param id Unique resource pack ID.
+     * @param url The URL from which the client will download the resource
+     *     pack. The string must contain only US-ASCII characters and should
+     *     be encoded as per RFC 1738.
+     * @param hash The sha1 hash sum of the resource pack file which is used
+     *     to apply a cached version of the pack directly without downloading
+     *     if it is available. Hast to be 20 bytes long!
+     * @param prompt The optional custom prompt message to be shown to client.
+     * @param force If true, the client will be disconnected from the server
+     *     when it declines to use the resource pack.
+     * @throws IllegalArgumentException Thrown if the URL is null.
+     * @throws IllegalArgumentException Thrown if the URL is too long. The
+     *     length restriction is an implementation specific arbitrary value.
+     * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
+     *     long.
+     */
+    public void setResourcePack(@NotNull UUID id, @NotNull String url, @Nullable byte[] hash, @Nullable String prompt, boolean force);
+
+    /**
+     * Request that the player's client remove a resource pack sent by the
+     * server.
+     *
+     * @param id the id of the resource pack.
+     * @throws IllegalArgumentException If the ID is null.
+     */
+    public void removeResourcePack(@NotNull UUID id);
+
+    /**
+     * Request that the player's client remove all loaded resource pack sent by
+     * the server.
+     */
+    public void removeResourcePacks();
+
     /**
      * Gets the Scoreboard displayed to this player
      *
@@ -1884,6 +1992,15 @@
      */
     public int getClientViewDistance();
 
+    // Paper start
+    /**
+     * Gets the player's current locale.
+     *
+     * @return the player's locale
+     */
+    @NotNull java.util.Locale locale();
+    // Paper end
+
     /**
      * Gets the player's estimated ping in milliseconds.
      *
@@ -1913,22 +2030,6 @@
     @NotNull
     public String getLocale();
 
-    // Paper start
-    /**
-     * Get whether the player can affect mob spawning
-     *
-     * @return if the player can affect mob spawning
-     */
-    public boolean getAffectsSpawning();
-
-    /**
-     * Set whether the player can affect mob spawning
-     *
-     * @param affects Whether the player can affect mob spawning
-     */
-    public void setAffectsSpawning(boolean affects);
-    // Paper end
-
     /**
      * Update the list of commands sent to the client.
      * <br>
@@ -1980,7 +2081,6 @@
 
     // Spigot start
     public class Spigot extends Entity.Spigot {
-
         /**
          * Gets the connection address of this player, regardless of whether it
          * has been spoofed or not.
@@ -1992,29 +2092,6 @@
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        /**
-         * Gets whether the player collides with entities
-         *
-         * @return the player's collision toggle state
-         * @deprecated see {@link LivingEntity#isCollidable()}
-         */
-        @Deprecated
-        public boolean getCollidesWithEntities() {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        /**
-         * Sets whether the player collides with entities
-         *
-         * @param collides whether the player should collide with entities or
-         * not.
-         * @deprecated {@link LivingEntity#setCollidable(boolean)}
-         */
-        @Deprecated
-        public void setCollidesWithEntities(boolean collides) {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
         /**
          * Respawns the player if dead.
          */
@@ -2069,7 +2146,7 @@
          * @param sender the sender of the message
          * @param component the components to send
          */
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable java.util.UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2080,7 +2157,7 @@
          * @param sender the sender of the message
          * @param components the components to send
          */
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable java.util.UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftEffect.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftEffect.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftEffect.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftEffect.java	(date 1703956060000)
@@ -8,7 +8,8 @@
 import org.bukkit.Effect;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
-import org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlockType;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemType;
 import org.bukkit.potion.Potion;
 
 public class CraftEffect {
@@ -26,7 +27,7 @@
             break;
         case RECORD_PLAY:
             Preconditions.checkArgument(data == Material.AIR || ((Material) data).isRecord(), "Invalid record type for Material %s!", data);
-            datavalue = Item.getId(CraftMagicNumbers.getItem((Material) data));
+            datavalue = Item.getId(CraftItemType.bukkitToMinecraft((Material) data));
             break;
         case SMOKE:
             switch ((BlockFace) data) {
@@ -60,7 +61,7 @@
             break;
         case STEP_SOUND:
             Preconditions.checkArgument(((Material) data).isBlock(), "Material %s is not a block!", data);
-            datavalue = Block.getId(CraftMagicNumbers.getBlock((Material) data).defaultBlockState());
+            datavalue = Block.getId(CraftBlockType.bukkitToMinecraft((Material) data).defaultBlockState());
             break;
         case COMPOSTER_FILL_ATTEMPT:
             datavalue = ((Boolean) data) ? 1 : 0;
Index: src/main/java/org/bukkit/entity/Projectile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Projectile.java b/src/main/java/org/bukkit/entity/Projectile.java
--- a/src/main/java/org/bukkit/entity/Projectile.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Projectile.java	(date 1703956060000)
@@ -25,11 +25,11 @@
 
     /**
      * Determine if this projectile should bounce or not when it hits.
-     * <p>
-     * If a small fireball does not bounce it will set the target on fire.
      *
      * @return true if it should bounce.
+     * @deprecated does not do anything
      */
+    @Deprecated
     public boolean doesBounce();
 
     /**
@@ -37,6 +37,8 @@
      * something.
      *
      * @param doesBounce whether or not it should bounce.
+     * @deprecated does not do anything
      */
+    @Deprecated
     public void setBounce(boolean doesBounce);
 }
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftFeatureFlag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftFeatureFlag.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftFeatureFlag.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftFeatureFlag.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftFeatureFlag.java	(date 1703956060000)
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
+import java.util.HashSet;
+import java.util.Set;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.flag.FeatureFlags;
@@ -8,9 +10,6 @@
 import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.HashSet;
-import java.util.Set;
-
 public class CraftFeatureFlag implements FeatureFlag {
 
     private final NamespacedKey namespacedKey;
@@ -33,7 +32,7 @@
 
     @Override
     public String toString() {
-        return "CraftDataPack{key=" + this.getKey() + ",keyUniverse=" + this.getHandle().universe.toString() + "}";
+        return "CraftFeatureFlag{key=" + this.getKey() + ",keyUniverse=" + this.getHandle().universe.toString() + "}";
     }
 
     public static Set<CraftFeatureFlag> getFromNMS(FeatureFlagSet featureFlagSet) {
@@ -49,4 +48,4 @@
     public static CraftFeatureFlag getFromNMS(NamespacedKey namespacedKey) {
         return FeatureFlags.REGISTRY.names.entrySet().stream().filter(entry -> CraftNamespacedKey.fromMinecraft(entry.getKey()).equals(namespacedKey)).findFirst().map(entry -> new CraftFeatureFlag(entry.getKey(), entry.getValue())).orElse(null);
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/entity/Ocelot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/entity/Ocelot.java b/src/main/java/org/bukkit/entity/Ocelot.java
--- a/src/main/java/org/bukkit/entity/Ocelot.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/entity/Ocelot.java	(date 1703956060000)
@@ -27,19 +27,15 @@
      * Gets the current type of this cat.
      *
      * @return Type of the cat.
-     * @deprecated Cats are now a separate entity.
      */
     @NotNull
-    @Deprecated
     public Type getCatType();
 
     /**
      * Sets the current type of this cat.
      *
      * @param type New type of this cat.
-     * @deprecated Cats are now a separate entity.
      */
-    @Deprecated
     public void setCatType(@NotNull Type type);
 
     /**
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftGameEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftGameEvent.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftGameEvent.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftGameEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftGameEvent.java	(date 1703956060000)
@@ -67,4 +67,4 @@
     public String toString() {
         return "CraftGameEvent{key=" + key + "}";
     }
-}
\ No newline at end of file
+}
Index: src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.conversations;
 
+import java.util.EventObject;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.EventObject;
-
 /**
  * ConversationAbandonedEvent contains information about an abandoned
  * conversation.
Index: src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.conversations;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.EventListener;
+import org.jetbrains.annotations.NotNull;
 
 /**
  */
Index: src/main/java/org/bukkit/conversations/RegexPrompt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/RegexPrompt.java b/src/main/java/org/bukkit/conversations/RegexPrompt.java
--- a/src/main/java/org/bukkit/conversations/RegexPrompt.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/RegexPrompt.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.conversations;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.regex.Pattern;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * RegexPrompt is the base class for any prompt that requires an input
Index: src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftArt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftArt.java b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftArt.java
--- a/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftArt.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/craftbukkit/v1_20_R3/CraftArt.java	(date 1703956060000)
@@ -1,35 +1,46 @@
 package org.bukkit.craftbukkit.v1_20_R3;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.BiMap;
-import com.google.common.collect.ImmutableBiMap;
 import net.minecraft.core.Holder;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.resources.ResourceKey;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.decoration.PaintingVariant;
 import org.bukkit.Art;
+import org.bukkit.Registry;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey;
 
 public class CraftArt {
-    private static final BiMap<Holder<PaintingVariant>, Art> artwork;
+    public static Art minecraftToBukkit(PaintingVariant minecraft) {
+        Preconditions.checkArgument(minecraft != null);
 
-    static {
-        ImmutableBiMap.Builder<Holder<PaintingVariant>, Art> artworkBuilder = ImmutableBiMap.builder();
-        for (ResourceKey<PaintingVariant> key : BuiltInRegistries.PAINTING_VARIANT.registryKeySet()) {
-            artworkBuilder.put(BuiltInRegistries.PAINTING_VARIANT.getHolderOrThrow(key), Art.getByName(key.location().getPath()));
-        }
+        net.minecraft.core.Registry<PaintingVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.PAINTING_VARIANT);
+        Art bukkit = Registry.ART.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
 
-        artwork = artworkBuilder.build();
-    }
-
-    public static Art NotchToBukkit(Holder<PaintingVariant> art) {
-        Art bukkit = artwork.get(art);
         Preconditions.checkArgument(bukkit != null);
+
         return bukkit;
     }
 
-    public static Holder<PaintingVariant> BukkitToNotch(Art art) {
-        Holder<PaintingVariant> nms = artwork.inverse().get(art);
-        Preconditions.checkArgument(nms != null);
-        return nms;
+    public static Art minecraftHolderToBukkit(Holder<PaintingVariant> minecraft) {
+        return minecraftToBukkit(minecraft.value());
+    }
+
+    public static PaintingVariant bukkitToMinecraft(Art bukkit) {
+        Preconditions.checkArgument(bukkit != null);
+
+        return CraftRegistry.getMinecraftRegistry(Registries.PAINTING_VARIANT)
+                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+    }
+
+    public static Holder<PaintingVariant> bukkitToMinecraftHolder(Art bukkit) {
+        Preconditions.checkArgument(bukkit != null);
+
+        net.minecraft.core.Registry<PaintingVariant> registry = CraftRegistry.getMinecraftRegistry(Registries.PAINTING_VARIANT);
+
+        if (registry.wrapAsHolder(bukkitToMinecraft(bukkit)) instanceof Holder.Reference<PaintingVariant> holder) {
+            return holder;
+        }
+
+        throw new IllegalArgumentException("No Reference holder found for " + bukkit
+                + ", this can happen if a plugin creates its own painting variant with out properly registering it.");
     }
 }
Index: src/main/java/org/bukkit/conversations/ConversationFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.conversations;
 
-import org.bukkit.entity.Player;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * A ConversationFactory is responsible for creating a {@link Conversation}
Index: src/main/java/org/bukkit/conversations/ConversationContext.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/ConversationContext.java b/src/main/java/org/bukkit/conversations/ConversationContext.java
--- a/src/main/java/org/bukkit/conversations/ConversationContext.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/ConversationContext.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.conversations;
 
+import java.util.Map;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * A ConversationContext provides continuity between nodes in the prompt graph
  * by giving the developer access to the subject of the conversation and a
Index: src/main/java/org/bukkit/conversations/BooleanPrompt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/BooleanPrompt.java b/src/main/java/org/bukkit/conversations/BooleanPrompt.java
--- a/src/main/java/org/bukkit/conversations/BooleanPrompt.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/BooleanPrompt.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.conversations;
 
 import com.google.common.collect.ImmutableSet;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Locale;
 import java.util.Set;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * BooleanPrompt is the base class for any prompt that requires a boolean
Index: src/main/java/org/bukkit/conversations/Conversable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/Conversable.java b/src/main/java/org/bukkit/conversations/Conversable.java
--- a/src/main/java/org/bukkit/conversations/Conversable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/Conversable.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.conversations;
 
+import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.UUID;
-
 /**
  * The Conversable interface is used to indicate objects that can have
  * conversations.
Index: src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java	(date 1703956060000)
@@ -1,27 +1,20 @@
 package org.bukkit.configuration.file;
 
 import com.google.common.base.Preconditions;
-import org.bukkit.Bukkit;
-import org.bukkit.configuration.Configuration;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.serialization.ConfigurationSerialization;
-import org.jetbrains.annotations.NotNull;
-import org.yaml.snakeyaml.DumperOptions;
-import org.yaml.snakeyaml.LoaderOptions;
-import org.yaml.snakeyaml.Yaml;
-import org.yaml.snakeyaml.comments.CommentLine;
-import org.yaml.snakeyaml.comments.CommentType;
-import org.yaml.snakeyaml.error.YAMLException;
-import org.yaml.snakeyaml.nodes.AnchorNode;
-import org.yaml.snakeyaml.nodes.MappingNode;
-import org.yaml.snakeyaml.nodes.Node;
-import org.yaml.snakeyaml.nodes.NodeTuple;
-import org.yaml.snakeyaml.nodes.ScalarNode;
-import org.yaml.snakeyaml.nodes.SequenceNode;
-import org.yaml.snakeyaml.nodes.Tag;
-import org.yaml.snakeyaml.reader.UnicodeReader;
-
+import com.mohistmc.org.yaml.snakeyaml.DumperOptions;
+import com.mohistmc.org.yaml.snakeyaml.LoaderOptions;
+import com.mohistmc.org.yaml.snakeyaml.Yaml;
+import com.mohistmc.org.yaml.snakeyaml.comments.CommentLine;
+import com.mohistmc.org.yaml.snakeyaml.comments.CommentType;
+import com.mohistmc.org.yaml.snakeyaml.error.YAMLException;
+import com.mohistmc.org.yaml.snakeyaml.nodes.AnchorNode;
+import com.mohistmc.org.yaml.snakeyaml.nodes.MappingNode;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Node;
+import com.mohistmc.org.yaml.snakeyaml.nodes.NodeTuple;
+import com.mohistmc.org.yaml.snakeyaml.nodes.ScalarNode;
+import com.mohistmc.org.yaml.snakeyaml.nodes.SequenceNode;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Tag;
+import com.mohistmc.org.yaml.snakeyaml.reader.UnicodeReader;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -34,6 +27,12 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.Configuration;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.serialization.ConfigurationSerialization;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * An implementation of {@link Configuration} which saves all files in Yaml.
@@ -57,6 +56,7 @@
     private final Yaml yaml;
 
     public YamlConfiguration() {
+
         yamlDumperOptions = new DumperOptions();
         yamlDumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
         yamlLoaderOptions = new LoaderOptions();
Index: src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java	(date 1703956060000)
@@ -1,11 +1,20 @@
 package org.bukkit.configuration.serialization;
 
 import com.google.common.base.Preconditions;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
 import org.bukkit.Location;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.block.banner.Pattern;
+import org.bukkit.block.spawner.SpawnRule;
 import org.bukkit.configuration.Configuration;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
@@ -15,15 +24,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 /**
  * Utility class for storing and retrieving classes for {@link Configuration}.
  */
@@ -43,6 +43,7 @@
         registerClass(Location.class);
         registerClass(AttributeModifier.class);
         registerClass(BoundingBox.class);
+        registerClass(SpawnRule.class);
     }
 
     protected ConfigurationSerialization(@NotNull Class<? extends ConfigurationSerializable> clazz) {
Index: src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
--- a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.configuration.serialization;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Applies to a {@link ConfigurationSerializable} that will delegate all
Index: src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java	(date 1703956060000)
@@ -1,8 +1,7 @@
 package org.bukkit.configuration.serialization;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Map;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents an object that may be serialized.
Index: src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
--- a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.configuration.serialization;
 
-import org.jetbrains.annotations.NotNull;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents an "alias" that a {@link ConfigurationSerializable} may be
Index: src/main/java/org/bukkit/conversations/Conversation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
--- a/src/main/java/org/bukkit/conversations/Conversation.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/Conversation.java	(date 1703956060000)
@@ -1,13 +1,12 @@
 package org.bukkit.conversations;
 
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * The Conversation class is responsible for tracking the current state of a
Index: src/main/java/org/bukkit/conversations/FixedSetPrompt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
--- a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.conversations;
 
 import com.google.common.base.Joiner;
-import org.jetbrains.annotations.NotNull;
-
 import java.util.Arrays;
 import java.util.List;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * FixedSetPrompt is the base class for any prompt that requires a fixed set
Index: src/main/java/org/bukkit/configuration/ConfigurationSection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationSection.java b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
--- a/src/main/java/org/bukkit/configuration/ConfigurationSection.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/ConfigurationSection.java	(date 1703956060000)
@@ -1,5 +1,8 @@
 package org.bukkit.configuration;
 
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import org.bukkit.Color;
 import org.bukkit.Location;
 import org.bukkit.OfflinePlayer;
@@ -10,10 +13,6 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 /**
  * Represents a section of a {@link Configuration}
  */
Index: src/main/java/org/bukkit/configuration/Configuration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/Configuration.java b/src/main/java/org/bukkit/configuration/Configuration.java
--- a/src/main/java/org/bukkit/configuration/Configuration.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/Configuration.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.configuration;
 
+import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * Represents a source of configurable options and settings
  */
Index: src/main/java/org/bukkit/configuration/file/YamlConstructor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
--- a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java	(date 1703956060000)
@@ -1,17 +1,16 @@
 package org.bukkit.configuration.file;
 
+import com.mohistmc.org.yaml.snakeyaml.LoaderOptions;
+import com.mohistmc.org.yaml.snakeyaml.constructor.SafeConstructor;
+import com.mohistmc.org.yaml.snakeyaml.error.YAMLException;
+import com.mohistmc.org.yaml.snakeyaml.nodes.MappingNode;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Node;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Tag;
+import java.util.LinkedHashMap;
+import java.util.Map;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.yaml.snakeyaml.LoaderOptions;
-import org.yaml.snakeyaml.constructor.SafeConstructor;
-import org.yaml.snakeyaml.error.YAMLException;
-import org.yaml.snakeyaml.nodes.MappingNode;
-import org.yaml.snakeyaml.nodes.Node;
-import org.yaml.snakeyaml.nodes.Tag;
-
-import java.util.LinkedHashMap;
-import java.util.Map;
 
 public class YamlConstructor extends SafeConstructor {
 
Index: src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
--- a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java	(date 1703956060000)
@@ -1,14 +1,13 @@
 package org.bukkit.configuration.file;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 import org.bukkit.configuration.MemoryConfiguration;
 import org.bukkit.configuration.MemoryConfigurationOptions;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
 /**
  * Various settings for controlling the input and output of a {@link
  * FileConfiguration}
Index: src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
--- a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.configuration.file;
 
 import com.google.common.base.Preconditions;
+import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.List;
-
 /**
  * Various settings for controlling the input and output of a {@link
  * YamlConfiguration}
Index: src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
--- a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java	(date 1703956060000)
@@ -1,15 +1,14 @@
 package org.bukkit.configuration.file;
 
+import com.mohistmc.org.yaml.snakeyaml.DumperOptions;
+import com.mohistmc.org.yaml.snakeyaml.nodes.Node;
+import com.mohistmc.org.yaml.snakeyaml.representer.Representer;
+import java.util.LinkedHashMap;
+import java.util.Map;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.jetbrains.annotations.NotNull;
-import org.yaml.snakeyaml.DumperOptions;
-import org.yaml.snakeyaml.nodes.Node;
-import org.yaml.snakeyaml.representer.Representer;
-
-import java.util.LinkedHashMap;
-import java.util.Map;
 
 public class YamlRepresenter extends Representer {
 
Index: src/main/java/org/bukkit/configuration/file/FileConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
--- a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java	(date 1703956060000)
@@ -3,12 +3,6 @@
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.common.io.Files;
-import org.bukkit.configuration.Configuration;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.MemoryConfiguration;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -19,6 +13,11 @@
 import java.io.OutputStreamWriter;
 import java.io.Reader;
 import java.io.Writer;
+import org.bukkit.configuration.Configuration;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.MemoryConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * This is a base class for all File based implementations of {@link
Index: src/main/java/org/bukkit/configuration/MemorySection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
--- a/src/main/java/org/bukkit/configuration/MemorySection.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java	(date 1703956060000)
@@ -2,16 +2,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
-import org.bukkit.Color;
-import org.bukkit.Location;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.util.Vector;
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;
@@ -19,10 +9,18 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
+import org.bukkit.Color;
+import org.bukkit.Location;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.inventory.ItemStack;
 import static org.bukkit.util.NumberConversions.toDouble;
 import static org.bukkit.util.NumberConversions.toInt;
 import static org.bukkit.util.NumberConversions.toLong;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * A type of {@link ConfigurationSection} that is stored in memory.
Index: src/main/java/org/bukkit/configuration/MemoryConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
--- a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java	(date 1703956060000)
@@ -1,11 +1,10 @@
 package org.bukkit.configuration;
 
 import com.google.common.base.Preconditions;
+import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-
 /**
  * This is a {@link Configuration} implementation that does not save or load
  * from any source, and stores all values in memory only.
Index: src/main/java/org/bukkit/configuration/SectionPathData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bukkit/configuration/SectionPathData.java b/src/main/java/org/bukkit/configuration/SectionPathData.java
--- a/src/main/java/org/bukkit/configuration/SectionPathData.java	(revision adfb9263ccf97e71d308d967158ffef7f1339a3c)
+++ b/src/main/java/org/bukkit/configuration/SectionPathData.java	(date 1703956060000)
@@ -1,10 +1,9 @@
 package org.bukkit.configuration;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.Collections;
 import java.util.List;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 final class SectionPathData {
 
